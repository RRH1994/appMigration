#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	//Ограничение.Текст =
	//"РазрешитьЧтениеИзменение
	//|ГДЕ
	//|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	//|	) И ЗначениеРазрешено(Организация)"; 

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗагрузочнаяТаблица.Начисления КАК Т1
	|	ПО Т1.Ссылка = Т.Ссылка
	|
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т.Организация)
	|	И (Т1.Подразделение ЕСТЬ NULL
	|		ИЛИ ДляВсехСтрок(
	|			ЗначениеРазрешено(Т1.Подразделение)
	|			ИЛИ ДляОднойИзСтрок(ЗначениеРазрешено(Т1.Подразделение))))";
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.РасчетПоказателейБюджетовПрогнозов - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.РасчетПоказателейБюджетовПрогнозов - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа.
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не РасчетБюджетированиеРасширенный.ПроверкаУникальностиРегистратора(ДокументСсылка, "Сценарий", "КадровыеСведенияСотрудниковОрганизаций") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
		
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(РежимПроведения, ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, Объект, Отказ);
	
	// Предусмотрен режим проведения по отдельным физическим лицам.
	СписокФизическихЛиц = Неопределено;
	Если ДополнительныеПараметры <> Неопределено  
		И ДополнительныеПараметры.Свойство("ФизическиеЛица")
		И ДополнительныеПараметры.ФизическиеЛица.Количество() > 0 Тогда
		СписокФизическихЛиц = ДополнительныеПараметры.ФизическиеЛица
	КонецЕсли;
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, РеквизитыДляПроведения.ПериодРегистрации, СписокФизическихЛиц, СтруктураВидовУчета);
	
	// Проверка ошибок заполнения ТЧ
	Для Каждого СтрокаНачисления Из ДанныеДляПроведения.Начисления Цикл 
		РасчетБюджетированиеРасширенный.ПроверитьСоответствиеПодчиненностиРеквизитовСтрокаПоВладельцу(СтрокаНачисления, ДокументСсылка.Организация, Отказ); 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтруктураВидовУчета.Начисления Тогда
		РасчетБюджетированиеРасширенный.СформироватьДвиженияКадровыеСведения(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, Истина);
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, СтруктураВидовУчета);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий


#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс 


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки = Неопределено, ФизическиеЛица = Неопределено)
	
	//Начисления
	ТаблицыНачислений = РасчетБюджетированиеРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	
	Если ФизическиеЛица <> Неопределено 
		И ФизическиеЛица.Количество() = 1 Тогда
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Ложь);
	Иначе          
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Истина);
	КонецЕсли; 
	
	//Начисления
	РасчетБюджетированиеРасширенныйФормы.РасчетНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеЗаполнения.Начисления, Объект.Организация, Объект.МесяцНачисления, ПозицииВставки);

КонецПроцедуры


// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * Остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт

	Сотрудники =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ПоместитьВоВременноеХранилище(Сотрудники, АдресТаблицыСопоставления);
	
КонецПроцедуры

Функция ЗначениеЯчейки(Типы, ЗначениеЯчейки)
	
	ДанныеЯчейки = "";
	Для каждого ТипДанных Из Типы Цикл
		Объект = Метаданные.НайтиПоТипу(ТипДанных);
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОбъекта = РазложитьПолноеИмяОбъекта(Объект.ПолноеИмя());
		Если ОписаниеОбъекта.ТипОбъекта = "Справочник" Тогда
			Если НЕ Объект.Автонумерация И Объект.ДлинаКода > 0 Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "Перечисление" Тогда 
			Для каждого ЗначениеПеречисления Из Перечисления[ОписаниеОбъекта.НазваниеОбъекта] Цикл 
				Если Строка(ЗначениеПеречисления) = СокрЛП(ЗначениеЯчейки) Тогда 
					ДанныеЯчейки = ЗначениеПеречисления; 
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланСчетов" Тогда
			ДанныеЯчейки = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки);
			Если ДанныеЯчейки.Пустая() Тогда 
				ДанныеЯчейки = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланВидовХарактеристик" Тогда
			Если НЕ Объект.Автонумерация И Объект.ДлинаКода > 0 Тогда 
				ДанныеЯчейки = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
				ДанныеЯчейки = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		Иначе
			ДанныеЯчейки =  Строка(ЗначениеЯчейки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки) Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЯчейки;
	
КонецФункции

Процедура ТабличныйДокументВТаблицуЗначений(ШаблонСДанными, ИнформацияПоКолонкам, АдресЗагруженныхДанных) Экспорт
	
	ОписаниеТипаЧисло  = Новый ОписаниеТипов("Число");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаИнформацияПоКолонкам = ИнформацияПоКолонкам.Скопировать();
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Для каждого Колонка Из ТаблицаИнформацияПоКолонкам Цикл
		Если Колонка.ТипКолонки = Неопределено Тогда
			ТипКолонки = ОписаниеТипаСтрока;
		Иначе
			ТипКолонки = Колонка.ТипКолонки;
		КонецЕсли;
		ЗагружаемыеДанные.Колонки.Добавить(Колонка.ИмяКолонки, ТипКолонки, Колонка.ПредставлениеКолонки);
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("Идентификатор",                ОписаниеТипаЧисло,  "Идентификатор");
	ЗагружаемыеДанные.Колонки.Добавить("РезультатСопоставленияСтроки", ОписаниеТипаСтрока, "Результат");
	ЗагружаемыеДанные.Колонки.Добавить("ОписаниеОшибки",               ОписаниеТипаСтрока, "Причина");
	
	КорректировкаИдентификатора = 0;
	ВысотаШапки = ?(ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкиИмеютГруппировку(ТаблицаИнформацияПоКолонкам), 2, 1);
	
	ИнициализироватьКолонки(ТаблицаИнформацияПоКолонкам, ШаблонСДанными, ВысотаШапки);
	
	Для НомерСтроки = ВысотаШапки + 1 По ШаблонСДанными.ВысотаТаблицы Цикл
		СтрокаТаблицыПустая = Истина;
		НоваяСтрока               = ЗагружаемыеДанные.Добавить();
		НоваяСтрока.Идентификатор =  НомерСтроки - КорректировкаИдентификатора - 1;
		Для НомерКолонки = 1 По ШаблонСДанными.ШиринаТаблицы Цикл
			Ячейка = ШаблонСДанными.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
			
			НайденнаяКолонка = НайтиИнформациюОКолонке(ТаблицаИнформацияПоКолонкам, "Позиция", НомерКолонки);
			Если НайденнаяКолонка <> Неопределено Тогда
				ИмяКолонки = НайденнаяКолонка.ИмяКолонки;
				НоваяСтрока[ИмяКолонки] = ПриведениеЗначениеКТипу(Ячейка.Текст, НайденнаяКолонка.ТипКолонки);
				Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) И ЗначениеЗаполнено(Ячейка.Текст) Тогда
					НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки( НайденнаяКолонка.ТипКолонки.Типы(), Ячейка.Текст);
				КонецЕсли;
				Если СтрокаТаблицыПустая Тогда
					СтрокаТаблицыПустая = Не ЗначениеЗаполнено(Ячейка.Текст);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицыПустая Тогда
			ЗагружаемыеДанные.Удалить(НоваяСтрока);
			КорректировкаИдентификатора = КорректировкаИдентификатора + 1;
		КонецЕсли;
	КонецЦикла;
	
	АдресЗагруженныхДанных = ПоместитьВоВременноеХранилище(ЗагружаемыеДанные);
КонецПроцедуры

Функция ПриведениеЗначениеКТипу(Значение, ОписаниеТипов)
	
	Для каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если Тип = Тип("Дата") Тогда
			
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение, ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
			
		ИначеЕсли Тип = Тип("Булево") Тогда
			
			ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(Значение);
			
		ИначеЕсли Тип = Тип("Строка") Тогда
			
			ОписаниеТипаБулево = Новый ОписаниеТипов("Строка");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(Значение);
			
		ИначеЕсли Тип = Тип("Число") Тогда
			
			НецифровыеСимволы = СтрСоединить(СтрРазделить(Значение, "1234567890,."));
			Значение = СтрСоединить(СтрРазделить(Значение, НецифровыеСимволы));
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Возврат ОписаниеТипаЧисло.ПривестиЗначение(Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(ДанныеИзФайла, ШаблонСДанными, ИнформацияПоКолонкам)
	
	СтрокаЗаголовок= ДанныеИзФайла.Получить(0);
	СоответствиеКолонок = Новый Соответствие;
	
	Для каждого Колонка Из ДанныеИзФайла.Колонки Цикл
		НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "Синоним", СтрокаЗаголовок[Колонка.Имя]);
		Если НайденнаяКолонка = Неопределено Тогда
			НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "ПредставлениеКолонки", СтрокаЗаголовок[Колонка.Имя]);
		КонецЕсли;
		Если НайденнаяКолонка <> Неопределено Тогда
			СоответствиеКолонок.Вставить(НайденнаяКолонка.Позиция, Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс= 1 По ДанныеИзФайла.Количество() - 1 Цикл
		СтрокаТЗ = ДанныеИзФайла.Получить(Индекс);
		НоваяСтрока = Истина;
		Для НомерКолонки =1 По ШаблонСДанными.ШиринаТаблицы Цикл
			КолонкаВТаблице = СоответствиеКолонок.Получить(НомерКолонки);
			Колонка = ИнформацияПоКолонкам.Найти(НомерКолонки, "Позиция");
			Если Колонка <> Неопределено И Колонка.Видимость = Ложь Тогда
				Продолжить;
			КонецЕсли;
			Ячейка = ШаблонСДанными.ПолучитьОбласть(2, НомерКолонки, 2, НомерКолонки);
			Если КолонкаВТаблице <> Неопределено Тогда 
				Ячейка.ТекущаяОбласть.Текст = СтрокаТЗ[КолонкаВТаблице];
				Ячейка.ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			Иначе
				Ячейка.ТекущаяОбласть.Текст = "";
			КонецЕсли;
			Если НоваяСтрока Тогда
				ШаблонСДанными.Вывести(Ячейка);
				НоваяСтрока = Ложь;
			Иначе
				ШаблонСДанными.Присоединить(Ячейка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиИнформациюОКолонке(ТаблицаИнформацияПоКолонкам, ИмяКолонки, Значение)
	
	Отбор = Новый Структура(ИмяКолонки, Значение);
	НайденныеКолонки = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Колонка = Неопределено;
	Если НайденныеКолонки.Количество() > 0 Тогда 
		Колонка = НайденныеКолонки[0];
	КонецЕсли;
	
	Возврат Колонка;
КонецФункции

#Область Печать

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

#КонецОбласти  

Функция ДанныеДляПроведения(РеквизитыДляПроведения, МесяцНачисления, СписокФизическихЛиц, СтруктураВидовУчета)
	
	ДанныеДляПроведения = РасчетБюджетирование.СоздатьДанныеДляПроведенияНачисленияБюджетирования();
	
	ОстальныеВидыУчета = Ложь;
	Для Каждого КлючИЗначение Из СтруктураВидовУчета Цикл
		//Если КлючИЗначение.Ключ = "ДанныеДляРасчетаСреднего" Тогда 
		//	Продолжить;
		//КонецЕсли;
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") 
			И КлючИЗначение.Значение Тогда 
			ОстальныеВидыУчета = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОстальныеВидыУчета Тогда
		РасчетБюджетированиеРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления","Ссылка.ПериодРегистрации",,,,СписокФизическихЛиц);
	Конецесли;	
		
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗагрузочнаяТаблица.Ссылка КАК Ссылка,
	|	ЗагрузочнаяТаблица.Дата КАК Дата,
	|	ЗагрузочнаяТаблица.ПериодРегистрации КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА ЗагрузочнаяТаблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовБюджетирования.Утвержден)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Утвержден,
	|	НАЧАЛОПЕРИОДА(ЗагрузочнаяТаблица.ДатаНачала, МЕСЯЦ) КАК МесяцНачала,
	|	КОНЕЦПЕРИОДА(ЗагрузочнаяТаблица.ДатаОкончания, МЕСЯЦ) КАК МесяцОкончания,
	|	ЗагрузочнаяТаблица.Организация КАК Организация,
	|	ЗагрузочнаяТаблица.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ЗагрузочнаяТаблица КАК ЗагрузочнаяТаблица
	|ГДЕ
	|	ЗагрузочнаяТаблица.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗагрузочнаяТаблицаНачисления.НомерСтроки КАК НомерСтроки,
	|	ЗагрузочнаяТаблицаНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗагрузочнаяТаблицаНачисления.КодГрейда КАК КодГрейда,
	|	ЗагрузочнаяТаблицаНачисления.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ЗагрузочнаяТаблицаНачисления.Подразделение КАК Подразделение,
	|	ЗагрузочнаяТаблицаНачисления.МестоВозникновенияЗатрат КАК МестоВозникновенияЗатрат,
	|	ЗагрузочнаяТаблицаНачисления.МесяцНачало КАК НачалоПериода,
	|	ЗагрузочнаяТаблицаНачисления.МесяцКонец КАК ОкончаниеПериода,
	|	ЗагрузочнаяТаблицаНачисления.Ставка КАК Ставка,
	|	ЗагрузочнаяТаблицаНачисления.Оклад КАК Оклад,
	|	ЗагрузочнаяТаблицаНачисления.ДоплатаЗаФункционалОбразовательнойДеятельности КАК ДоплатаЗаФункционалОбразовательнойДеятельности,
	|	ЗагрузочнаяТаблицаНачисления.ДоплатаЗаПреподаваниеНаИнЯзыке КАК ДоплатаЗаПреподаваниеНаИнЯзыке,
	|	ЗагрузочнаяТаблицаНачисления.РезервНаСреднийЗаработок КАК РезервНаСреднийЗаработок,
	|	ЗагрузочнаяТаблицаНачисления.ДМС КАК ДМС,
	|	ЗагрузочнаяТаблицаНачисления.НСиБолезни КАК НСиБолезни
	|ИЗ
	|	Документ.ЗагрузочнаяТаблица.Начисления КАК ЗагрузочнаяТаблицаНачисления
	|ГДЕ
	|	ЗагрузочнаяТаблицаНачисления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
	КонецЦикла;
	
	Начисления = Результаты[1].Выгрузить();
	РеквизитыДляПроведения.Начисления = Начисления;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Дата, ПериодРегистрации, МесяцНачала, МесяцОкончания, Утвержден, Организация, Подразделение, Начисления");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Функция РазложитьПолноеИмяОбъекта(ПолноеИмяОбъекта) Экспорт
	Результат = СтрРазделить(ПолноеИмяОбъекта, ".", Ложь);
	
	ИмяОбъекта = Новый Структура;
	ИмяОбъекта.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ИмяОбъекта.Вставить("ТипОбъекта");
	ИмяОбъекта.Вставить("НазваниеОбъекта");
	ИмяОбъекта.Вставить("ИмяТабличнойЧасти");
	
	Если Результат.Количество() = 2 Тогда
		Если Результат[0] = "Документ" ИЛИ Результат[0] = "Справочник" ИЛИ Результат[0] = "БизнесПроцесс" 
			ИЛИ Результат[0] = "Перечисление" ИЛИ Результат[0] = "ПланВидовХарактеристик"
			ИЛИ Результат[0] = "ПланСчетов" Тогда
				ИмяОбъекта.ТипОбъекта = Результат[0];
				ИмяОбъекта.НазваниеОбъекта = Результат[1];
		Иначе
				ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
				ИмяОбъекта.НазваниеОбъекта = Результат[0];
				ИмяОбъекта.ИмяТабличнойЧасти = Результат[1];
		КонецЕсли;
	ИначеЕсли Результат.Количество() = 3 Тогда
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[2];
	ИначеЕсли Результат.Количество() = 4 Тогда 
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[3];
	ИначеЕсли Результат.Количество() = 1 Тогда
		ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
		ИмяОбъекта.НазваниеОбъекта = Результат[0];
	КонецЕсли;

	Возврат ИмяОбъекта;
	
КонецФункции

Функция ОпределитьТипОбъектаМетаданныхПоИмени(Имя)
	Для каждого Объект Из Метаданные.Справочники Цикл 
		Если Объект.Имя = Имя Тогда 
			Возврат "Справочник";
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Объект Из Метаданные.Документы Цикл 
		Если Объект.Имя = Имя Тогда 
			Возврат "Документ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

/////////////// Загрузка данных //////////////////////////

#Область ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьКолонки(ИнформацияПоКолонкам, ШаблонСДанными, ВысотаШапки = 1)
	
	Для каждого Строка Из ИнформацияПоКолонкам Цикл
		Строка.Позиция = -1;
	КонецЦикла;
	
	Для НомерКолонки = 1 По ШаблонСДанными.ШиринаТаблицы Цикл
		ЯчейкаЗаголовок = ШаблонСДанными.ПолучитьОбласть(ВысотаШапки, НомерКолонки, ВысотаШапки, НомерКолонки).ТекущаяОбласть;
		
		Если ЗначениеЗаполнено(ЯчейкаЗаголовок.Текст) Тогда
			Отбор = Новый Структура("Синоним", СокрЛП(ЯчейкаЗаголовок.Текст));
			НайденныеКолонка = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если НайденныеКолонка.Количество() > 0 Тогда
				НайденныеКолонка[0].Позиция = НомерКолонки;
			Иначе
				Отбор = Новый Структура("ПредставлениеКолонки",  СокрЛП(ЯчейкаЗаголовок.Текст));
				НайденныеКолонка = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонка.Количество() > 0 Тогда
					НайденныеКолонка[0].Позиция = НомерКолонки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьФайлВТабличнуюЧасть(ПараметрыВызоваСервера, АдресХранилища) Экспорт
	
	Расширение = ПараметрыВызоваСервера.Расширение;
	ДанныеДляЗаполнения = ПараметрыВызоваСервера.ДанныеДляЗаполнения;
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;
	ИнформацияПоКолонкам = ПараметрыВызоваСервера.ИнформацияПоКолонкам;
	
	Если Расширение = "csv" Тогда
		ЗагрузитьCSVФайлВТаблицу(ИмяВременногоФайла, ДанныеДляЗаполнения, ИнформацияПоКолонкам);
	Иначе
		ЗагруженныеДанныеДляЗаполнения = Новый ТабличныйДокумент;
		ЗагруженныеДанныеДляЗаполнения.Прочитать(ИмяВременногоФайла);
		
		НомерСтрокиСШапкойТаблицы = ?(ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкиИмеютГруппировку(ИнформацияПоКолонкам), 2, 1);
		
		Адрес = "";
		ТабличныйДокументВТаблицуЗначений(ЗагруженныеДанныеДляЗаполнения, ИнформацияПоКолонкам, Адрес);
		ЗагруженныеДанные = ПолучитьИзВременногоХранилища(Адрес);
		
		ОбластьВывода = ДанныеДляЗаполнения.ПолучитьОбласть(НомерСтрокиСШапкойТаблицы + 1, 1, НомерСтрокиСШапкойТаблицы + 1, ЗагруженныеДанные.Колонки.Количество());
		
		Для Счетчик = 1 По ЗагруженныеДанные.Колонки.Количество() Цикл
			ОбластьЗаполнения = ОбластьВывода.Область(1, Счетчик, 1, Счетчик);
			Колонка = ИнформацияПоКолонкам.Найти(Счетчик, "Позиция");
			Если Колонка <> Неопределено И Колонка.Видимость Тогда
				ОбластьЗаполнения.Параметр = Колонка.ИмяКолонки;
				ОбластьЗаполнения.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоСтрок = ЗагруженныеДанные.Количество();
		НомерСтроки = 1;
		Для Каждого Выборка Из ЗагруженныеДанные Цикл
			УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки);
			ОбластьВывода.Параметры.Заполнить(Выборка);
			ДанныеДляЗаполнения.Вывести(ОбластьВывода);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

#Область РаботаСCSVФайлами

Процедура ЗагрузитьCSVФайлВТаблицу(ИмяФайла, ШаблонСДанными, ИнформацияПоКолонкам)
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Если Строка = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не получилось загрузить данные из этого файла. Убедитесь в корректности данных в файле.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	КолонкиШапки = СтрРазделить(Строка, ";", Ложь);
	Источник = Новый ТаблицаЗначений;
	ПозицияКолонкиВФайле = Новый Соответствие();
	
	Позиция = 1;
	Для каждого Колонка Из КолонкиШапки Цикл
		НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "Синоним", Колонка);
		Если НайденнаяКолонка = Неопределено Тогда
			НайденнаяКолонка = НайтиИнформациюОКолонке(ИнформацияПоКолонкам, "ПредставлениеКолонки", Колонка);
		КонецЕсли;
		Если НайденнаяКолонка <> Неопределено Тогда
			НоваяКолонка = Источник.Колонки.Добавить();
			НоваяКолонка.Имя = НайденнаяКолонка.ИмяКолонки;
			НоваяКолонка.Заголовок = Колонка;
			ПозицияКолонкиВФайле.Вставить(Позиция, НоваяКолонка.Имя);
			Позиция = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Источник.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока Строка <> Неопределено Цикл
		НоваяСтрока = Источник.Добавить();
		Позиция = СтрНайти(Строка, ";");
		Индекс = 0;
		Пока Позиция > 0 Цикл
			Если Источник.Колонки.Количество() < Индекс + 1 Тогда
				Прервать;
			КонецЕсли;
			ИмяКолонки = ПозицияКолонкиВФайле.Получить(Индекс + 1);
			Если ИмяКолонки <> Неопределено Тогда
				НоваяСтрока[ИмяКолонки] = Лев(Строка, Позиция - 1);
			КонецЕсли;
			Строка = Сред(Строка, Позиция + 1);
			Позиция = СтрНайти(Строка, ";");
			Индекс = Индекс + 1;
		КонецЦикла;
		Если Источник.Колонки.Количество() = Индекс + 1  Тогда
			НоваяСтрока[Индекс] = Строка;
		КонецЕсли;

		Строка = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(Источник, ШаблонСДанными, ИнформацияПоКолонкам);
	
КонецПроцедуры

Процедура СохранитьТаблицуВCSVФайл(ПутьКФайлу, ИнформацияПоКолонкам) Экспорт
	
	ФорматЗаголовкаДляCSV = "";
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл 
		ФорматЗаголовкаДляCSV = ФорматЗаголовкаДляCSV + Колонка.ПредставлениеКолонки + ";";
	КонецЦикла;
	
	Если СтрДлина(ФорматЗаголовкаДляCSV) > 0 Тогда
		ФорматЗаголовкаДляCSV = Лев(ФорматЗаголовкаДляCSV, СтрДлина(ФорматЗаголовкаДляCSV)-1);
	КонецЕсли;
	
	Файл = Новый ЗаписьТекста(ПутьКФайлу);
	Файл.ЗаписатьСтроку(ФорматЗаголовкаДляCSV);
	Файл.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

Процедура УстановитьПроцентПрогресса(Всего, НомерСтроки)
	Процент = НомерСтроки * 50 / Всего;
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.СообщитьПрогресс(Процент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
