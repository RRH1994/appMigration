#Область ОписаниеПеременных

&НаКлиенте
Перем ИмяФайлаЗагрузки;

#КонецОбласти

&НаСервере
Процедура ОчиститьНаСервере()
	ОчиститьТаблицыДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда) 
	
	ОчиститьСообщения();
	
	Если ДанныеДляЗаполнения.ВысотаТаблицы > 1 Тогда
		ОчиститьДанныеДляЗаполненияНаСервере(); 
	КонецЕсли;
	
	ОчиститьНаСервере(); //Можно передать форму в общий модуль и там выполнить заполнение - там вызвать менеджер обработки
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСОтборомНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСОтбором(Команда)
	ЗаполнитьСОтборомНаСервере();
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов();
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.ФизическиеЛица");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов() 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					НСтр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение",					НСтр("ru = 'подразделения'"))); 
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Период", 						НСтр("ru = 'период'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеТабличнойЧастиДанными

&НаКлиенте
Процедура ВыполнитьЗаполнениеТабличнойЧастиДаннымиНаКлиенте()

	Элементы.ДополнительныеСтраницы.ТекущаяСтраница = Элементы.СтраницаКомментарийОтветственный;

	
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаСДаннымиПустая()
	
	Если ДанныеДляЗаполнения.ВысотаТаблицы < 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗагружаемыхДанных

#Область ЗагрузкаВТабличнуюЧасть

&НаСервере
Процедура СкопироватьСтруктуруТабличнойЧасти(АдресТабличнойЧасти)
	
	ДанныеДляТабличнойЧасти = ОписаниеТабличнойЧасти();
	
	Если ЗначениеЗаполнено(ИмяОбъектаСопоставления) Тогда
		ТабличнаяЧасть = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления);
	
		Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(РеквизитТабличнойЧасти.Имя, РеквизитТабличнойЧасти.Тип, РеквизитТабличнойЧасти.Представление());
		КонецЦикла;
	Иначе
		Для каждого Колонка Из ИнформацияПоКолонкам Цикл
			ДанныеДляТабличнойЧасти.Колонки.Добавить(Колонка.ИмяКолонки, Колонка.ТипКолонки, Колонка.ПредставлениеКолонки);
		КонецЦикла;
	КонецЕсли;
	
	
	АдресТабличнойЧасти = ПоместитьВоВременноеХранилище(ДанныеДляТабличнойЧасти);
	
КонецПроцедуры

// Описания документа, таблиц документа, панелей документа.
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)

	Описание = БюджетированиеРасширенныйКлиентСервер.ОписаниеЗагрузочногоДокумента();
	
	Описание.НачисленияИмя = "Начисления";
	Описание.НачисленияКоманднаяПанельИмя = "НачисленияАвтоКоманды";
	Описание.ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыЗагрузкиДанных(Форма));
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция ОписаниеТабличнойЧасти() 
	
	ДанныеДляТабличнойЧасти = Новый ТаблицаЗначений;
	ДанныеДляТабличнойЧасти.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), "Идентификатор");
	
	Возврат ДанныеДляТабличнойЧасти;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЗагрузкиДанных(Форма)
	
	Описание = БюджетированиеРасширенныйКлиентСервер.ОписаниеТаблицыЗагрузочныхДанных();
	Описание.СодержитПолеФизическоеЛицо = Истина;
	Описание.ИмяРеквизитаФизическоеЛицо = "ФизическоеЛицо";
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВТабличнуюЧасть()
	
	ВыполнитьЗаполнениеТабличнойЧастиДаннымиПослеПроверки();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаОНезаполненныхСтроках(Результат, Параметр) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		//ВыполнитьЗаполнениеТабличнойЧастиДаннымиПослеПроверки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, СтруктураОбъектаСопоставления, ДобавитьИдентификатор,
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
	Если ДобавитьИдентификатор Тогда 
		ВременнаяТЗ.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"), НСтр("ru = 'п/п'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОбъектаСопоставления) Тогда 
		Если Не ЗначениеЗаполнено(СтруктураОбъектаСопоставления.Синоним) Тогда
			ЗаголовокКолонки = "";
			Если СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы().Количество() > 1 Тогда 
				ЗаголовокКолонки = "Объекты";
			Иначе
				ЗаголовокКолонки = Строка(СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления.Типы()[0]);
			КонецЕсли;
			
		Иначе
			ЗаголовокКолонки = СтруктураОбъектаСопоставления.Синоним;
		КонецЕсли;
		ВременнаяТЗ.Колонки.Добавить("ОбъектСопоставления", СтруктураОбъектаСопоставления.ОписаниеТипаОбъектаСопоставления, ЗаголовокКолонки);
	КонецЕсли;
	
	Если ДобавитьРезультатСопоставленияСтроки Тогда 
		ВременнаяТЗ.Колонки.Добавить("РезультатСопоставленияСтроки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Результат'"));
	КонецЕсли;
	Если ДобавитьОписаниеОшибки Тогда
		ВременнаяТЗ.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Причина'"));
	КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		ВременнаяТЗ.Колонки.Добавить("СписокНеоднозначностей", ТипСЗ, "СписокНеоднозначностей");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, ОписаниеТипаОбъектаСопоставления , ДобавитьИдентификатор, 
		ДобавитьОписаниеОшибки, ДобавитьРезультатСопоставленияСтроки, ДобавитьСписокНеоднозначностей)
		
		ТипСтрока = Новый ОписаниеТипов("Строка");
		Если ДобавитьИдентификатор Тогда 
			ТипЧисло = Новый ОписаниеТипов("Число");
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Идентификатор", ТипЧисло, "ИсходныеДанные", "Идентификатор"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТипаОбъектаСопоставления) Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОбъектСопоставления", ОписаниеТипаОбъектаСопоставления, "ИсходныеДанные", ИмяОбъектаСопоставления));
		КонецЕсли;
		
		Если ДобавитьРезультатСопоставленияСтроки Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("РезультатСопоставленияСтроки", ТипСтрока, "ИсходныеДанные", "Результат"));
		КонецЕсли;
		Если ДобавитьОписаниеОшибки Тогда 
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ОписаниеОшибки", ТипСтрока, "ИсходныеДанные", "Причина"));
		КонецЕсли;

	Если ДобавитьСписокНеоднозначностей Тогда 
		ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СписокНеоднозначностей", ТипСЗ, "ИсходныеДанные", "СписокНеоднозначностей"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ() 
	
	МассивРеквизитов = Новый Массив;
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"); 
	ВременнаяТЗ.Колонки.Очистить();
	
	ДобавитьСтандартныеКолонкиВТаблицуСопоставления(ВременнаяТЗ, Неопределено, Истина, Истина, Истина, Ложь);
	ДобавитьСтандартныеКолонкиВМассивРеквизитов(МассивРеквизитов, Неопределено, Истина, Истина, Истина, Ложь);
	
	ОбязательныеКолонки = Новый Массив;
	КолонкиСодержащиеСвязиПараметровВыбора = Новый Соответствие;
	ОбъектРеквизитыТЧ = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаСопоставления); // ОбъектМетаданныхСправочник,  ОбъектМетаданныхДокумент
	РеквизитыТЧ = ОбъектРеквизитыТЧ.Реквизиты;
	
	Для каждого Колонка Из РеквизитыТЧ Цикл
		
		Если Колонка.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеКолонки.Добавить("ТЧ_" + Колонка.Имя);
		КонецЕсли;
		
		Если Колонка.СвязиПараметровВыбора.Количество() > 0 Тогда
			КолонкиСодержащиеСвязиПараметровВыбора.Вставить(Колонка.Имя, Колонка.СвязиПараметровВыбора);
		КонецЕсли;
		
		ТипРеквизита = ?(Колонка.Тип.СодержитТип(Тип("УникальныйИдентификатор")), ОбщегоНазначения.ОписаниеТипаСтрока(36), Колонка.Тип);
		
		ВременнаяТЗ.Колонки.Добавить("ТЧ_" + Колонка.Имя, ТипРеквизита, Колонка.Представление());
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТЧ_" + Колонка.Имя, ТипРеквизита, "ИсходныеДанные", Колонка.Представление()));
		
	КонецЦикла;
	
	Для каждого Колонка Из ИнформацияПоКолонкам Цикл
		ВременнаяТЗ.Колонки.Добавить("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, Колонка.ПредставлениеКолонки);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ФЛ_" + Колонка.ИмяКолонки, ТипСтрока, "ИсходныеДанные", Колонка.ПредставлениеКолонки));
	КонецЦикла;
	
	//ИзменитьРеквизиты(МассивРеквизитов);
	РеквизитыСозданы = Истина;
	
	ГруппаКолонокЗагружаемыеДанные = Элементы.Добавить("ЗагружаемыеДанные", Тип("ГруппаФормы"), Элементы.ИсходныеДанные);
	ГруппаКолонокЗагружаемыеДанные.Группировка = ГруппировкаКолонок.Горизонтальная;
	Картинка = БиблиотекаКартинок.Изменить;
	
	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_" + Колонка.Имя , Тип("ГруппаФормы"), ГруппаКолонокЗагружаемыеДанные);
			ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.Вертикальная;
			Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
		ИначеЕсли СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
			Продолжить;
		Иначе
			Родитель = ГруппаКолонокЗагружаемыеДанные;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("ИсходныеДанные_" + Колонка.Имя, Тип("ПолеФормы"), Родитель);
		
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ИсходныеДанные." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
			Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если Колонки.Количество() > 0 Тогда 
				НовыйЭлемент.Видимость = Колонки[0].Видимость;
			КонецЕсли;
		КонецЕсли;
		
		Если Колонка.Имя = "Идентификатор" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 1;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" ИЛИ Колонка.Имя = "ОписаниеОшибки" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
		
		Если ОбязательныеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда 
			НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Колонка.Имя, "ТЧ_") Тогда
			ТипКолонки = Метаданные.НайтиПоТипу(Колонка.ТипЗначения.Типы()[0]);
			Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
				НовыйЭлемент.КартинкаШапки = Картинка;
			КонецЕсли;
			
			КолонкаСвязьПараметровВыбора = КолонкиСодержащиеСвязиПараметровВыбора.Получить(Сред(Колонка.Имя, 4));
			Если КолонкаСвязьПараметровВыбора <> Неопределено Тогда 
				НовыйМассив = Новый Массив();
				Для каждого СвязьПараметраВыбора Из КолонкаСвязьПараметровВыбора Цикл // СвязьПараметраВыбора
					Позиция = СтрНайти(СвязьПараметраВыбора.ПутьКДанным, ".", НаправлениеПоиска.СКонца);
					Если Позиция > 0 Тогда
						ИмяЭлемента = Сред(СвязьПараметраВыбора.ПутьКДанным, Позиция + 1);
						НоваяСвязь = Новый СвязьПараметраВыбора(СвязьПараметраВыбора.Имя, "Элементы.ИсходныеДанные.ТекущиеДанные.ТЧ_" + ИмяЭлемента, СвязьПараметраВыбора.ИзменениеЗначения);
						НовыйМассив.Добавить(НоваяСвязь);
					КонецЕсли;
				КонецЦикла;
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
			КонецЕсли;
			
			Отбор = Новый Структура("Родитель", Сред(Колонка.Имя, 4));
			КолонкиГруппировки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			
			Если КолонкиГруппировки.Количество() = 1 Тогда
				
				КолонкаУровень2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкиГруппировки[0].ИмяКолонки);
				Если КолонкаУровень2 <> Неопределено Тогда 
					НовыйЭлемент = Элементы.Добавить(КолонкаУровень2.Имя, Тип("ПолеФормы"), Родитель); // РасширениеПоляФормыДляПоляВвода
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "ИсходныеДанные." + КолонкаУровень2.Имя;
					ТипКолонки = Метаданные.НайтиПоТипу(КолонкаУровень2.ТипЗначения.Типы()[0]);
					Если ТипКолонки <> Неопределено И СтрНайти(ТипКолонки.ПолноеИмя(), "Справочник") > 0 Тогда
						НовыйЭлемент.Заголовок = НСтр("ru = 'Данные из файла'");
					Иначе
						НовыйЭлемент.Заголовок = " ";
					КонецЕсли;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
				КонецЕсли;
				
			ИначеЕсли КолонкиГруппировки.Количество() > 1 Тогда
				ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанные_ФЛ_" + Колонка.Имя , Тип("ГруппаФормы"), Родитель);
				ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.ВЯчейке;
				Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
				
				Префикс = НСтр("ru = 'Данные из файла:'");
				Для каждого КолонкаГруппа Из КолонкиГруппировки Цикл
					Колонка2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкаГруппа.ИмяКолонки);
					Если Колонка2 <> Неопределено Тогда 
						НовыйЭлемент = Элементы.Добавить(Колонка2.Имя, Тип("ПолеФормы"), Родитель);  // РасширениеПоляФормыДляПоляВвода
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.ПутьКДанным = "ИсходныеДанные." + Колонка2.Имя;
						НовыйЭлемент.Заголовок = Префикс + Колонка2.Заголовок;
						НовыйЭлемент.ТолькоПросмотр = Истина;
						НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
						
						Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
						Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
						Колонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
							Если Колонки.Количество() > 0 Тогда 
								НовыйЭлемент.Видимость = Колонки[0].Видимость;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					Префикс = "";
				КонецЦикла;
			Иначе
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ИсходныеДанные");
КонецПроцедуры

&НаСервереБезКонтекста
Функция МенеджерОбъекта(ИмяОбъектаСопоставления)
		МассивОбъекта = Обработки.ЗагрузкаДанныхИзФайла.РазложитьПолноеИмяОбъекта(ИмяОбъектаСопоставления);
		Если МассивОбъекта.ТипОбъекта = "Документ" Тогда
			МенеджерОбъекта = Документы[МассивОбъекта.НазваниеОбъекта];
		ИначеЕсли МассивОбъекта.ТипОбъекта = "Справочник" Тогда
			МенеджерОбъекта = Справочники[МассивОбъекта.НазваниеОбъекта];
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" не найден'"), ИмяОбъектаСопоставления);
		КонецЕсли;
		
		Возврат МенеджерОбъекта;
КонецФункции

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.ЗагрузочнаяТаблица.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки = Неопределено, ФизическиеЛица = Неопределено)
	
	//Начисления
	ТаблицыНачислений = РасчетБюджетированиеРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	
	//Начисления
	РасчетБюджетированиеРасширенныйФормы.РасчетНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеЗаполнения.Начисления, Объект.Организация, Объект.МесяцНачисления, ПозицииВставки);

КонецПроцедуры

&НаСервере
Процедура ПростаяПострочнаяЗагрузкаИзТабличногоДокумента()
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина); 
	КонецЕсли;
	
	Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	КлассификаторXML = Макет.ПолучитьТекст();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(КлассификаторXML);
	ТаблицаСтран = СериализаторXDTO.ПрочитатьXML(Чтение); // ТаблицаЗначений
				
	// Старые версии классификаторов не содержат колонку МеждународноеНаименование
	Если ТаблицаСтран.Колонки.Найти("МеждународноеНаименование") = Неопределено Тогда
		ТаблицаСтран.Колонки.Добавить("МеждународноеНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Начисления");
	
	ДанныеЗаполнения.Вставить("Начисления", ОбщегоНазначения.СкопироватьРекурсивно(Объект.Начисления));
	
	Для НомерСтроки = 1 По ДанныеДляЗаполнения.ВысотаТаблицы Цикл
		
		ПодразделениеИзExcel = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 10).Текст);
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Если Не СокрЛП(Объект.Подразделение.Наименование) = ПодразделениеИзExcel Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	ПодразделенияОрганизаций.Ссылка КАК ПодразделениеСсылка
			                      |ИЗ
			                      |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			                      |ГДЕ
			                      |	ПодразделенияОрганизаций.Владелец = &Организация
			                      |	И ПодразделенияОрганизаций.Наименование = &Наименование");
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("Наименование", ПодразделениеИзExcel);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать(); Выборка.Следующий();
				ПодразделениеСсылка = Выборка.ПодразделениеСсылка;
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
				ПодразделениеОбъект.Наименование = ПодразделениеИзExcel;
				ПодразделениеОбъект.Владелец 	 = Объект.Организация.Ссылка;
				ПодразделениеОбъект.Код			 = БюджетированиеБазовый.ПолучитьНовыйКодПоМаске(ПодразделениеОбъект.Владелец);
				ПодразделениеОбъект.Записать();
				ПодразделениеСсылка = ПодразделениеОбъект.Ссылка;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;	
		КонецЕсли;	
		
		НоваяСтрока = ДанныеЗаполнения.Начисления.Добавить();
		НоваяСтрока.Подразделение = ПодразделениеСсылка;
		
		//1.Физлицо
		ФИО = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 2).Текст);
		РезидентРФ = НРег(СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 21).Текст));
		Если РезидентРФ = "рф" Тогда
			РезидентРФСсылка = Истина;
		Иначе
			РезидентРФСсылка = Ложь;
		КонецЕсли;
		Гражданство = НРег(СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 22).Текст));
		Если Гражданство = "рф" Или Гражданство = "россия" Тогда
			ГражданствоСсылка = Справочники.СтраныМира.Россия;
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	СтраныМира.Ссылка КАК ГражданствоСсылка
			                      |ИЗ
			                      |	Справочник.СтраныМира КАК СтраныМира
			                      |ГДЕ
			                      |	(СтраныМира.Наименование = &Наименование
			                      |			ИЛИ СтраныМира.НаименованиеПолное = &Наименование
			                      |			ИЛИ СтраныМира.КодАльфа3 = &Наименование
			                      |			ИЛИ СтраныМира.МеждународноеНаименование = &Наименование)");
			
			Запрос.УстановитьПараметр("Наименование", Гражданство);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	СтраныМира.Код КАК Код,
				                      |	СтраныМира.Наименование КАК Наименование,
				                      |	СтраныМира.НаименованиеПолное КАК НаименованиеПолное,
				                      |	СтраныМира.КодАльфа2 КАК КодАльфа2,
				                      |	СтраныМира.КодАльфа3 КАК КодАльфа3,
				                      |	СтраныМира.МеждународноеНаименование КАК МеждународноеНаименование
				                      |ПОМЕСТИТЬ ВТСтраныМира
				                      |ИЗ
				                      |	&ТаблицаСтран КАК СтраныМира
				                      |;
				                      |
				                      |////////////////////////////////////////////////////////////////////////////////
				                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				                      |	ВТСтраныМира.Код КАК Код,
				                      |	ВТСтраныМира.Наименование КАК Наименование,
				                      |	ВТСтраныМира.НаименованиеПолное КАК НаименованиеПолное, 
				                      |	ВТСтраныМира.КодАльфа2 КАК КодАльфа2,
				                      |	ВТСтраныМира.КодАльфа3 КАК КодАльфа3,
				                      |	ВТСтраныМира.МеждународноеНаименование КАК МеждународноеНаименование
				                      |ИЗ
				                      |	ВТСтраныМира КАК ВТСтраныМира
				                      |ГДЕ
				                      |	(ВТСтраныМира.Наименование = &Наименование
				                      |			ИЛИ ВТСтраныМира.НаименованиеПолное = &Наименование
				                      |			ИЛИ ВТСтраныМира.КодАльфа3 = &Наименование
				                      |			ИЛИ ВТСтраныМира.МеждународноеНаименование = &Наименование)");
				Запрос.УстановитьПараметр("ТаблицаСтран", ТаблицаСтран);
				Запрос.УстановитьПараметр("Наименование", Гражданство);
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать(); Выборка.Следующий(); 
					УстановитьПривилегированныйРежим(Истина);
					СтранаМираОбъект = Справочники.СтраныМира.СоздатьЭлемент();
					СтранаМираОбъект.Код = Выборка.Код;	
					СтранаМираОбъект.Наименование = Выборка.Наименование; 
					СтранаМираОбъект.НаименованиеПолное = Выборка.НаименованиеПолное;
					СтранаМираОбъект.КодАльфа2 = Выборка.КодАльфа2;
					СтранаМираОбъект.КодАльфа3 = Выборка.КодАльфа3;
					СтранаМираОбъект.МеждународноеНаименование = Выборка.МеждународноеНаименование;
					СтранаМираОбъект.Записать();
					УстановитьПривилегированныйРежим(Ложь);
					ГражданствоСсылка = СтранаМираОбъект.Ссылка;
				КонецЕсли;	
			Иначе
				Выборка = Результат.Выбрать(); Выборка.Следующий(); ГражданствоСсылка = Выборка.ГражданствоСсылка;
			КонецЕсли;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(ФИО) Тогда
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
			ТабНомер = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 3).Текст);
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	ФизическиеЛица.Ссылка КАК ФизЛицоСсылка
			                      |ИЗ
			                      |	Справочник.ФизическиеЛица КАК ФизическиеЛица
			                      |ГДЕ
			                      |	ФизическиеЛица.Код = &ТабНомер
			                      |	И (ФизическиеЛица.Наименование = &ФИО
			                      |			ИЛИ (ФизическиеЛица.Фамилия = &Фамилия
			                      |				И ФизическиеЛица.Имя = &Имя
			                      |				И ФизическиеЛица.Отчество = &Отчество))");
				
			Запрос.УстановитьПараметр("ФИО", ФИО);
			Запрос.УстановитьПараметр("Фамилия", СтруктураФИО.Фамилия);
			Запрос.УстановитьПараметр("Имя", СтруктураФИО.Имя);
			Запрос.УстановитьПараметр("Отчество", СтруктураФИО.Отчество);
			Запрос.УстановитьПараметр("ТабНомер", ТабНомер);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				УстановитьПривилегированныйРежим(Истина);
				ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
				ФизЛицоОбъект.Наименование = ФИО; 
				ФизЛицоОбъект.ФИО = ФИО; 
				ФизЛицоОбъект.Фамилия = СтруктураФИО.Фамилия;
				ФизЛицоОбъект.Имя = СтруктураФИО.Имя;
				ФизЛицоОбъект.Отчество = СтруктураФИО.Отчество;
				ФизЛицоОбъект.Инициалы = Лев(СтруктураФИО.Имя,1)+"."+Лев(СтруктураФИО.Отчество,1)+".";
				ФизЛицоОбъект.Код = ТабНомер;
				ФизЛицоОбъект.РезидентРФ = РезидентРФСсылка;
				ФизЛицоОбъект.Записать();
				ФизЛицоСсылка = ФизЛицоОбъект.Ссылка;
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				Выборка = Результат.Выбрать(); Выборка.Следующий(); ФизЛицоСсылка = Выборка.ФизЛицоСсылка;
			КонецЕсли;
		Иначе
			ФизЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка();
		Конецесли; 
		//Проверяем резиденство (для исчисления ЕСН)
		Если Не ФизЛицоСсылка.РезидентРФ = РезидентРФСсылка Тогда
			УстановитьПривилегированныйРежим(Истина);
			ФизЛицоОбъект = ФизЛицоСсылка.ПолучитьОбъект();
			ФизЛицоОбъект.РезидентРФ = РезидентРФСсылка;
			ФизЛицоОбъект.Записать(); 
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		//Проверяем гражданство физлица
		Если Не ФизЛицоСсылка.Гражданство = ГражданствоСсылка И Не ГражданствоСсылка = Справочники.СтраныМира.ПустаяСсылка() Тогда
			УстановитьПривилегированныйРежим(Истина);
			ФизЛицоОбъект = ФизЛицоСсылка.ПолучитьОбъект();
			ФизЛицоОбъект.Гражданство = ГражданствоСсылка;
			ФизЛицоОбъект.Записать(); 
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
		
		НоваяСтрока.ФизическоеЛицо = ФизЛицоСсылка;	
			
        //2. Грейды и коды грейдов
		Грейд = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 5).Текст);
		КодГрейда = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 4).Текст);
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Грейды.Ссылка КАК ГрейдСсылка
		                      |ИЗ
		                      |	Справочник.Грейды КАК Грейды
		                      |ГДЕ
		                      |	Грейды.Код = &Код
		                      |	ИЛИ Грейды.Наименование = &Код"); 
		Запрос.УстановитьПараметр("Код", Грейд); 
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			УстановитьПривилегированныйРежим(Истина);
			ГрейдОбъект = Справочники.Грейды.СоздатьЭлемент();
			ГрейдОбъект.Код = Грейд;
			ГрейдОбъект.Наименование = Грейд;
		    ГрейдОбъект.Записать(); 
			УстановитьПривилегированныйРежим(Ложь);
			ГрейдСсылка = ГрейдОбъект.Ссылка;
		Иначе
			Выборка = Результат.Выбрать(); Выборка.Следующий(); ГрейдСсылка = Выборка.ГрейдСсылка;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	КодыГрейдов.Ссылка КАК КодГрейдаСсылка
		                      |ИЗ
		                      |	Справочник.КодыГрейдов КАК КодыГрейдов
		                      |ГДЕ
		                      |	КодыГрейдов.Владелец = &Владелец
		                      |	И КодыГрейдов.Наименование = &КодГрейда");
		
		Запрос.УстановитьПараметр("Владелец",  ГрейдСсылка);
		Запрос.УстановитьПараметр("КодГрейда", КодГрейда);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			УстановитьПривилегированныйРежим(Истина);
			КодГрейдаОбъект = Справочники.КодыГрейдов.СоздатьЭлемент();
		    КодГрейдаОбъект.Владелец = ГрейдСсылка;
			КодГрейдаОбъект.Наименование = КодГрейда;
			КодГрейдаОбъект.Код = КодГрейда;
			КодГрейдаОбъект.Записать(); 
			УстановитьПривилегированныйРежим(Ложь);
			КодГрейдаСсылка = КодГрейдаОбъект.Ссылка;
		Иначе
			Выборка = Результат.Выбрать(); Выборка.Следующий(); КодГрейдаСсылка = Выборка.КодГрейдаСсылка;
		КонецЕсли;	
		НоваяСтрока.КодГрейда = КодГрейдаСсылка;
		
		//3. Подразделения организаций 
		Если Не ЗначениеЗаполнено(ПодразделениеСсылка) Тогда
			Подразделение = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 10).Текст);
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	ПодразделенияОрганизаций.Ссылка КАК ПодразделениеСсылка
			                      |ИЗ
			                      |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			                      |ГДЕ
			                      |	ПодразделенияОрганизаций.Владелец = &Организация
			                      |	И ПодразделенияОрганизаций.Наименование = &Наименование");
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация.Ссылка);
			Запрос.УстановитьПараметр("Наименование", Подразделение);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ПодразделениеОбъект = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
			    ПодразделениеОбъект.Владелец 			= Объект.Организация.Ссылка;
				ПодразделениеОбъект.Код					= БюджетированиеБазовый.ПолучитьНовыйКодПоМаске(ПодразделениеОбъект.Владелец);      
				ПодразделениеОбъект.Наименование 		= Подразделение;
				ПодразделениеОбъект.ГоловнаяОрганизация = Объект.Организация.Ссылка;
				ПодразделениеОбъект.Записать();
				ПодразделениеСсылка = ПодразделениеОбъект.Ссылка;
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				Выборка = Результат.Выбрать(); Выборка.Следующий(); ПодразделениеСсылка = Выборка.ПодразделениеСсылка;
			КонецЕсли;	
			НоваяСтрока.Подразделение = ПодразделениеСсылка;
		КонецЕсли;
		
		//3.1 МестоВозникновенияЗатрат
		МестоВозникновенияЗатрат = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 11).Текст);
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	МестаВозникновенияЗатрат.Ссылка КАК МестоВозникновенияЗатратСсылка
		                      |ИЗ
		                      |	Справочник.МестаВозникновенияЗатрат КАК МестаВозникновенияЗатрат
		                      |ГДЕ
		                      |	МестаВозникновенияЗатрат.Владелец = &Организация
		                      |	И МестаВозникновенияЗатрат.Наименование = &Наименование");
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация.Ссылка);
		Запрос.УстановитьПараметр("Наименование", МестоВозникновенияЗатрат);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			УстановитьПривилегированныйРежим(Истина);
			МестоВозникновенияЗатратОбъект = Справочники.МестаВозникновенияЗатрат.СоздатьЭлемент();
		    МестоВозникновенияЗатратОбъект.Владелец = Объект.Организация.Ссылка;
			МестоВозникновенияЗатратОбъект.Наименование = МестоВозникновенияЗатрат;
			МестоВозникновенияЗатратОбъект.Записать();
			МестоВозникновенияЗатратСсылка =МестоВозникновенияЗатратОбъект.Ссылка;
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			Выборка = Результат.Выбрать(); Выборка.Следующий(); МестоВозникновенияЗатратСсылка = Выборка.МестоВозникновенияЗатратСсылка;
		КонецЕсли;	
		НоваяСтрока.МестоВозникновенияЗатрат = МестоВозникновенияЗатратСсылка;
		
		МесяцНачалоСтрокой = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 12).Текст); 
		Если СтрДлина(МесяцНачалоСтрокой) = 10 И СтрНайти(МесяцНачалоСтрокой, ".") > 0 Тогда
			МесяцНачалоДатой = Дата(Прав(МесяцНачалоСтрокой, 4), Сред(МесяцНачалоСтрокой,4,2), Лев(МесяцНачалоСтрокой,2));
			НоваяСтрока.МесяцНачало = МесяцНачалоДатой;
		КонецЕсли;
		
		ДатаОкончанияСтрокой = ДанныеДляЗаполнения.Область(НомерСтроки, 13).Текст;
		Если СтрДлина(ДатаОкончанияСтрокой) = 10 И СтрНайти(ДатаОкончанияСтрокой, ".") > 0 Тогда
			ДатаОкончанияДатой = Дата(Прав(ДатаОкончанияСтрокой, 4), Сред(ДатаОкончанияСтрокой,4,2), Лев(ДатаОкончанияСтрокой,2));
			НоваяСтрока.МесяцКонец = ДатаОкончанияДатой;
		КонецЕсли;	
			
		//4. Должность
		Должность = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 6).Текст);
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Должности.Ссылка КАК ДолжностьСсылка
		                      |ИЗ
		                      |	Справочник.Должности КАК Должности
		                      |ГДЕ
		                      |	Должности.Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Должность);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			УстановитьПривилегированныйРежим(Истина);
			ДолжностьОбъект = Справочники.Должности.СоздатьЭлемент();
			ДолжностьОбъект.Наименование = Должность;
			ДолжностьОбъект.Записать();
			ДолжностьСсылка = ДолжностьОбъект.Ссылка;
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			Выборка = Результат.Выбрать(); Выборка.Следующий(); ДолжностьСсылка = Выборка.ДолжностьСсылка;
		КонецЕсли;	
		
		РуководящаяПозиция = НРег(СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 8).Текст));
		Если РуководящаяПозиция = "да" Тогда
			РуководящаяПозицияСсылка = Истина;
		ИначеЕсли РуководящаяПозиция = "нет" Тогда
			РуководящаяПозицияСсылка = Ложь;
		Иначе  
			РуководящаяПозицияСсылка = Ложь;
		КонецЕсли;	
		
		СтатусПозиции = НРег(СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 9).Текст));
		Если СтатусПозиции = "вакансия" Тогда
			СтатусПозицииСсылка = Перечисления.СтатусыПозицииШтатногоРасписания.Вакансия;
		ИначеЕсли СтатусПозиции = "штат" Тогда
			СтатусПозицииСсылка = Перечисления.СтатусыПозицииШтатногоРасписания.Штат;
		Иначе  
			СтатусПозицииСсылка = Перечисления.СтатусыПозицииШтатногоРасписания.ПустаяСсылка();
		КонецЕсли;	
		
		//5. Позиция штатного расписания
		ИмяПозицииШР = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 7).Текст);
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ПозицииШтатногоРасписания.Ссылка КАК ПозицияШтатногоРасписанияСсылка
		                      |ИЗ
		                      |	Справочник.ПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
		                      |ГДЕ
		                      |	ПозицииШтатногоРасписания.Владелец = &Организация
		                      |	И ПозицииШтатногоРасписания.Подразделение = &Подразделение
		                      |	И ПозицииШтатногоРасписания.РуководящаяПозиция = &РуководящаяПозиция
		                      |	И ПозицииШтатногоРасписания.СтатусПозиции = &СтатусПозиции
		                      |	И ПозицииШтатногоРасписания.Наименование = &Наименование
		                      |	И ПозицииШтатногоРасписания.Должность = &Должность");
		
		Запрос.УстановитьПараметр("Организация", 		Объект.Организация.Ссылка);
		Запрос.УстановитьПараметр("Подразделение", 		ПодразделениеСсылка);
		Запрос.УстановитьПараметр("РуководящаяПозиция", РуководящаяПозицияСсылка);
		Запрос.УстановитьПараметр("СтатусПозиции", 		СтатусПозицииСсылка);
		Запрос.УстановитьПараметр("Наименование", 		ИмяПозицииШР);
		Запрос.УстановитьПараметр("Должность", 			ДолжностьСсылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
			УстановитьПривилегированныйРежим(Истина);
			ПозицияШтатногоРасписанияОбъект = Справочники.ПозицииШтатногоРасписания.СоздатьЭлемент();
			ПозицияШтатногоРасписанияОбъект.Владелец 			= Объект.Организация.Ссылка;
			ПозицияШтатногоРасписанияОбъект.Подразделение 		= ПодразделениеСсылка;
			ПозицияШтатногоРасписанияОбъект.РуководящаяПозиция 	= РуководящаяПозицияСсылка;
			ПозицияШтатногоРасписанияОбъект.СтатусПозиции 		= СтатусПозицииСсылка;
			ПозицияШтатногоРасписанияОбъект.Наименование 		= ИмяПозицииШР;
			ПозицияШтатногоРасписанияОбъект.Должность 			= ДолжностьСсылка;
		    ПозицияШтатногоРасписанияОбъект.Записать();
		    УстановитьПривилегированныйРежим(Ложь);
			ПозицияШтатногоРасписанияСсылка = ПозицияШтатногоРасписанияОбъект.Ссылка;
		Иначе
			Выборка = Результат.Выбрать(); Выборка.Следующий(); ПозицияШтатногоРасписанияСсылка = Выборка.ПозицияШтатногоРасписанияСсылка;	
		КонецЕсли;	
		НоваяСтрока.ПозицияШтатногоРасписания = ПозицияШтатногоРасписанияСсылка;
		
		Ставка = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 14).Текст);
		Попытка
			Если Не ПустаяСтрока(Ставка) Тогда
				НоваяСтрока.Ставка = Число(Ставка);
			Иначе
				НоваяСтрока.Ставка = 0;
			КонецЕсли;	
		Исключение
			НоваяСтрока.Ставка = 0;	
		КонецПопытки;	
		
		Если ДанныеДляЗаполнения.Область(НомерСтроки, 15).СодержитЗначение Тогда
			ОкладЗначение = ДанныеДляЗаполнения.Область(НомерСтроки, 15).Значение;
			ОкладТип = ДанныеДляЗаполнения.Область(НомерСтроки, 15).ТипЗначения;
		Иначе	
			Оклад = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 15).Текст);
		КонецЕсли;	
		Попытка
			Если Не ПустаяСтрока(Оклад) Тогда
				НоваяСтрока.Оклад = Число(Оклад);
			Иначе
				НоваяСтрока.Оклад = 0;
			КонецЕсли;	
		Исключение
			НоваяСтрока.Оклад = 0;	
		КонецПопытки;	
		
		ДоплатаЗаФункционалОбразовательнойДеятельности = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 16).Текст);
		Попытка 
			Если Не ПустаяСтрока(ДоплатаЗаФункционалОбразовательнойДеятельности) Тогда
				НоваяСтрока.ДоплатаЗаФункционалОбразовательнойДеятельности = Число(ДоплатаЗаФункционалОбразовательнойДеятельности);
			Иначе
				НоваяСтрока.ДоплатаЗаФункционалОбразовательнойДеятельности = 0;	
			КонецЕсли;	
		Исключение
			НоваяСтрока.ДоплатаЗаФункционалОбразовательнойДеятельности = 0;	
		КонецПопытки;	
		
		ДоплатаЗаПреподаваниеНаИнЯзыке = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 17).Текст);
		Попытка
			Если Не ПустаяСтрока(ДоплатаЗаПреподаваниеНаИнЯзыке) Тогда
				НоваяСтрока.ДоплатаЗаПреподаваниеНаИнЯзыке = Число(ДоплатаЗаПреподаваниеНаИнЯзыке);	
			Иначе
				НоваяСтрока.ДоплатаЗаПреподаваниеНаИнЯзыке = 0;	
			КонецЕсли;	
		Исключение
			НоваяСтрока.ДоплатаЗаПреподаваниеНаИнЯзыке = 0;	
		КонецПопытки;	
		
		РезервНаСреднийЗаработок = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 18).Текст);
		Попытка
			Если Не ПустаяСтрока(РезервНаСреднийЗаработок) Тогда
				НоваяСтрока.РезервНаСреднийЗаработок = Число(РезервНаСреднийЗаработок);	
			Иначе
				НоваяСтрока.РезервНаСреднийЗаработок = 0;	
			КонецЕсли;	
		Исключение
			НоваяСтрока.РезервНаСреднийЗаработок = 0;	
		КонецПопытки;	
		
		ДМС = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 19).Текст);
		Попытка
			Если Не ПустаяСтрока(ДМС) Тогда
				НоваяСтрока.ДМС = Число(ДМС);
			Иначе
				НоваяСтрока.ДМС = 0;
			КонецЕсли;	
		Исключение
			НоваяСтрока.ДМС = 0;	
		КонецПопытки;	
		
		НСиБолезни = СокрЛП(ДанныеДляЗаполнения.Область(НомерСтроки, 20).Текст);
		Попытка
			Если Не ПустаяСтрока(НСиБолезни) Тогда
				НоваяСтрока.НСиБолезни = Число(НСиБолезни);
			Иначе
				НоваяСтрока.НСиБолезни = 0;	
			КонецЕсли;	
		Исключение
			НоваяСтрока.НСиБолезни = 0;	
		КонецПопытки;	
		
	КонецЦикла; 
	
	Если ТипЗнч(ДанныеЗаполнения.Начисления)=Тип("ТаблицаЗначений") И ДанныеЗаполнения.Начисления.Количество()>0 Тогда
		ОчиститьТаблицыДокументаНаСервере();
		ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СопоставитьЗагружаемыеДанныеНаСервере()
	
	ПростаяПострочнаяЗагрузкаИзТабличногоДокумента();

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь); 
	КонецЕсли;
	
	Возврат;

КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗаполнениеТабличнойЧастиДаннымиПослеПроверки()
	
	СопоставитьЗагружаемыеДанныеНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеВТаблицуСопоставления(АдресЗагруженныхДанных, АдресКопииТабличнойЧасти, СписокНеоднозначностей)
	
	ТабличнаяЧасть =  ПолучитьИзВременногоХранилища(АдресКопииТабличнойЧасти); // см. ОписаниеТабличнойЧасти 
	
	Если ТабличнаяЧасть = Неопределено ИЛИ ТипЗнч(ТабличнаяЧасть) <> Тип("ТаблицаЗначений") ИЛИ ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	КолонкиОбязательныеДляЗаполнения = Новый Соответствие;
	Для каждого КолонкаТаблицы Из ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы  Цикл
		КолонкиОбязательныеДляЗаполнения.Вставить(КолонкаТаблицы.Родитель, Истина);
	КонецЦикла;
	
	Объект.Начисления.Очистить();
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); // см. ОписаниеТабличнойЧасти 
	
	КолонкиТабличнойЧасти = Новый Соответствие();
	Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		КолонкиТабличнойЧасти.Вставить(Колонка.Имя, Истина);
	КонецЦикла;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		НоваяСтрока = Объект.Начисления.Добавить();
		НоваяСтрока.Идентификатор = Строка.Идентификатор;
		ЗаполненыВсеОбязательныеКолонки = Истина;
		Для каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
			Если Колонка.Имя <> "Идентификатор" Тогда
				НоваяСтрока["ТЧ_" + Колонка.Имя] = Строка[Колонка.Имя];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КолонкиОбязательныеДляЗаполнения.Получить(Колонка.Имя))
				И ЗаполненыВсеОбязательныеКолонки
				И НЕ ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
					ЗаполненыВсеОбязательныеКолонки = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока["РезультатСопоставленияСтроки"] = ?(ЗаполненыВсеОбязательныеКолонки, "СтрокаСопоставлена", "НеСопоставлен");
		
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор); 
		
		Неоднозначности = СписокНеоднозначностей.НайтиСтроки(Отбор);
		Если Неоднозначности.Количество() > 0 Тогда 
			НоваяСтрока["РезультатСопоставленияСтроки"] = "Неоднозначность";
			Для каждого Неоднозначность Из Неоднозначности Цикл
				НоваяСтрока["ОписаниеОшибки"] = НоваяСтрока["ОписаниеОшибки"] + Неоднозначность.Колонка+ ";";
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТЧ_" + Неоднозначность.Колонка);
				ПолеОформления.Использование = Истина;
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсходныеДанные.ОписаниеОшибки"); 
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит; 
				ЭлементОтбора.ПравоеЗначение = Неоднозначность.Колонка; 
				ЭлементОтбора.Использование = Истина;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<неоднозначность>'"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ЗагружаемыеДанные Цикл
		Отбор = Новый Структура("Идентификатор", Строка.Идентификатор);
		Строки = Объект.Начисления.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда 
			НоваяСтрока = Строки[0];
			Для каждого Колонка Из ЗагружаемыеДанные.Колонки Цикл
				Если Колонка.Имя <> "Идентификатор" И Колонка.Имя <> "РезультатСопоставленияСтроки" И Колонка.Имя <> "ОписаниеОшибки" Тогда
					НоваяСтрока["ФЛ_" + Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(ТекстОшибкиДляПользователя, ТехническаяИнформация)
	ТекстСообщенияОбОшибке = ТекстОшибкиДляПользователя + Символы.ПС
		+ НСтр("ru = 'Возможная причина: Загружаемые данные некорректные.
					|Техническая информация: %1'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ТехническаяИнформация);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);
КонецПроцедуры


#КонецОбласти

&НаСервере
Функция ОбластьЗаголовкаШаблонаТаблицы(Шаблон)
	МетаданныеОбластьЗаголовокТаблицы = Шаблон.Области.Найти("Шапка");
	
	Если МетаданныеОбластьЗаголовокТаблицы = Неопределено Тогда 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("R1");
	Иначе 
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("Шапка"); 
	КонецЕсли;
	
	Возврат ОбластьЗаголовокТаблицы;
	
КонецФункции

 &НаСервере
Функция НезаполненныеОбязательныеКолонки()
	НазванияКолонокБезДанных = Новый Массив;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	
	Шапка = ОбластьЗаголовкаШаблонаТаблицы(ДанныеДляЗаполнения);
	Для НомерКолонки = 1 По Шапка.ШиринаТаблицы Цикл 
		Ячейка = Шапка.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки);
		ИмяКолонки = СокрЛП(Ячейка.ТекущаяОбласть.Текст);
		
		ИнформацияОКолонке = Неопределено;
		Отбор = Новый Структура("ПредставлениеКолонки", ИмяКолонки);
		КолонкиОтбор = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
		
		Если КолонкиОтбор.Количество() > 0 Тогда
			ИнформацияОКолонке = КолонкиОтбор[0];
		Иначе
			Отбор = Новый Структура("ИмяКолонки", ИмяКолонки);
			КолонкиОтбор = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			
			Если КолонкиОтбор.Количество() > 0 Тогда
				ИнформацияОКолонке = КолонкиОтбор[0];
			КонецЕсли;
		КонецЕсли;
		Если ИнформацияОКолонке <> Неопределено Тогда
			Если ИнформацияОКолонке.ОбязательнаДляЗаполнения Тогда
				Для НомерСтроки = 2 По ДанныеДляЗаполнения.ВысотаТаблицы Цикл
					Ячейка = ДанныеДляЗаполнения.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					Если НЕ ЗначениеЗаполнено(Ячейка.ТекущаяОбласть.Текст) Тогда
						НазванияКолонокБезДанных.Добавить(ИнформацияОКолонке.ПредставлениеКолонки);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НазванияКолонокБезДанных;
КонецФункции

#Область ЗагрузкаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	УстановитьПривилегированныйРежим(Истина);
	#КонецЕсли

	Если ДанныеДляЗаполнения.ВысотаТаблицы > 1 Тогда
		ОчиститьДанныеДляЗаполненияНаСервере(); 
	КонецЕсли;
	
	ИмяФайла = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаСопоставления);
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайла", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ДиалогЗагрузкиФайла(Оповещение, ИмяФайла);
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	УстановитьПривилегированныйРежим(Ложь);
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИмяФайлаДляОбъектаМетаданных(ИмяФайлаЗагрузки)
	
	ИмяФайла = ИмяФайлаЗагрузки;
	
	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"|","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"""","");
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		//ДоступностьКнопокКомандойПанели(Ложь);
		Элементы.ДополнительныеСтраницы.ТекущаяСтраница = Элементы.СтраницаПрогресса;
		
		ИмяФайла                 = Результат.Имя;
		АдресВременногоХранилища = Результат.Хранение;
		Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
	
		ФоновоеЗадание = ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение);
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания); 
		
	КонецЕсли;
	
КонецПроцедуры  

#Область ФоновыеЗадания

&НаСервере
Функция ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчиститьНаСервере();
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ДанныеДляЗаполнения", ДанныеДляЗаполнения);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ПараметрыВызоваСервера.Вставить("ИнформацияПоКолонкам", РеквизитФормыВЗначение("ИнформацияПоКолонкам"));
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзФайла: Выполнение серверного метода загрузка данных из файла'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Документы.ЗагрузочнаяТаблица.ЗагрузитьФайлВТабличнуюЧасть",
		ПараметрыВызоваСервера, ПараметрыВыполненияВФоне);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаСервере
Процедура ОчиститьДанныеДляЗаполненияНаСервере()
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина); 
	КонецЕсли;
	
	ЭтотОбъект.ДанныеДляЗаполнения.Очистить();
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗадание.Статус = "Выполнено" Тогда 
		Если ДанныеДляЗаполнения.ВысотаТаблицы > 1 Тогда
			ОчиститьДанныеДляЗаполненияНаСервере(); 
		КонецЕсли;
		Элементы.ДополнительныеСтраницы.ТекущаяСтраница = Элементы.СтраницаКомментарийОтветственный;
		ДанныеДляЗаполнения = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
		ВыполнитьЗагрузкуДанныхВТабличнуюЧасть();  
	Иначе
		ВывестиСообщениеОбОшибке(НСтр("ru = 'Не удалось произвести загрузку данных.'"), ФоновоеЗадание.КраткоеПредставлениеОшибки);
	КонецЕсли;

КонецПроцедуры

// вывод прогресса

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ФоновоеЗаданиеПроцент = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ПараметрыЗагрузки() 
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ТипЗагрузки", "");
	ПараметрыЗагрузки.Вставить("ПолноеИмяОбъекта", "");
	ПараметрыЗагрузки.Вставить("Макет", "ЗагрузкаИзФайла");
	ПараметрыЗагрузки.Вставить("ДополнительныеПараметры", Новый Структура);
	
	Возврат ПараметрыЗагрузки;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипЗагрузки = "ТабличнаяЧасть";
	
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	
	ИмяОбъектаСопоставления = Обработки.ЗагрузкаДанныхИзФайла.ПолноеИмяОбъектаТабличнаяЧасть(Метаданные.Документы.ЗагрузочнаяТаблица.ТабличныеЧасти.Начисления.ПолноеИмя());
		
	ТаблицаИнформацияПоКолонкам = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЗагрузкаДанныхИзФайла", ИмяОбъектаСопоставления,, ИмяПользователя()); // ТаблицаЗначений
	
	Если ТаблицаИнформацияПоКолонкам = Неопределено Тогда
		ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	Иначе
		Если ТаблицаИнформацияПоКолонкам.Колонки.Найти("Родитель") = Неопределено Тогда
			ТаблицаИнформацияПоКолонкам = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
		КонецЕсли;
	КонецЕсли;
	
	КлючиИдентификаторовЗаполнения = "Организация, Ответственный"; //Другие обязательные реквизиты - указать
	ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный");
	Бюджетирование.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
	
	ПараметрыЗагрузкиДанных = ПараметрыЗагрузки();
	ПараметрыЗагрузкиДанных.ТипЗагрузки = "ТабличнаяЧасть";
	ПараметрыЗагрузкиДанных.ПолноеИмяОбъекта = ИмяОбъектаСопоставления;
	ПараметрыЗагрузкиДанных.Макет = ?(ЗначениеЗаполнено(Параметры.ИмяМакетаСШаблоном), Параметры.ИмяМакетаСШаблоном, "ЗагрузкаИзФайла");
	ПараметрыЗагрузкиДанных.ДополнительныеПараметры = ДополнительныеПараметры;
		
	Если Параметры.Свойство("КолонкиМакета") И Параметры.КолонкиМакета <> Неопределено Тогда
		Элементы.ИзменитьБланк.Видимость = Ложь;
		Элементы.ИзменитьБланкЗаполнениеТаблицы.Видимость = Ложь;
		ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ЗагрузкаВТабличнуюЧасть.ДинамическийМакет",, Параметры.ПолноеИмяТабличнойЧасти);
	Иначе
		Обработки.ЗагрузкаДанныхИзФайла.ОпределитьИнформацияПоКолонкам(ПараметрыЗагрузкиДанных, ТаблицаИнформацияПоКолонкам);
		ЗагрузкаДанныхИзФайла.ДобавитьСтатистическуюИнформацию("РежимЗапуска.ЗагрузкаВТабличнуюЧасть.СтатическийМакет",, Параметры.ПолноеИмяТабличнойЧасти);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(ТаблицаИнформацияПоКолонкам, "ИнформацияПоКолонкам");

	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	//УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетЗагрузкиСервер()
	
	ТабДок = Документы.ЗагрузочнаяТаблица.ПолучитьМакет("ЗагрузкаИзФайла");
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьМакетЗагрузки(Команда)
	
	ТабДок = ПолучитьМакетЗагрузкиСервер();
	ТабДок.Показать("Шаблон для загрузочной таблицы");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры   

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	БюджетированиеРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)


КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	a = 1;	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	a = 1;	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)  

	// СтандартныеПодсистемы.УправлениеДоступом 
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом 
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли; 
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	//СтандартнаяОбработка = Ложь;
	//
	//ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	//ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//ПараметрыФормы.Вставить("ОбъектВерсионирования", Объект.Ссылка); 
	//Если Не ПараметрыФормы.Свойство("Отбор") Тогда
	//	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	//	ПараметрыФормы.Отбор.Вставить("ПоВладельцу", Истина);
	//	ПараметрыФормы.Отбор.Вставить("ТипВладелеца", Новый ОписаниеТипов("ДокументСсылка.ЗагрузочнаяТаблица"))
	//КонецЕсли; 
	//ОткрытьФорму("Справочник.ВерсияБюджетирования.ФормаВыбора", ПараметрыФормы, Элементы.Версия);
	//
	//Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииШтатногоРасписания(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПозицияШтатногоРасписания) Тогда
		ТекущиеДанные.Подразделение = БюджетированиеКлиентСерверПовтИсп.ПозицииШтатногоРасписанияПодразделения(ТекущиеДанные.ПозицияШтатногоРасписания)[0];
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеДанныеПозицияШтатногоРасписанияПриИзменении(Элемент)
	ПриИзмененииШтатногоРасписания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеДанныеПозицияШтатногоРасписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПодразделения(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
		ТекущиеДанные.ПозицияШтатногоРасписания = БюджетированиеКлиентСерверПовтИсп.СоответствиеПозицийШтатногоРасписанияПодразделений(ТекущиеДанные.Подразделение, ТекущиеДанные.ПозицияШтатногоРасписания)[0];
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ИсходныеДанныеПодразделениеПриИзменении(Элемент)
	ПриИзмененииПодразделения(Элемент);
КонецПроцедуры

&НаСервере
Функция ВыбраннаяДатаВнеИнтервалаСценария(ДатаИнтервала)
	

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПриИзмененииМесяцаНачалаВСтрокеНаСервере(ДатаИнтервалаВСтроке)
	
	//БюджетированиеРасширенный.ПриИзмененииМесяцаНачалаВСтрокеНаСервере(ЭтотОбъект);
	СценарийОбъекта = ЭтотОбъект.Объект.Сценарий;
	Если ДатаИнтервалаВСтроке < СценарийОбъекта.НачалоДействия Или ДатаИнтервалаВСтроке > СценарийОбъекта.ОкончаниеДействия Тогда
		Возврат СценарийОбъекта.НачалоДействия;
	Иначе
		Возврат ДатаИнтервалаВСтроке;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПриИзмененииМесяцаКонецВСтрокеНаСервере(ДатаИнтервалаВСтроке)
	
	//БюджетированиеРасширенный.ПриИзмененииМесяцаНачалаВСтрокеНаСервере(ЭтотОбъект);
	СценарийОбъекта = ЭтотОбъект.Объект.Сценарий;
	Если ДатаИнтервалаВСтроке < СценарийОбъекта.НачалоДействия Или ДатаИнтервалаВСтроке > СценарийОбъекта.ОкончаниеДействия Тогда
		Возврат СценарийОбъекта.ОкончаниеДействия;
	Иначе
		Возврат ДатаИнтервалаВСтроке;	
	КонецЕсли;	
	
КонецФункции


&НаКлиенте
Процедура ИсходныеДанныеМесяцНачалоПриИзменении(Элемент) 
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДатаВРеквизит = ПриИзмененииМесяцаНачалаВСтрокеНаСервере(ТекущиеДанные.МесяцНачало);
	
	Если ДатаВРеквизит <> ТекущиеДанные.МесяцНачало Тогда
		ТекущиеДанные.МесяцНачало = ДатаВРеквизит;
		Предупреждение(НСтр("ru = 'Указанная дата находится вне интервала сценария. Установлена дата начала сценария!'"));
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходныеДанныеМесяцКонецПриИзменении(Элемент) 
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ДатаВРеквизит = ПриИзмененииМесяцаКонецВСтрокеНаСервере(ТекущиеДанные.МесяцКонец);
	
	Если ДатаВРеквизит <> ТекущиеДанные.МесяцКонец Тогда
		ТекущиеДанные.МесяцКонец = ДатаВРеквизит;
		Предупреждение(НСтр("ru = 'Указанная дата находится вне интервала сценария. Установлена дата окончания сценария!'"));
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииПоляСВладельцемОрганизация(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	//ПараметрыДляВыбора = БюджетированиеРасширенныйКлиент.ПараметрыДляВыбораПоляСВладельцемОрганизация();
	//ПараметрыДляВыбора.Форма = ЭтаФорма;
	//ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	//ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	//
	//БюджетированиеРасширенныйКлиент.ПриНажатииПоляСВладельцемОрганизация(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИсходныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

//	ПриНажатииПоляСВладельцемОрганизация(ОписаниеТаблицыЗагрузкиДанных(ЭтаФорма), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
//	
КонецПроцедуры

#КонецОбласти   

