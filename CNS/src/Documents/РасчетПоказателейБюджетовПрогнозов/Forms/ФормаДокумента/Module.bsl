#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФизическиеЛицаКРасчету Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	БюджетированиеРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	ЗаполнитьСтрокиТаблицПоКлючевымПолям();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	ЗаполнитьВидыОпераций(НовыйДокумент);
	
	// Устанавливаем значения реквизитов формы.
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	//Здесь можем перезаполнить реквизиты объекта
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	БюджетированиеКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	// Раскомментировать и при необходимости прописать процеудры
	//ЗагрузитьНастройки();
	//ЗаполнитьЗаголовокФормы();
	//УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(НайденыИсправленияПриОткрытии);
	//УстановитьДоступностьКомандыДозаполнить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено, КонтролируемыеПоля = Неопределено, ОписаниеПанелиВычеты = Неопределено, ОписаниеКлючевыхРеквизитов = Неопределено, ТаблицыОчищаемыеПриИзменении = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		
		// Создание реквизитов.
		
		// Создание элементов
		
		// Установка свойств элементов формы.
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Имя группы", "Видимость", Объект.Элемент?);
		
		//Добавение кнопок 
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура(
			"КонтролируемыеПоля, 
			|ДобавлятьЭлементыФормы, 
			|ДобавлятьРеквизитыФормы, 
			|ОтложенноеИзменение");
		ДополнительныеПараметры.КонтролируемыеПоля = КонтролируемыеПоля; 
		ДополнительныеПараметры.ДобавлятьЭлементыФормы = ДобавлятьЭлементыФормы;
		ДополнительныеПараметры.ДобавлятьРеквизитыФормы = ДобавлятьРеквизитыФормы;
		ДополнительныеПараметры.ОтложенноеИзменение = ОтложенноеИзменение;
		
		РасчетБюджетированиеРасширенныйФормы.ДокументыРасчетПоказателейБюджетовПрогнозовДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(ЭтаФорма), "Начисления", "НачисленияАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОпераций(НовыйДокумент)
	
	//В дальнейшем будем здась устаанвливать занчения реквизитовформы

КонецПроцедуры	

#КонецОбласти


&НаСервере
Процедура ЗаполнитьСтрокиТаблицПоКлючевымПолям(ПозицииВставки = Неопределено, Сотрудники = Неопределено)
	
	СтрокиТаблицДокументаПоФизическимЛицам = Новый ФиксированноеСоответствие(СтрокиТаблицПоФизическимЛицам(Объект));

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();

	РасчетБюджетированиеРасширенныйКлиент.ЗаполнитьДокументРасчетПоказателейБюджетовПрогнозов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	//РасчетБюджетированиеРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(Форма, ОписаниеДокумента(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)

	//ОчиститьНаСервере();   
	РасчетБюджетированиеРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	РасчетБюджетированиеРасширенныйКлиент.ОчиститьСписокФизическиеЛицаКРасчету(ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте() Экспорт
	
	УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнениеДокументаРасчетПоказателейБюджетовПрогнозов",,Ложь);
	
	Результат = РезультатЗаполненияВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		РасчетБюджетированиеРасширенныйКлиент.ОчиститьСписокФизическиеЛицаКРасчету(ЭтаФорма);
	
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура("Сценарий, Организация,ДатаНачала,ДатаОкончания");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_РасчетПоказателейБюджетовПрогнозов", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РасчетПоказателейБюджетовПрогнозов" Тогда
		
		Если Параметр.Свойство("Организация")
			И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Сценарий")
			И Параметр.Сценарий = Объект.Сценарий Тогда
			
			//Здесь можно передать управление в общий модуль и сформировать текст сообщения в форме о ошибках, прежупреждениях			
		КонецЕсли;
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Модифицированность = Ложь;
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = Бюджетирование.ДесериализоватьОбъектИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносовВДлительнойОперации(Объект.Организация, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				Иначе
					РасчетБюджетированиеРасширенныйКлиент.ОчиститьСписокФизическиеЛицаКРасчету(ЭтаФорма);
					Если ПересчетФизическогоЛицаВДлительнойОперации Тогда
						ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте();
					Иначе
						ЗаполнениеПослеВыполненияДлительнойОперации();
					КонецЕсли;
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
				ОповеститьОбИзмененииОбъекта();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		ИначеЕсли Не ФормаДлительнойОперации.Открыта() И ПроведениеВДлительнойОперации Тогда
			ПроведениеВДлительнойОперации = Ложь;
			ЗакрыватьПослеЗаписи = Ложь;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФизическиеЛицаПериодДействияДляПерерасчета(ФизическиеЛица = Неопределено)
	
	Если ФизическиеЛица = Неопределено Тогда
		ФизическиеЛицаПериодДействияПерерасчет = Объект.ФизическиеЛицаПерерасчет.Выгрузить();
	Иначе     
		
	КонецЕсли;	
	
	Возврат ФизическиеЛицаПериодДействияПерерасчет;
	
КонецФункции

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации()
	
	ФизическиеЛицаПерерасчет = ФизическиеЛицаПериодДействияДляПерерасчета();
	
	РасчетБюджетированиеРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	
	СтруктураПараметров = РасчетБюджетированиеРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ДокументСсылка = Объект.Ссылка;
	СтруктураПараметров.Подразделение = Объект.Подразделение;
	СтруктураПараметров.МестоВозникновенияЗатрат = Объект.МестоВозникновенияЗатрат;
	СтруктураПараметров.ВидРасчета = Объект.ВидРасчета;
	СтруктураПараметров.Сценарий = Объект.Сценарий;
	СтруктураПараметров.МесяцНачисления = Объект.МесяцНачисления;
	СтруктураПараметров.НачалоПериода = НачалоМесяца(Объект.ДатаНачала);
	СтруктураПараметров.ОкончаниеПериода = КонецМесяца(Объект.ДатаОкончания);  
	СтруктураПараметров.ФизическиеЛица = ФизическиеЛицаПерерасчет;
	СтруктураПараметров.ФизическиеЛицаПериодДействияПерерасчет = ФизическиеЛицаПерерасчет; 

	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа «Расчет показателей бюджетов (прогнозов)»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.РасчетПоказателейБюджетовПрогнозов.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетБюджетированиеРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.ЭтоРасчетПоказателейБюджетовПрогнозов = Истина;
	
	//Добавляем описание для начислений окладов
	Описание.НачисленияИмя = "Начисления";
	Описание.ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма));
	
	//Добавляем описание для начислений взносов в фонды
	Описание.ВзносыИмя = "Взносы";
	Описание.ОписанияТаблиц.Вставить("Взносы", ОписаниеТаблицыВзносы(Форма));
	
	Описание.ЗаполнятьПерерасчеты = Форма.Объект.ФизическиеЛицаПерерасчет.Количество() > 0;
	
	Описание.ОбязательныеПоля.Добавить(РасчетБюджетированиеРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru = 'МесяцНачисления'"), "МесяцНачисленияСтрокой"));
	
	Возврат Описание;
	
КонецФункции

&НаСервереБезКонтекста 
Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию)	
	//СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию);
	//СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения, Организация, МесяцНачисления);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.РасчетПоказателейБюджетовПрогнозов.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла; 
	СтрокиТаблицДокументаПоФизическимЛицам = Неопределено;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	ФизическиеЛица = Неопределено;
	
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		ОчиститьТаблицыДокументаНаСервере();
		
		ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, Объект);

	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НовыйСтруктураТаблицДокумента()
	
	СтруктураТаблиц = Новый Структура("СодержимоеДокумента,ШаблонСтрокТаблиц", Новый Структура, Новый Структура);
	ТаблицыСодержимогоДокумента = РасчетБюджетированиеРасширенный.НовыйСодержимоеДокументаРасчетаБюджетирования();
	Для Каждого КлючИЗначение Из ТаблицыСодержимогоДокумента Цикл
		ТаблицаЗначений = КлючИЗначение.Значение;
		СтруктураСтрокой = "";
		НужнаЗапятая = Ложь;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если НужнаЗапятая Тогда
				СтруктураСтрокой = СтруктураСтрокой + ",";
			КонецЕсли;
			СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
			НужнаЗапятая = Истина;
		КонецЦикла;
		СтруктураТаблиц.ШаблонСтрокТаблиц.Вставить(КлючИЗначение.Ключ, Новый ФиксированнаяСтруктура(СтруктураСтрокой));
		СтруктураТаблиц.СодержимоеДокумента.Вставить(КлючИЗначение.Ключ, Новый Массив);
	КонецЦикла;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицыДокументаСДаннымиФизическихЛиц()
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("Взносы");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоваяСтрокаДанныхПоФизическимЛицам(ТаблицаДанных, ШаблонСтроки)
	
	НоваяСтрока = Новый Структура(ШаблонСтроки);
	ТаблицаДанных.Добавить(НоваяСтрока);
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокиТаблицПоФизическимЛицам(Документ, ЗаполнятьИдентификаторы = Истина, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Если Не ЗаполнятьИдентификаторы Тогда
		ШаблонСтрок = НовыйСтруктураТаблицДокумента().ШаблонСтрокТаблиц;
	КонецЕсли;
	
	ФизическиеЛицаПоИдентификаторам = Новый Соответствие;
	СтрокиПоФизическимЛицам = Новый Соответствие;
	
	Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
		Для Каждого СтрокаТаблицы Из Документ[ИмяТаблицы] Цикл
			
			ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
			
			Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиПоФизическимЛицам[ФизическоеЛицо] = Неопределено Тогда
				ТаблицыФизическогоЛица = Новый Структура;
				СтрокиПоФизическимЛицам.Вставить(ФизическоеЛицо, ТаблицыФизическогоЛица);
			Иначе
				ТаблицыФизическогоЛица = СтрокиПоФизическимЛицам[ФизическоеЛицо];
			КонецЕсли;
			
			Если Не ТаблицыФизическогоЛица.Свойство(ИмяТаблицы) Тогда
				ТаблицыФизическогоЛица.Вставить(ИмяТаблицы, Новый Массив);
			КонецЕсли;
			
			Если ЗаполнятьИдентификаторы Тогда
				ТаблицыФизическогоЛица[ИмяТаблицы].Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			Иначе
				НоваяСтрока = НоваяСтрокаДанныхПоФизическимЛицам(ТаблицыФизическогоЛица[ИмяТаблицы], ШаблонСтрок[ИмяТаблицы]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокиПоФизическимЛицам;
	
КонецФункции

&НаСервереБезКонтекста
Функция СодержимоеДокументаПослеРасчета(АдресХранилища, ОписаниеТаблиц)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если Не СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = СтруктураДанных.СтруктураПараметров;
	
	СодержимоеДокумента = РасчетБюджетированиеРасширенный.НовыйСодержимоеДокументаРасчетаБюджетирования();
	СодержимоеДокумента.Вставить("Ссылка", СтруктураПараметров.ДокументСсылка);
	СодержимоеДокумента.Вставить("ФизическиеЛица", СтруктураПараметров.ФизическиеЛица);
	СодержимоеДокумента.Вставить("Организация", СтруктураПараметров.Организация);
	СодержимоеДокумента.Вставить("МесяцНачисления", СтруктураПараметров.МесяцНачисления);
	
	СодержимоеФормыДляЗаполнения = Новый Структура("Объект", СодержимоеДокумента);
	ФизическиеЛица = СтруктураПараметров.ФизическиеЛица;
	
	ДанныеДляЗаполненияВДанныеФормы(ДанныеДляЗаполнения, СодержимоеДокумента,, ФизическиеЛица);
	
	СтрокиТаблицПоФизическимЛицам = СтрокиТаблицПоФизическимЛицам(СодержимоеДокумента, Ложь);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ФизическиеЛица) Тогда
		ФизическиеЛица = СтруктураПараметров.ФизическиеЛица;
	Иначе
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицПоФизическимЛицам, "Ключ");	
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("СтрокиТаблицРасчетаПоФизическимЛицам", СтрокиТаблицПоФизическимЛицам);
	Результат.Вставить("ФизическиеЛица", ФизическиеЛица);
		
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокумента, СтрокиТаблицРасчета, ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = ТаблицыДокументаСДаннымиФизическихЛиц();
	КонецЕсли;
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		ТаблицыДокументаФизическогоЛица = СтрокиТаблицДокумента[ФизическоеЛицо];
		ТаблицыРасчетаФизическогоЛица = СтрокиТаблицРасчета[ФизическоеЛицо];
		
		Для Каждого ИмяТаблицы Из ТаблицыДокумента Цикл
			СтрокиТаблицыДокумента = Неопределено;
			Если Не ТаблицыДокументаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыДокумента) Тогда
				СтрокиТаблицыДокумента = Новый Массив;
				ТаблицыДокументаФизическогоЛица.Вставить(ИмяТаблицы, СтрокиТаблицыДокумента);
			КонецЕсли;
			
			СтрокиТаблицыРасчета = Неопределено;
			ОбходТаблицыИдентификаторов = РасчетБюджетированиеРасширенныйКлиентСервер.НовыйОбходИдентификаторовТаблицы(СтрокиТаблицыДокумента);
			
			Если ТаблицыРасчетаФизическогоЛица <> Неопределено
				И ТаблицыРасчетаФизическогоЛица.Свойство(ИмяТаблицы, СтрокиТаблицыРасчета) Тогда
				
				Для Каждого СтрокаИсточника Из СтрокиТаблицыРасчета Цикл
					СтрокаФормы = РасчетБюджетированиеРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
					ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточника);
				КонецЦикла;
			КонецЕсли;
			
			РасчетБюджетированиеРасширенныйКлиентСервер.УдалитьНеактуальныеСтрокиФормы(Объект[ИмяТаблицы], ОбходТаблицыИдентификаторов);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(Форма)
	
	Описание = РасчетБюджетированиеРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеФизическоеЛицо = Истина;
	Описание.ИмяРеквизитаФизическоеЛицо = "ФизическоеЛицо";
	
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "Начисления, Взносы";
	
	Возврат Описание;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыВзносы(Форма)
	
	Описание = РасчетБюджетированиеРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеФизическоеЛицо = Истина;
	Описание.ИмяРеквизитаФизическоеЛицо = "ФизическоеЛицо";
	Описание.ИмяТаблицы					= "Взносы";
	Описание.ПутьКДанным 				= "Объект.Взносы";
	
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "Взносы";
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(Форма)
	
	МассивОписанийТаблицФормы = Новый Структура;
	
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма)); 
	МассивОписанийТаблицФормы.Вставить("Взносы", ОписаниеТаблицыНачислений(Форма)); 
			
Конецфункции

&НаКлиенте
Процедура ЗаполнениеПослеВыполненияДлительнойОперацииНаКлиенте()
	
	СодержимоеДокумента = СодержимоеДокументаПослеРасчета(
		АдресХранилища,
		МассивОписанийТаблицФормы(ЭтаФорма));
		
	ФизическиеЛица = СодержимоеДокумента.ФизическиеЛица;
	СтрокиТаблицРасчетаПоФизическимЛицам = СодержимоеДокумента.СтрокиТаблицРасчетаПоФизическимЛицам;
	Если СодержимоеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьСтрокиТаблицДокумента(Объект, ФизическиеЛица, СтрокиТаблицДокументаПоФизическимЛицам, СтрокиТаблицРасчетаПоФизическимЛицам);
	
	ЗаполнениеВыполнено = Истина;
	ПересчетФизическогоЛицаВДлительнойОперации = Ложь;
	
КонецПроцедуры


#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов();
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.Взносы");
	Массив.Добавить("Объект.ФизическиеЛица");
	Массив.Добавить("Объект.ФизическиеЛицаПерерасчет");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов() 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					НСтр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение",					НСтр("ru = 'подразделения'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МестоВозникновенияЗатрат",		НСтр("ru = 'место возникновения затрат'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцНачисленияСтрокой", 		НСтр("ru = 'месяца начисления'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти


&НаСервереБезКонтекста
Процедура ДанныеДляЗаполненияВДанныеФормы(ДанныеЗаполнения, Объект, ПозицииВставки = Неопределено, ФизическиеЛица = Неопределено)
	
	//Начисления
	ТаблицыНачислений = РасчетБюджетированиеРасширенныйФормы.ТаблицыНачисленийФормы();
	ТаблицыНачислений.Начисления = Объект.Начисления;
	
	Если ФизическиеЛица <> Неопределено 
		И ФизическиеЛица.Количество() = 1 Тогда
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Ложь);
	Иначе          
		СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Объект.Организация, Объект.МесяцНачисления, Истина);
	КонецЕсли; 
	
	//Начисления
	РасчетБюджетированиеРасширенныйФормы.РасчетНачисленияВДанныеФормы(ТаблицыНачислений, ДанныеЗаполнения.Начисления, Объект.Организация, Объект.МесяцНачисления, ПозицииВставки);
	
	//Взносы
	РасчетБюджетированиеРасширенныйФормы.РасчетВзносыВДанныеФормы(Объект.Взносы, ДанныеЗаполнения.Взносы, ПозицииВставки);
	
КонецПроцедуры  

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнениеВыполнено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()  
	
	БюджетированиеРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	БюджетированиеКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);   // ВводМесяцаПриИзменении
	ПриИзмененииМесяцаНачисления();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	БюджетированиеКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка) 
	
	БюджетированиеКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БюджетированиеКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	БюджетированиеКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДатыПериодаРасчетаДокумента()

	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда

		Если Не Объект.ДатаНачала = Объект.Сценарий.НачалоДействия Тогда
			ДатаНачала = Объект.Сценарий.НачалоДействия;
			Модифицированность = Истина;
		Иначе
			ДатаНачала = Объект.ДатаНачала;
		КонецЕсли;	
		Если Не Объект.ДатаОкончания = Объект.Сценарий.ОкончаниеДействия Тогда
			ДатаОкончания = Объект.Сценарий.ОкончаниеДействия;
			Модифицированность = Истина;
		Иначе
			ДатаОкончания = Объект.ДатаОкончания;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьВидимостьПодразделенияМестаВозникновенияЗатрат()

	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ЭтотОбъект.Элементы.НачисленияПодразделение.Видимость = Ложь;
		ЭтотОбъект.Элементы.ВзносыПодразделение.Видимость = Ложь;
	Иначе
		ЭтотОбъект.Элементы.НачисленияПодразделение.Видимость = Истина;
		ЭтотОбъект.Элементы.ВзносыПодразделение.Видимость = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.МестоВозникновенияЗатрат) Тогда
		ЭтотОбъект.Элементы.НачисленияМестоВозникновенияЗатрат.Видимость = Ложь;
		ЭтотОбъект.Элементы.ВзносыМестоВозникновенияЗатрат.Видимость = Ложь;
	Иначе
		ЭтотОбъект.Элементы.НачисленияМестоВозникновенияЗатрат.Видимость = Истина;
		ЭтотОбъект.Элементы.ВзносыМестоВозникновенияЗатрат.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры	
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустая() Тогда

	    КлючиИдентификаторовЗаполнения = "Организация, Ответственный, МесяцРасчета";
		ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный", "Объект.МесяцНачисления");
		Бюджетирование.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
	КонецЕсли; 
	
	Элементы.МесяцНачисленияСтрокой.Видимость = Ложь;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.Свойства
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	//УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ОбновитьДатыПериодаРасчетаДокумента();
	
	ОбновитьВидимостьПодразделенияМестаВозникновенияЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом 
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	//КонтрольВеденияУчетаБЗК.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	// ПроцессыОбработкиДокументов
	//Если ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.ПроцессыОбработкиДокументовБюджетирования") Тогда
	//	МодульПроцессыОбработкиДокументовБюджетирования = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовБюджетирования");
	//	МодульПроцессыОбработкиДокументовБюджетирования.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;	
	// Конец ПроцессыОбработкиДокументов

КонецПроцедуры


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры   

&НаСервере
Процедура СценарийОбработкаВыбораНаСервере(ВыбранныйСценарий)
	
	Если Не ДатаНачала = ВыбранныйСценарий.НачалоДействия
			ИЛИ Не ДатаОкончания = ВыбранныйСценарий.ОкончаниеДействия Тогда
			
		ДатаНачала 		= ВыбранныйСценарий.НачалоДействия;
		ДатаОкончания 	= ВыбранныйСценарий.ОкончаниеДействия;	 
		
		ЭтотОбъект.Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сценарии") Тогда 
		
			СценарийОбработкаВыбораНаСервере(ВыбранноеЗначение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика. 
КонецПроцедуры

&НаКлиенте
Процедура МестоВозникновенияЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбновитьВидимостьПодразделенияМестаВозникновенияЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура МестоВозникновенияЗатратПриИзменении(Элемент)
	ОбновитьВидимостьПодразделенияМестаВозникновенияЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура МестоВозникновенияЗатратОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ОбновитьДатыПериодаРасчетаДокумента(); 
	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаНачала", "ДатаНачала", Модифицированность);   // ВводМесяцаПриИзменении
	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "ДатаНачала", Модифицированность);
	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаОкончания", "ДатаОкончания", Модифицированность);   // ВводМесяцаПриИзменении
	БюджетированиеКлиент.ВводМесяцаПриИзмененииДатыСценария(ЭтаФорма, "ДатаНачала", "МесяцНачисленияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыНачала()

	БюджетированиеРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
    ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатаОкончания()

	БюджетированиеРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
    ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)

	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаНачала", "ДатаНачала", Модифицированность);   // ВводМесяцаПриИзменении
	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "ДатаНачала", Модифицированность);
	БюджетированиеКлиент.ВводМесяцаПриИзмененииДатыСценария(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииДатыНачала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаОкончания", "ДатаОкончания", Модифицированность);   // ВводМесяцаПриИзменении
    ПриИзмененииДатаОкончания();
	
КонецПроцедуры


#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Модифицированность Тогда
		Если Не Объект.ДатаНачала = ДатаНачала Тогда
			БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаНачала", "ДатаНачала", Модифицированность);   // ВводМесяцаПриИзменении
			БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "ДатаНачала", Модифицированность);
			БюджетированиеКлиент.ВводМесяцаПриИзмененииДатыСценария(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
			
			ПриИзмененииДатыНачала();
		КонецЕсли;
		Если Не Объект.ДатаОкончания = ДатаОкончания Тогда
			БюджетированиеКлиент.ВводЗначенияПриИзменении(ЭтаФорма, "Объект.ДатаОкончания", "ДатаОкончания", Модифицированность);   // ВводМесяцаПриИзменении
		    ПриИзмененииДатаОкончания();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#Область Инициализация

ФизическиеЛицаКРасчету = Новый Соответствие;

#КонецОбласти  


