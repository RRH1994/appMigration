#Область ПроцедурыОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьКроссТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Адрес_ДобавленныеРеквизитыКроссТаблицы 	= ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	Адрес_ОписаниеКолонок 					= ПоместитьВоВременноеХранилище(Новый Структура, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиТабличногоПоляКроссТаблица

&НаКлиенте
Процедура КроссТаблицаПриАктивизацииСтроки(Элемент)
	
	ОбновитьКонтекстноеМеню(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПриАктивизацииПоля(Элемент)
	
	ОбновитьКонтекстноеМеню(Элементы.КроссТаблица);
	
КонецПроцедуры
 	   
&НаКлиенте
Процедура КроссТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КроссТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура Подключаемый_ПриИзмененииЗначенияКолонки(Элемент)
	
	ОписаниеЯчейки = СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(Элементы.КроссТаблица.ТекущаяСтрока, Элемент.Имя);
	
	Если Не ОписаниеЯчейки.ЭтоГруппаСтрок
	   И ЗначениеЗаполнено(ОписаниеЯчейки.ВидНачисления)
	Тогда
	
		
		ИзменитьЗначенияКолонокНаСервере(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЯчейки),
			ОписаниеЯчейки.Ставка,
			СтароеЗначениеЯчейки);
		
	КонецЕсли;	
	
	ОбновитьКонтекстноеМеню(Элементы.КроссТаблица);

КонецПроцедуры // Подключаемый_ПриИзмененииЗначенияКолонки()

#КонецОбласти                                          

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСценарийПриИзменении(Элемент)
	
	ОтборСценарийПриИзмененииНаСервере();
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОтборСценарийПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(ОтборСценарий) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСценария 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтборСценарий, "НачалоДействия, ОкончаниеДействия");
	ОтборПериод			= Новый СтандартныйПериод(РеквизитыСценария.НачалоДействия, РеквизитыСценария.ОкончаниеДействия); 	

КонецПроцедуры // Отбор()


&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОтборПериод.ДатаНачала)
	 Или Не ЗначениеЗаполнено(ОтборПериод.ДатаОкончания)
	Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Выберите дату начала, окончания!", , "ОтборПериод", "");
		Возврат;
		
	Иначе
		НоваяДатаНачала 	= НачалоГода(ОтборПериод.ДатаНачала);
		НоваяДатаОкончания 	= КонецГода(ОтборПериод.ДатаОкончания);
		Если ОтборПериод.ДатаНачала <> НоваяДатаНачала
		 Или ОтборПериод.ДатаОкончания <> НоваяДатаОкончания
		Тогда
			ОтборПериод = Новый СтандартныйПериод(НоваяДатаНачала, НоваяДатаОкончания);
		КонецЕсли;	
	КонецЕсли;
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры
      
&НаКлиенте
Процедура ОтборВидНачисленияПриИзменении(Элемент)
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры
    
&НаКлиенте
Процедура ОтборВидНачисленияОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрейдПриИзменении(Элемент)
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры
          
&НаКлиенте
Процедура ОтборГрейдОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры
	
#КонецОбласти

#Область ПроцедурыОбработчикиКоманд

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКроссТаблицуНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаСкопироватьДоКонцаПериода(Команда)
	
	СкопироватьДоНачалоКонцаПериода(1);
	
КонецПроцедуры
 
&НаКлиенте
Процедура КомандаСкопироватьДоНачалоПериода(Команда)
	
	СкопироватьДоНачалоКонцаПериода(-1);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура СкопироватьДоНачалоКонцаПериода(Направление)
	
	ЭлементКолонка	= Элементы.КроссТаблица.ТекущийЭлемент;
	Если ЭлементКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЯчейки	= СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(Элементы.КроссТаблица.ТекущаяСтрока, ЭлементКолонка.Имя);
	
	Если ОписаниеЯчейки = Неопределено Или ОписаниеЯчейки.ЭтоГруппаСтрок Тогда
		Возврат;
	КонецЕсли;
	
	мЯчейки = Новый Массив;
	
	Если Направление = 1 Тогда
		
		Для Инд = ОписаниеЯчейки.ИндексСтроки По КроссТаблица.Количество() - 1 Цикл
			
			мЯчейки.Добавить(
				СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(
					КроссТаблица.Получить(Инд).ПолучитьИдентификатор(), ЭлементКолонка.Имя));
					
		КонецЦикла;	

	Иначе
		
		Для Инд = 0 По ОписаниеЯчейки.ИндексСтроки Цикл
			
			мЯчейки.Добавить(
				СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(
					КроссТаблица.Получить(Инд).ПолучитьИдентификатор(), ЭлементКолонка.Имя));
					
		КонецЦикла;	

	КонецЕсли;
	
	ИзменитьЗначенияКолонокНаСервере(
		мЯчейки,
		ОписаниеЯчейки.Ставка);
	
КонецПроцедуры // ¶КонецПроцедуры()



&НаКлиенте
Процедура КомандаСкопироватьНаГодВверх(Команда)
	
	КомандаСкопироватьНаГод(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьНаГодВниз(Команда)
	
	КомандаСкопироватьНаГод(1);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаСкопироватьНаГод(Направление)
	
	ТекущиеДанные = Элементы.КроссТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Отказ = Ложь;
	
	СкопироватьНаДругойГодНаСервере(ТекущиеДанные.Период, ДобавитьМесяц(ТекущиеДанные.Период, Направление * 12), Отказ);
	
	Если Не Отказ Тогда
		
		ОбновитьКроссТаблицуНаКлиенте();
		
		ПоказатьОповещениеПользователя("Данные обновлены.");
		
	КонецЕсли;	

КонецПроцедуры // КомандаСкопироватьНаГод()


&НаКлиенте
Процедура КомандаРедактироватьВыбранные(Команда)
	
	ЭлементКолонка	= Элементы.КроссТаблица.ТекущийЭлемент;
	Если ЭлементКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мЯчейки = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.КроссТаблица.ВыделенныеСтроки Цикл
		
		мЯчейки.Добавить(
			СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(ВыделеннаяСтрока, ЭлементКолонка.Имя));
			
	КонецЦикла;
		
	ПоказатьВводЧисла(
		Новый ОписаниеОповещения("КомандаРедактироватьВыбранныеВводЗначенияЗавершение",
			ЭтаФорма,
			Новый Структура("мЯчейки", мЯчейки)),
		0,
		"Ставка:",
		5,
		2);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаРедактироватьВыбранныеВводЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		// пользователь отказался от ввода
		Возврат;
	КонецЕсли;
	
	ИзменитьЗначенияКолонокНаСервере(
		ДополнительныеПараметры.мЯчейки,
		Результат);

КонецПроцедуры // КомандаРедактироватьВыбранныеВводЗначенияЗавершение()


&НаКлиенте
Процедура КомандаСкопироватьИзДругогоСценария(Команда)
	
	ОткрытьФорму(
		"Справочник.Сценарии.ФормаВыбора",
		Новый Структура("Заголовок", "Выберите сценарий-источник"),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("КомандаСкопироватьИзДругогоСценарияВыборСценарияЗавершение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаСкопироватьИзДругогоСценарияВыборСценарияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		ПоказатьПредупреждение(, "Не выбран сценарий для копирования!");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон("Данные по сценарию <%1>, за период <%2>, %3, %4 будут замещены данными сценария <%5>, продолжить?",
					ОтборСценарий,
					ОтборПериод,
					?(Не ЗначениеЗаполнено(ОтборВидНачисления), "по всем видам начислений", СтрШаблон("по виду начисления <%1>", ОтборВидНачисления)),
					?(Не ЗначениеЗаполнено(ОтборГрейд), "по всем грейдам", СтрШаблон("по грейду <%1>", ОтборГрейд)),
					Результат);
					
	ПоказатьВопрос(
		Новый ОписаниеОповещения("КомандаСкопироватьИзДругогоСценарияПодтвереждениеОперацииЗавершение", ЭтаФорма, Новый Структура("СценарийИсточник", Результат)),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры // КомандаСкопироватьИзДругогоСценария()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаСкопироватьИзДругогоСценарияПодтвереждениеОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	СкопироватьИзДругогоСценарияНаСервере(ДополнительныеПараметры.СценарийИсточник, Отказ);
	
	Если Не Отказ Тогда
		
		ОбновитьКроссТаблицуНаКлиенте();
		
		ПоказатьОповещениеПользователя("Данные обновлены.");
		
	КонецЕсли;	

КонецПроцедуры // ()


&НаКлиенте
Процедура КомандаУдалитьВыбранное(Команда)

	ТекстВопроса = СтрШаблон("Данные по сценарию <%1>, за период <%2>, %3, %4 будут удалены, продолжить?",
					ОтборСценарий,
					ОтборПериод,
					?(Не ЗначениеЗаполнено(ОтборВидНачисления), "по всем видам начислений", СтрШаблон("по виду начисления <%1>", ОтборВидНачисления)),
					?(Не ЗначениеЗаполнено(ОтборГрейд), "по всем грейдам", СтрШаблон("по грейду <%1>", ОтборГрейд)));
					
	ПоказатьВопрос(
		Новый ОписаниеОповещения("КомандаУдалитьВыбранноеПодтвереждениеОперацииЗавершение", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	// Вставить содержимое обработчика.
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаУдалитьВыбранноеПодтвереждениеОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	УдалитьВыбранныеДанныеНаСервере(Отказ, Истина, ОтборСценарий, ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания, ОтборВидНачисления, ОтборГрейд);
	
	Если Не Отказ Тогда
		
		ОбновитьКроссТаблицуНаКлиенте();
		
		ПоказатьОповещениеПользователя("Данные обновлены.");
		
	КонецЕсли;	

КонецПроцедуры // КомандаУдалитьВыбранноеПодтвереждениеОперацииЗавершение()


&НаКлиенте
Процедура КомандаВыгрузитьВExcel(Команда)
	
	РаботаСФайламиКлиент.СохранитьФайлКак(КроссТаблицуВТабличныйДокументДляВыгрузкиВExcel());
	
КонецПроцедуры
   
&НаКлиенте
Процедура КомандаЗагрузитьИзExcel(Команда)
	
	Если Не ЗначениеЗаполнено(ОтборСценарий) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Укажите сценарий, для которого необходимо загрузить данные!",, "ОтборСценарий",,);
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("КомандаЗагрузитьИзExcelПодтверждениеЗагрузки", ЭтаФорма),
		СтрШаблон("Данные по сценарию <<%1>> будут обновлены данными файла, продолжить?", ОтборСценарий),
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзExcelПодтверждениеЗагрузки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Диалог 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок 			= "Выберите файл для загрузки...";
	Диалог.МножественныйВыбор 	= Ложь;
	Диалог.Фильтр 				= "XLS (*.xls;*.xlsx)|*.xls;*.xlsx";
	
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьИзExcelПодтверждениеЗагрузкиВыборФайла", ЭтаФорма));

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЗагрузитьИзExcelПодтверждениеЗагрузкиВыборФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		ПутьКФайлу = Результат[0];
	КонецЕсли;

	Попытка
			
		ExcelОбъект = ПолучитьCOMОбъект(ПутьКФайлу); 
		Страница 	= ExcelОбъект.Sheets(1);
		Диапазон	= Страница.Cells(1,1).SpecialCells(11);
		Данные 		= Страница.Range(Страница.Cells(1,1), Страница.Cells(Диапазон.Row, Диапазон.Column)).Value.Выгрузить();

	Исключение
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось прочитать файл: %1", ОписаниеОшибки()));
		Возврат;
		
	КонецПопытки;
	
	ExcelОбъект = Неопределено;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	ЗагрузитьИзExcelНаСервере(Данные, Отказ);
	
	Если Не Отказ Тогда
		ОбновитьКроссТаблицу();
		ПоказатьОповещениеПользователя("Данные загружены.");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзExcelПодтверждениеЗагрузкиВыборФайла()


&НаКлиенте
Процедура КомандаДобавитьКодГрейда(Команда)
	
	ОткрытьФорму("Справочник.КодыГрейдов.ФормаОбъекта",,,,,,
		Новый ОписаниеОповещения("ДобавитьКодГрейдаЗавершение", ЭтаФорма));
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДобавитьКодГрейдаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКроссТаблицу();

КонецПроцедуры // ДобавитьКодГрейдаЗавершение()


#КонецОбласти

#Область ЗаполнениеДанных

Функция СформироватьОписаниеКолонок()
	
	мОписаниеКолонок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыНачислений.Ссылка КАК Ссылка,
	|	ВидыНачислений.Наименование КАК Наименование,
	|	ВидыНачислений.Код КАК Код
	|ИЗ
	|	Справочник.ВидыНачислений КАК ВидыНачислений
	|ГДЕ
	|	НЕ ВидыНачислений.ПометкаУдаления
	|	И ВидыНачислений.ЯвляетсяПремией
	|	И (&ПоВсемВидамНачислений
	|			ИЛИ ВидыНачислений.Ссылка = &ВидНачисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("ПоВсемВидамНачислений", 	Не ЗначениеЗаполнено(ОтборВидНачисления));
	Запрос.УстановитьПараметр("ВидНачисления", 			ОтборВидНачисления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ОписаниеКолонки = Новый Структура("Ключ, Представление, Ссылка",
										СтрШаблон("Колонка_%1",Выборка.Код),
										СтрШаблон("%1", Выборка.Наименование) + ", %",
										Выборка.Ссылка);
		мОписаниеКолонок.Добавить(ОписаниеКолонки);

	КонецЦикла;

	ПоместитьВоВременноеХранилище(мОписаниеКолонок, 		Адрес_ОписаниеКолонок);
	
	Возврат мОписаниеКолонок;
	
КонецФункции	
    // <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПодготовитьЗапросДляКроссТаблицы()
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	0 КАК Число
	|ПОМЕСТИТЬ ВТ_Числа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ГОД, ВТ_Числа.Число + ВТ_Числа1.Число * 10) КАК Год
	|ПОМЕСТИТЬ ВТ_Годы
	|ИЗ
	|	ВТ_Числа КАК ВТ_Числа
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Числа КАК ВТ_Числа1
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ГОД, ВТ_Числа.Число + ВТ_Числа1.Число * 10) <= &КонецПериода
	|	И ВЫБОР
	|			КОГДА &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыНачислений.Ссылка КАК ВидНачисления,
	|	КодыГрейдов.Ссылка КАК КодГрейда,
	|	&Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ВТ_ПустыеСтавки
	|ИЗ
	|	Справочник.КодыГрейдов КАК КодыГрейдов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНачислений КАК ВидыНачислений
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ КодыГрейдов.ПометкаУдаления
	|	И НЕ ВидыНачислений.ПометкаУдаления
	|	И ВидыНачислений.ЯвляетсяПремией
	|	И (&ПоВсемВидамНачислений
	|			ИЛИ ВидыНачислений.Ссылка = &ВидНачисления)
	|	И (&ПоВсемГрейдам
	|			ИЛИ КодыГрейдов.Владелец = &Грейд)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Годы.Год КАК Год,
	|	ВТ_ПустыеСтавки.ВидНачисления КАК ВидНачисления,
	|	ВТ_ПустыеСтавки.КодГрейда КАК КодГрейда,
	|	ВТ_ПустыеСтавки.Сценарий КАК Сценарий,
	|	0 КАК Ставка
	|ПОМЕСТИТЬ ВТ_ПустыеСтавкиПоГодам
	|ИЗ
	|	ВТ_ПустыеСтавки КАК ВТ_ПустыеСтавки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Годы КАК ВТ_Годы
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(УстановкаСтавокПремий.Дата, ГОД) КАК Год,
	|	УстановкаСтавокПремий.Сценарий КАК Сценарий,
	|	УстановкаСтавокПремий.ВидНачисления КАК Колонка,
	|	УстановкаСтавокПремий.КодГрейда КАК КодГрейда,
	|	УстановкаСтавокПремий.Ставка КАК ЗначениеКолонки,
	|	УстановкаСтавокПремий.Грейд КАК Грейд,
	|	УстановкаСтавокПремий.ВидНачисления.Код КАК КолонкаПорядок
	|ИЗ
	|	Документ.УстановкаСтавокПремий КАК УстановкаСтавокПремий
	|ГДЕ
	|	УстановкаСтавокПремий.ВидНачисления.ЯвляетсяПремией
	|	И УстановкаСтавокПремий.Сценарий = &Сценарий
	|	И (&ПоВсемВидамНачислений
	|			ИЛИ УстановкаСтавокПремий.ВидНачисления = &ВидНачисления)
	|	И (&ПоВсемГрейдам
	|			ИЛИ УстановкаСтавокПремий.КодГрейда.Владелец = &Грейд)
	|	И УстановкаСтавокПремий.Проведен
	|	И УстановкаСтавокПремий.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПустыеСтавкиПоГодам.Год,
	|	ВТ_ПустыеСтавкиПоГодам.Сценарий,
	|	ВТ_ПустыеСтавкиПоГодам.ВидНачисления,
	|	ВТ_ПустыеСтавкиПоГодам.КодГрейда,
	|	ВТ_ПустыеСтавкиПоГодам.Ставка,
	|	ВТ_ПустыеСтавкиПоГодам.КодГрейда.Владелец,
	|	ВТ_ПустыеСтавкиПоГодам.ВидНачисления.Код
	|ИЗ
	|	ВТ_ПустыеСтавкиПоГодам КАК ВТ_ПустыеСтавкиПоГодам
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	Грейд,
	|	КодГрейда,
	|	КолонкаПорядок
	|ИТОГИ
	|	МАКСИМУМ(Сценарий),
	|	СУММА(ЗначениеКолонки),
	|	МАКСИМУМ(Грейд)
	|ПО
	|	Год,
	|	КодГрейда,
	|	Колонка";

	Запрос.УстановитьПараметр("НачалоПериода", 			ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 			ОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("Сценарий", 				ОтборСценарий);
	Запрос.УстановитьПараметр("ПоВсемВидамНачислений", 	Не ЗначениеЗаполнено(ОтборВидНачисления));
	Запрос.УстановитьПараметр("ВидНачисления", 			ОтборВидНачисления);
	Запрос.УстановитьПараметр("ПоВсемГрейдам", 			НЕ ЗначениеЗаполнено(ОтборГрейд));
	Запрос.УстановитьПараметр("Грейд", 					ОтборГрейд);
	
	Возврат Запрос.Выполнить();
	

КонецФункции // ПодготовитьЗапросДляКроссТаблицы()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьКроссТаблицуНаКлиенте()

	ОбновитьКроссТаблицу();
	
КонецПроцедуры // ОбновитьКроссТаблицуНаКлиенте()
  
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбновитьКроссТаблицу()

	#Область РеквизитыФормы
		
	мДобавляемыеРеквизитыИмя 	= ПолучитьИзВременногоХранилища(Адрес_ДобавленныеРеквизитыКроссТаблицы);
	мПутиУдаляемыхРеквизитов 	= Новый Массив;
	Для Каждого РеквизитУдалить Из мДобавляемыеРеквизитыИмя Цикл
		
		Если Найти(РеквизитУдалить, "КроссТаблицаГруппа") = 0 Тогда
			мПутиУдаляемыхРеквизитов.Добавить("КроссТаблица." + РеквизитУдалить); 
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти(РеквизитУдалить);
		Если Не НайденныйЭлемент = Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;	
	
	ЭтаФорма.ИзменитьРеквизиты(, мПутиУдаляемыхРеквизитов);
	
	мОписанияКолонок	= СформироватьОписаниеКолонок();

	ОписаниеТипаСтрока150			= ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ОписаниеТипаЧисло3_2			= ОбщегоНазначения.ОписаниеТипаЧисло(5, 2);
	
	мДобавляемыеРеквизиты 			= Новый Массив;
	мДобавляемыеРеквизитыИмя 		= Новый Массив;
	мДобавляемыеЭлементыФормы 		= Новый Массив;
	
	сОписаниеКолонок				= Новый Соответствие;
	
	Для Каждого ОписаниеКолонки Из мОписанияКолонок Цикл
		
		сОписаниеКолонок.Вставить(ОписаниеКолонки.Ссылка, ОписаниеКолонки);
		
		мКолонкиНаФорму = Новый Массив;
		
		ИмяГруппыКолонок = СтрШаблон("КроссТаблицаГруппаКолонокПредставление%1", ОписаниеКолонки.Ключ);
		мДобавляемыеРеквизитыИмя.Добавить(ИмяГруппыКолонок);
		
		// колонка, содержащая ключ представление значения
		ИмяРеквизита = СтрШаблон("КроссТаблица%1_Представление", ОписаниеКолонки.Ключ);
		мДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаСтрока150, "КроссТаблица",  ОписаниеКолонки.Представление));	
		мДобавляемыеРеквизитыИмя.Добавить(ИмяРеквизита);                           
		
		// колонка, содержащая ключ
		ИмяРеквизита = СтрШаблон("КроссТаблица%1_Ключ", ОписаниеКолонки.Ключ);
		мДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаСтрока150, "КроссТаблица",  "Ключ"));	
		мДобавляемыеРеквизитыИмя.Добавить(ИмяРеквизита);

		// колонка, содержащая ссылку на значение колонки (вид начисления)
		ИмяРеквизита = СтрШаблон("КроссТаблица%1_Ссылка", ОписаниеКолонки.Ключ);
		мДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СправочникСсылка.ВидыНачислений"), "КроссТаблица",  "Колонка ссылка"));	
		мДобавляемыеРеквизитыИмя.Добавить(ИмяРеквизита);
		
		// колонка, содержащая значение
		ИмяРеквизита = СтрШаблон("КроссТаблица%1_Значение", ОписаниеКолонки.Ключ);
		мДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаЧисло3_2, "КроссТаблица", "Колонка значение"));	
		мДобавляемыеРеквизитыИмя.Добавить(ИмяРеквизита);
		мКолонкиНаФорму.Добавить(Новый Структура("Имя, Заголовок, Ширина", ИмяРеквизита, ОписаниеКолонки.Представление, 10));
		
		мДобавляемыеЭлементыФормы.Добавить(Новый Структура("Имя, Заголовок, Колонки", 
			ИмяГруппыКолонок, ОписаниеКолонки.Представление, мКолонкиНаФорму));
			
		
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(мДобавляемыеРеквизиты);
	
	ПоместитьВоВременноеХранилище(мДобавляемыеРеквизитыИмя, Адрес_ДобавленныеРеквизитыКроссТаблицы);
	
	Для Каждого ГруппаРеквизитов Из мДобавляемыеЭлементыФормы Цикл
		
		НоваяГруппа									= Элементы.Вставить(ГруппаРеквизитов.Имя, Тип("ГруппаФормы"), Элементы.КроссТаблица, Элементы.КроссТаблицаОтступ);
		Новаягруппа.Заголовок						= ГруппаРеквизитов.Заголовок;
		Новаягруппа.Вид								= ВидГруппыФормы.ГруппаКолонок;
		НоваяГруппа.ОтображатьВШапке				= Ложь;
		Новаягруппа.Группировка						= ГруппировкаКолонок.Горизонтальная;
		Новаягруппа.ГоризонтальноеПоложениеВШапке 	= ГоризонтальноеПоложениеЭлемента.Центр;
		Новаягруппа.ШрифтЗаголовка 					= Новый Шрифт(Новаягруппа.ШрифтЗаголовка,,,Истина);
		//Новаягруппа.Высота							= 2;
		
		Для Каждого ОписаниеРеквизита Из ГруппаРеквизитов.Колонки Цикл

			НовыйЭлемент 								= Элементы.Добавить(ОписаниеРеквизита.Имя, Тип("ПолеФормы"), НоваяГруппа);
			НовыйЭлемент.Вид							= ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Заголовок 						= ОписаниеРеквизита.Заголовок;
			НовыйЭлемент.ПутьКДанным 					= "КроссТаблица." + ОписаниеРеквизита.Имя;
			НовыйЭлемент.ШрифтЗаголовка 				= Новый Шрифт(НовыйЭлемент.ШрифтЗаголовка,,,Истина);
			НовыйЭлемент.РедактированиеТекста			= Истина;
			НовыйЭлемент.АвтомаксимальнаяШирина			= Ложь;
			НовыйЭлемент.МаксимальнаяШирина				= ОписаниеРеквизита.Ширина;
			НовыйЭлемент.РастягиватьПоГоризонтали		= Ложь;
			НовыйЭлемент.ТолькоПросмотр					= Ложь;
			НовыйЭлемент.ОтображатьВШапке				= Истина;
			НовыйЭлемент.ВысотаЗаголовка				= 2;
			
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЗначенияКолонки");
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	КроссТаблица.Очистить();

	РезультатЗапросаДляКроссТаблицы	= ПодготовитьЗапросДляКроссТаблицы();
	ВыборкаГруппа 					= РезультатЗапросаДляКроссТаблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Год");
	ЕстьДобавляемыеКолонки			= (мОписанияКолонок.Количество() > 0);
	
	Пока ВыборкаГруппа.Следующий() Цикл
		
        СтрокаГруппа 				= КроссТаблица.Добавить();
		СтрокаГруппа.Представление 	= Строка(ВыборкаГруппа.Год);
		СтрокаГруппа.Сценарий		= ВыборкаГруппа.Сценарий;
		СтрокаГруппа.Период			= ВыборкаГруппа.Год;
		СтрокаГруппа.Грейд			= ВыборкаГруппа.Грейд;
		СтрокаГруппа.КодГрейда		= ВыборкаГруппа.КодГрейда;
		СтрокаГруппа.ЭтоГруппаСтрок	= Истина;
		
		ИндексСтрокиГруппыСтрок		= СтрокаГруппа.ПолучитьИдентификатор();
		
		ВыборкаДетали = ВыборкаГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КодГрейда");
		
		Пока ВыборкаДетали.Следующий() Цикл
			
	        СтрокаДетали 				= КроссТаблица.Добавить();
			СтрокаДетали.Представление 	= Строка(ВыборкаДетали.КодГрейда);
			СтрокаДетали.Сценарий		= ВыборкаДетали.Сценарий;
			СтрокаДетали.ЭтоГруппаСтрок	= Ложь;
			СтрокаДетали.Период			= ВыборкаГруппа.Год;
			СтрокаДетали.Грейд			= ВыборкаДетали.Грейд;
			СтрокаДетали.КодГрейда		= ВыборкаДетали.КодГрейда;
			
			ВыборкаКолонки = ВыборкаДетали.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Колонка");
			
			Пока ВыборкаКолонки.Следующий() Цикл
				
				ОписаниеКолонки = сОписаниеКолонок.Получить(ВыборкаКолонки.Колонка);
				
				СтрокаДетали[СтрШаблон("КроссТаблица%1_Представление", 	ОписаниеКолонки.Ключ)] = ОписаниеКолонки.Представление;
				СтрокаДетали[СтрШаблон("КроссТаблица%1_Ключ", 			ОписаниеКолонки.Ключ)] = ОписаниеКолонки.Ключ;
				СтрокаДетали[СтрШаблон("КроссТаблица%1_Ссылка", 		ОписаниеКолонки.Ключ)] = ОписаниеКолонки.Ссылка;
				СтрокаДетали[СтрШаблон("КроссТаблица%1_Значение", 		ОписаниеКолонки.Ключ)] = ВыборкаКолонки.ЗначениеКолонки;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КроссТаблица.Количество() > 1 Тогда
		КроссТаблица[1].ЭтоПерваяСтрока 								= Истина;
		КроссТаблица[КроссТаблица.Количество() - 1].ЭтоПоследняяСтрока 	= Истина;
	КонецЕсли;

КонецПроцедуры // ОбновитьКроссТаблицу()

#КонецОбласти

#Область ЗаписьДанных

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УдалитьВыбранныеДанныеНаСервере(Отказ, ВыполнятьВТранзакции = Ложь,
		ДопОтборСценарий = Неопределено, ДопОтборДатаНачала = Неопределено, ДопОтборДатаОкончания = Неопределено, ДопОтборВидНачисления = Неопределено, ДопОтборГрейд = Неопределено)
	
	Если ВыполнятьВТранзакции Тогда
		
		НачатьТранзакцию();
		
	КонецЕсли;
	
	Документы.УстановкаСтавокПремий.УдалитьСтавки(
		ДопОтборСценарий,
		ДопОтборДатаНачала,
		ДопОтборДатаОкончания,
		ДопОтборВидНачисления,
		ДопОтборГрейд);
	
	Если ВыполнятьВТранзакции Тогда
		
		Если Не Отказ Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УдалитьВыбранныеДанныеНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СкопироватьИзДругогоСценарияНаСервере(СценарийИсточник, Отказ)

	Отказ = Ложь;
	
	НачатьТранзакцию();

	#Область УдалениеДанныхПоТекущемуСценарию
	
	УдалитьВыбранныеДанныеНаСервере(Отказ, Ложь, ОтборСценарий, ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания);
		
	#КонецОбласти	
	
	#Область ДобавлениеПоНовомуСценарию
	
	Если Не Отказ Тогда
		
		Документы.УстановкаСтавокПремий.СкопироватьСтавкиПоСценарию(СценарийИсточник,
			ОтборСценарий, ОтборПериод.ДатаНачала, ОтборПериод.ДатаОкончания, ОтборВидНачисления, ОтборГрейд);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не Отказ Тогда
		
		ЗафиксироватьТранзакцию();

	Иначе
		
		ОтменитьТранзакцию();
		
	КонецЕсли;	

КонецПроцедуры // СкорпироватьИзДругогоСценарияНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СкопироватьНаДругойГодНаСервере(ГодИсточник, ГодПриемник, Отказ)

	Отказ = Ложь;
	
	НачатьТранзакцию();

	#Область УдалениеДанныхПоТекущемуСценарию
	
	// удаляем ставки по установленным отбором за год - приемник (который + 1 или - 1 от выбранного)
	УдалитьВыбранныеДанныеНаСервере(Отказ, Ложь, ОтборСценарий, НачалоГода(ГодПриемник), КонецГода(ГодПриемник), ОтборВидНачисления, ОтборГрейд);

	#КонецОбласти	
	
	#Область ДобавлениеПоНовомуСценарию
	
	Если Не Отказ Тогда
		
		Документы.УстановкаСтавокПремий.СкопироватьСтавкиПоГоду(ОтборСценарий, ГодИсточник, ГодПриемник, ОтборВидНачисления, ОтборГрейд);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не Отказ Тогда
		
		ЗафиксироватьТранзакцию();

	Иначе
		
		ОтменитьТранзакцию();
		
	КонецЕсли;	

КонецПроцедуры // СкорпироватьИзДругогоСценарияНаСервере()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ИзменитьЗначенияКолонокНаСервере(мОписанияЯчеек, НовоеЗначениеЯчейки, ОписаниеЯчейкиДоИзменения = Неопределено)
	
	Отказ = Ложь;
	
	НачатьТранзакцию();

	Для Каждого ОписаниеЯчейки Из мОписанияЯчеек Цикл
		
		Если ОписаниеЯчейки.ЭтоГруппаСтрок Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаписи = Документы.УстановкаСтавокПремий.ПолучитьСтруктуруУстановкиСтавки();
		
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ОписаниеЯчейки);
		
		СтруктураЗаписи.Вставить("Ставка", НовоеЗначениеЯчейки);
		
		Попытка
		
			Документы.УстановкаСтавокПремий.УстановитьСтавку(СтруктураЗаписи);
		
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Не удалось изменить значение: %1, попробуйте еще раз.", ОписаниеОшибки()), ,,, Отказ);
			
		КонецПопытки;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Не Отказ Тогда
		
		ЗафиксироватьТранзакцию();
		
		Если ОписаниеЯчейкиДоИзменения = Неопределено Тогда
			
			// это изменение не в режиме редактирования ячейки, а какие то массовые изменения
			// в таком случае значение в ячейку присвивать нужно тоже программно, после успешного изменения документов
			Для Каждого ОписаниеЯчейки Из мОписанияЯчеек Цикл
				Если ОписаниеЯчейки.ЭтоГруппаСтрок Тогда
					Продолжить;
				КонецЕсли;
				// устанавливаем новые значения
				СтрокаТаблицы 										= КроссТаблица.НайтиПоИдентификатору(ОписаниеЯчейки.ИдентификаторСтроки);
				СтрокаТаблицы[ОписаниеЯчейки.ИмяКолонкиЗначения] 	= НовоеЗначениеЯчейки;
			КонецЦикла;	
			
		КонецЕсли;	
	Иначе
		
		Если Не ОписаниеЯчейкиДоИзменения = Неопределено  Тогда
			// изменение непосредственно в ячейке кросс таблицы (при изменении)	
			Для Каждого ОписаниеЯчейки Из мОписанияЯчеек Цикл
				Если ОписаниеЯчейки.ЭтоГруппаСтрок Тогда
					Продолжить;
				КонецЕсли;
				// восстанавливаем значение до изменения
				СтрокаТаблицы = КроссТаблица.НайтиПоИдентификатору(ОписаниеЯчейки.ИдентификаторСтроки);
				Если Не СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы[ОписаниеЯчейки.ИмяКолонкиЗначения] = СтароеЗначениеЯчейки.Ставка;
				КонецЕсли;
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры //

	
#КонецОбласти

#Область Вспомогательные

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗагрузитьИзExcelНаСервере(Данные, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	#Область ЧтениеИПоискСсылок
		
	Если Данные[0].Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Нет данных для загрузки",,,, Отказ);
		Возврат;
	КонецЕсли;	
	
	Запрос 					= Новый Запрос("Выбрать Т.Ссылка, Т.Наименование Из Справочник.ВидыНачислений Как Т Где Не Т.ПометкаУдаления");
	ТЗ_ВидыНачислений 		= Запрос.Выполнить().Выгрузить();
	
	Запрос 					= Новый Запрос("Выбрать Т.Ссылка, Т.Владелец, Т.Код Из Справочник.КодыГрейдов Как Т Где Не Т.ПометкаУдаления");
	ТЗ_КодыГрейдов 			= Запрос.Выполнить().Выгрузить();
	
	сВидыНачислений 		= Новый Соответствие;
	сКодыГрейдов 			= Новый Соответствие;
	сГрейды 				= Новый Соответствие;
	
	мОшибкиВидовНачислений 	= Новый Массив;
	
	#Область ВидыНачислений
	Для ИндексКолонкиФайла = 2 По Данные.ВГраница() Цикл
		
		// в колонке должен быть вид начисления
		НаименованиеКолонки = Данные[ИндексКолонкиФайла][0];
		СтрокаВидНачисления	= ТЗ_ВидыНачислений.Найти(НаименованиеКолонки, "Наименование");
		Если СтрокаВидНачисления = Неопределено Тогда
			мОшибкиВидовНачислений.Добавить(
				СтрШаблон("Колонка файла %1, не найден вид начисления по наименованию: %2", (ИндексКолонкиФайла + 1), НаименованиеКолонки));
		Иначе
			сВидыНачислений.Вставить(ИндексКолонкиФайла, СтрокаВидНачисления.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если мОшибкиВидовНачислений.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон("Не удалось выполнить загрузку данных: %1", СтрСоединить(мОшибкиВидовНачислений)),,,, Отказ);
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ВидНачисления");
	ТЗ.Колонки.Добавить("Грейд");
	ТЗ.Колонки.Добавить("КодГрейда");
	ТЗ.Колонки.Добавить("Ставка");
	ТЗ.Колонки.Добавить("Дата");
	
	Для ИндексСтрокиФайла = 1 По Данные[0].ВГраница() Цикл
		
		мОшибкиПоСтроке = Новый Массив;
		
		#Область ПолучениеПериода
		СтрокаГод 	= СтрЗаменить(СтрЗаменить(Данные[0][ИндексСтрокиФайла], Символы.НПП, ""), " ", "");
		ДатаГод		= '00010101';
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаГод) Тогда
			мОшибкиПоСтроке.Добавить(СтрШаблон("неправильный формат года: %1", СтрокаГод));
		Иначе
			Попытка
				Год 	= Число(СтрокаГод);
				ДатаГод = Дата(Год, 1, 1);
			Исключение
				мОшибкиПоСтроке.Добавить(СтрШаблон("не удалось определить год: %1", СтрокаГод));
			КонецПопытки;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область ПолучениеКодаГрейда
		СсылкаКодГрейда = Неопределено;
		СтрокаКодГрейда = Данные[1][ИндексСтрокиФайла];
		Если Не ЗначениеЗаполнено(СтрокаКодГрейда) Тогда
			мОшибкиПоСтроке.Добавить("не заполнен код грейда");
		Иначе
			СсылкаКодГрейда	= сКодыГрейдов.Получить(СтрокаКодГрейда);
			Если Не ЗначениеЗаполнено(СсылкаКодГрейда) Тогда
				НайденнаяСтрокаКодГрейда	= ТЗ_КодыГрейдов.Найти(СтрокаКодГрейда, "Код");
				Если НайденнаяСтрокаКодГрейда = Неопределено Тогда
					мОшибкиПоСтроке.Добавить(СтрШаблон("не найден код грейда: %1", СтрокаКодГрейда));
				Иначе                                                                               
					СсылкаКодГрейда = НайденнаяСтрокаКодГрейда.Ссылка;
					СсылкаГрейд		= НайденнаяСтрокаКодГрейда.Владелец;
					сКодыГрейдов.Вставить(	СтрокаКодГрейда, НайденнаяСтрокаКодГрейда.Ссылка);
					сГрейды.Вставить(		СсылкаКодГрейда, СсылкаГрейд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
		#Область ЧтениеЧисловыхЗначений
		Если мОшибкиПоСтроке.Количество() = 0 Тогда
			
			Для ИндексКолонкиФайла = 2 По Данные.ВГраница() Цикл
				
				ЗначениеЯчейки 		= Данные[ИндексКолонкиФайла][ИндексСтрокиФайла];
				ЗначениеЯчейкиЧисло = 0;
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					Попытка
						ЗначениеЯчейкиЧисло = Число(ЗначениеЯчейки);
					Исключение
						ЗначениеЯчейкиЧисло = Неопределено;
						мОшибкиПоСтроке.Добавить(
							СтрШаблон("Не удалось преобразовать к числу значение ячейки в колонке № %1: %2", (ИндексКолонкиФайла + 1), ЗначениеЯчейки));
					КонецПопытки;
				КонецЕсли;
				
				Если Не ЗначениеЯчейкиЧисло = Неопределено Тогда
					НовСтр 					= ТЗ.Добавить();
	             	НовСтр.ВидНачисления 	= сВидыНачислений.Получить(ИндексКолонкиФайла);
					НовСтр.Грейд 			= сГрейды.Получить(СсылкаКодГрейда);
					НовСтр.КодГрейда 		= СсылкаКодГрейда;
					НовСтр.Дата				= ДатаГод;
					НовСтр.Ставка			= ЗначениеЯчейкиЧисло;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		#КонецОбласти
		
		Если Не мОшибкиПоСтроке.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Не удалось прочитать данные в строке файла №%1:%2%3", (ИндексСтрокиФайла + 1), Символы.ПС + СтрСоединить(мОшибкиПоСтроке, Символы.ПС)),,,, Отказ);
				
		КонецЕсли;
			
	КонецЦикла;
	
	#Область ПроверкаПериодов
	ТЗ_Периоды = ТЗ.Скопировать();
	ТЗ_Периоды.Сортировать("Дата");
	Если ТЗ_Периоды.Количество() > 0 Тогда
		НачалоПериодаФайла = ТЗ_Периоды[0].Дата;
		Если НачалоПериодаФайла <> ОтборПериод.ДатаНачала Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Начало периода в файле <<%1>> не соответствует началу периода выбранного сценария <%2>", НачалоПериодаФайла, ОтборПериод.ДатаНачала),,"ОтборПериод",, Отказ);
		КонецЕсли;
		ОкончаниеПериодаФайла = КонецГода(ТЗ_Периоды[ТЗ_Периоды.Количество() - 1].Дата);
		Если ОкончаниеПериодаФайла <> КонецГода(ОтборПериод.ДатаОкончания) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон("Конец периода в файле <<%1>> не соответствует концу периода выбранного сценария <%2>", ОкончаниеПериодаФайла, КонецГода(ОтборПериод.ДатаОкончания)),,"ОтборПериод",, Отказ);
		КонецЕсли;		
	КонецЕсли;
	#КонецОбласти            
	
	#КонецОбласти
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для Каждого Стр Из ТЗ Цикл
		
		СтруктураЗаписи = Документы.УстановкаСтавокПремий.ПолучитьСтруктуруУстановкиСтавки();
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Стр);
		СтруктураЗаписи.Вставить("Сценарий", ОтборСценарий);
		Документы.УстановкаСтавокПремий.УстановитьСтавку(СтруктураЗаписи);
		
	КонецЦикла;	
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();               
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ЗагрузитьИзExcelНаСервере()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция КроссТаблицуВТабличныйДокументДляВыгрузкиВExcel()
	
	#Область ПодготовкаТаблицыЗначенийДляВывода
		
	ТЗ			= Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Год");
	ТЗ.Колонки.Добавить("КодГрейда",, "Код грейда");

	мКолонки 				= СформироватьОписаниеКолонок();
	сПредставленияКолонок 	= Новый Соответствие;
	
	Для Каждого ОписаниеКолонки Из мКолонки Цикл
		ТЗ.Колонки.Добавить(ОписаниеКолонки.Ключ, ОбщегоНазначения.ОписаниеТипаЧисло(5,2), Строка(ОписаниеКолонки.Ссылка), 10);
		сПредставленияКолонок.Вставить(ОписаниеКолонки.Ключ, Строка(ОписаниеКолонки.Ссылка));
	КонецЦикла;
	
	ТЗ_Источник = РеквизитФормыВЗначение("КроссТаблица");
	
	Для Каждого Стр Из ТЗ_Источник Цикл
		
		Если Не ЗначениеЗаполнено(Стр.КодГрейда) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр 				= ТЗ.Добавить();
		НовСтр.Год 			= Формат(Стр.Период, "ДФ=yyyy");
		НовСтр.КодГрейда 	= Строка(Стр.КодГрейда);
		
		Для Каждого ОписаниеКолонки Из мКолонки Цикл
			НовСтр[ОписаниеКолонки.Ключ] = Стр["КроссТаблица" + ОписаниеКолонки.Ключ + "_Значение"];		
		КонецЦикла;
		
	КонецЦикла;	
	
	ТЗ.Сортировать("Год, КодГрейда");
	
	#КонецОбласти
	
	#Область ВыводВТабличныйДокумент
		
	ДокументРезультат					= Новый ТабличныйДокумент;
	ДокументРезультат.ОтображатьСетку 	= Ложь;
	
	Построитель 						= Новый ПостроительОтчета;                         
	Построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.ВыводитьОбщиеИтоги 		= Ложь;
	Построитель.ВыводитьПодвалОтчета 	= Ложь;
	Построитель.ВыводитьПодвалТаблицы 	= Ложь;
	
	Построитель.ИсточникДанных 			= Новый ОписаниеИсточникаДанных(ТЗ);

	Построитель.Макет 					= Неопределено;
	Макет 								= Построитель.Макет; // форматируем макет
	
	ТекущаяОбласть = Неопределено;
	Для Каждого ОписаниеКолонки Из мКолонки Цикл
		Пока Истина Цикл 
		    ТекущаяОбласть = Макет.НайтиТекст(ОписаниеКолонки.Ключ, ТекущаяОбласть, Макет.Область(), Истина, Истина, Истина, Ложь); 
		    Если ТекущаяОбласть <> Неопределено Тогда 
				ДеталиОбласть 					= Макет.Область(ТекущаяОбласть.Верх + 1, ТекущаяОбласть.Лево, ТекущаяОбласть.Верх + 1, ТекущаяОбласть.Лево);
				ДеталиОбласть.СодержитЗначение 	= Истина;
				ДеталиОбласть.ТипЗначения 		= ОбщегоНазначения.ОписаниеТипаЧисло(5,2);
				ДеталиОбласть.Формат 			= "ЧЦ=5; ЧДЦ=2;";
		    Иначе 
		        Прервать; 
		    КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Построитель.Макет = Макет;	
	Построитель.Выполнить();
	Построитель.Вывести(ДокументРезультат);
	
	// удаление первого пустого столбца
	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(1,1,ДокументРезультат.ВысотаТаблицы,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	// ширина колонок год и код грейда
	ДокументРезультат.Область(1, 1, 1, 2).ШиринаКолонки = 10;
	
	// оформление колонок ставок
	Для НомерКолонки = 3 По ДокументРезультат.ШиринаТаблицы Цикл
		ТекОбласть 					= ДокументРезультат.Область(1, НомерКолонки, 1, НомерКолонки); 
		ТекОбласть.Текст 			= сПредставленияКолонок.Получить(ТекОбласть.Текст);
		ТекОбласть.ШиринаКолонки 	= 20;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ПодготовкаДляЗаписиВФайл
		
	Расширение				= "xlsx";
		
	НаименованиеФайла 		= СтрШаблон("Ставки премий, %1", ОтборСценарий);
	ИмяВременногоФайла		= ПолучитьИмяВременногоФайла(Расширение);
	ДокументРезультат.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента[Расширение]);
	ДвоичныеДанные			= Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ДанныеФайла 			= Новый Структура;
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", 		ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор));
	ДанныеФайла.Вставить("ОтносительныйПуть",                  	"");
	ДанныеФайла.Вставить("ИмяФайла",                            НаименованиеФайла + "." + Расширение);
	ДанныеФайла.Вставить("Наименование",                       	НаименованиеФайла);
	ДанныеФайла.Вставить("Расширение",                         	Расширение);
	ДанныеФайла.Вставить("Размер",                             	ДвоичныеДанные.Размер());
	ДанныеФайла.Вставить("Редактирует",                        	Неопределено);
	ДанныеФайла.Вставить("ПодписанЭП",                         	Ложь);
	ДанныеФайла.Вставить("Зашифрован",                         	Ложь);
	ДанныеФайла.Вставить("ФайлРедактируется",                  	Ложь);
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", 	Ложь);
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак",				"");
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная",		ТекущаяУниверсальнаяДата());
	ДанныеФайла.Вставить("ПолноеНаименованиеВерсии",			НаименованиеФайла);
	
	#КонецОбласти

	Возврат ДанныеФайла;

КонецФункции // КроссТаблицуВТабличныйДокументДляВыгрузкиВExcek()

&НаКлиенте
Функция СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(ИдентификаторСтроки, Знач ИмяКолонки)
	
	СтрокаТаблицы 	= КроссТаблица.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Возврат Новый Структура("Дата, Сценарий, Год, Грейд, КодГрейда, ВидНачисления, Ставка, ЭтоГруппаСтрок,
							|ЭтоПерваяСтрока, ЭтоПоследняяСтрока, ИдентификаторСтроки, ИндексСтроки, ИмяКолонкиЗначения",
					СтрокаТаблицы.Период,
					СтрокаТаблицы.Сценарий,
					СтрокаТаблицы.Период,
					СтрокаТаблицы.Грейд,
					СтрокаТаблицы.КодГрейда,
					СтрокаТаблицы[СтрЗаменить(ИмяКолонки, "_Значение", 	"_Ссылка")],
					СтрокаТаблицы[ИмяКолонки],
					СтрокаТаблицы.ЭтоГруппаСтрок,
					
					СтрокаТаблицы.ЭтоПерваяСтрока,
					СтрокаТаблицы.ЭтоПоследняяСтрока,
					ИдентификаторСтроки,
					КроссТаблица.Индекс(СтрокаТаблицы),
					ИмяКолонки);
	
КонецФункции	
     
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьКонтекстноеМеню(Элемент)

	СтароеЗначениеЯчейки = Неопределено;
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки 								= Элемент.ТекущийЭлемент.Имя;
	ТекущиеДанные 							= Элементы.КроссТаблица.ТекущиеДанные;
	
	РазрешеноСкопироватьВверхГод	= Ложь;
	РазрешеноСкопироватьВнизГод		= Ложь;
	РазрешеноСкопироватьВверх 		= Ложь;
	РазрешеноСкопироватьВниз 		= Ложь;
	РазрешеноРедактировать 			= Ложь;
	
	Если Не ТекущиеДанные = Неопределено И Не Найти(ИмяКолонки, "КроссТаблицаКолонка_") = 0 Тогда
		
		ОписаниеЯчейки						= СформироватьСтруктуруЗначенийЯчейкиКроссТаблицы(Элементы.КроссТаблица.ТекущаяСтрока, ИмяКолонки);
		
		Если Не ОписаниеЯчейки.ЭтоГруппаСтрок Тогда
			
			РазрешеноСкопироватьВверх 	= Не ОписаниеЯчейки.ЭтоПерваяСтрока; 
			РазрешеноСкопироватьВниз 	= Не ОписаниеЯчейки.ЭтоПоследняяСтрока;
			РазрешеноРедактировать		= Элементы.КроссТаблица.ВыделенныеСтроки.Количество() > 1;
			
		Иначе
			
		КонецЕсли;
		
		СтароеЗначениеЯчейки = ОписаниеЯчейки;
		
	ИначеЕсли Не ТекущиеДанные = Неопределено
	 И ТекущиеДанные.ЭтоГруппаСтрок
	 И Не Найти(ИмяКолонки, "КроссТаблицаПредставление") = 0
	Тогда
	
		РазрешеноСкопироватьВверхГод 	= КроссТаблица.Количество() > 0
										И (НачалоГода(КроссТаблица.Получить(0).Период) < НачалоГода(ТекущиеДанные.Период));	 // не первый год в таблице
		РазрешеноСкопироватьВнизГод 	= КроссТаблица.Количество() > 0
										И (НачалоГода(КроссТаблица.Получить(КроссТаблица.Количество() - 1).Период) > НачалоГода(ТекущиеДанные.Период));	 // не последний год в таблице
	
	КонецЕсли;	
	
	Элементы.КроссТаблицаКонтекстноеМенюКомандаСкопироватьНаГодВверх.Видимость			= РазрешеноСкопироватьВверхГод;
	Элементы.КроссТаблицаКонтекстноеМенюКомандаСкопироватьНаГодВниз.Видимость			= РазрешеноСкопироватьВнизГод;

	Элементы.КроссТаблицаКонтекстноеМенюКомандаРедактироватьВыбранные.Видимость			= РазрешеноРедактировать;
	Элементы.КроссТаблицаКонтекстноеМенюКомандаСкопироватьДоНачалоПериода.Видимость		= РазрешеноСкопироватьВверх И Не РазрешеноРедактировать;
	Элементы.КроссТаблицаКонтекстноеМенюКомандаСкопироватьДоКонцаПериода.Видимость		= РазрешеноСкопироватьВниз И Не РазрешеноРедактировать;

КонецПроцедуры // ОбновитьКонтекстноеМеню()

#КонецОбласти



