
 #Область УниверсальныеПроцедуры
 
#Область ПостроительМеню

// Возвращает описание раздела меню.
//
// Параметры:
//   Заголовок - Строка
//
// Возвращаемое значение:
//  Структура:
//     * Вид       - ВидГруппыФормы.Подменю
//     * Заголовок - Строка
//     * Пункты    - Массив
//
Функция РазделМеню(Заголовок = "") Экспорт
	
	ОписаниеРазделаМеню = ЭлементМеню(ВидГруппыФормы.Подменю, Заголовок);
	ОписаниеРазделаМеню.Вставить("Пункты", Новый Массив);
	
	Возврат ОписаниеРазделаМеню;
	
КонецФункции

// Возвращает структуру простейшего элемента меню.
//
// Параметры:
//   ВидЭлемента - ВидГруппыФормы.Подменю, ВидКнопкиФормы.КнопкаКоманднойПанели
//   Заголовок   - Строка
//
// Возвращаемое значение:
//  Структура:
//     * Вид       - ВидГруппыФормы.Подменю, ВидКнопкиФормы.КнопкаКоманднойПанели
//     * Заголовок - Строка
//
Функция ЭлементМеню(ВидЭлемента = Неопределено, Заголовок = "")
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Вид", ВидЭлемента);
	ОписаниеЭлемента.Вставить("Заголовок", Заголовок);
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает описание разделителя кнопок меню.
//
Функция РазделительМеню() Экспорт
	
	Возврат ЭлементМеню();
	
КонецФункции

// Возвращает описание раздела пункта меню.
//
// Параметры:
//   Заголовок  - Строка
//   ИмяКоманды - Строка
//   Действие   - Строка - имя процедуры обработчика команды.
//
// Возвращаемое значение:
//  Структура:
//     * Вид        - ВидКнопкиФормы.КнопкаКоманднойПанели
//     * Заголовок  - Строка
//     * ИмяКоманды - Строка
//     * Действие   - Строка
//
Функция ПунктМеню(Заголовок = "", ИмяКоманды = "", Действие = "") Экспорт
	
	ОписаниеПунктаМеню = ЭлементМеню(ВидКнопкиФормы.КнопкаКоманднойПанели, Заголовок);
	ОписаниеПунктаМеню.Вставить("ИмяКоманды", ИмяКоманды);
	ОписаниеПунктаМеню.Вставить("Действие", Действие); 
	
	Возврат ОписаниеПунктаМеню;
	
КонецФункции

// Осуществляет установку меню командных панелей формы, по приведенному описанию. Добавляет команды
// элементы меню в командные панели формы.
//
// Параметры:
//			Форма
//			ОписаниеМеню - структура описания меню, полученная с помощью методов
//							РазделМеню и ПунктМеню.
//			ИменаКонтейнеров - имена элементов (групп командной панели), в которых
//							необходимо разместить меню, перечисленные через запятую.
//
Процедура УстановитьМенюВФорме(Форма, ОписаниеМеню, ИменаКонтейнеров) Экспорт
	
	Если ОписаниеМеню = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаГруппПодменю = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКонтейнеров);
	
	Для каждого ИмяГруппыПодменю Из ИменаГруппПодменю Цикл
		
		ГруппаПодменю = Форма.Элементы.Найти(ИмяГруппыПодменю);
		Если ГруппаПодменю = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Предварительная очистка меню, при повторном заполнении.
		Если ГруппаПодменю <> Неопределено Тогда
			Пока ГруппаПодменю.ПодчиненныеЭлементы.Количество() > 0 Цикл
				Форма.Элементы.Удалить(ГруппаПодменю.ПодчиненныеЭлементы[0]);
			КонецЦикла; 
		КонецЕсли; 
		
		Если ОписаниеМеню.Вид = ВидГруппыФормы.Подменю Тогда
			
			ДобавитьПодменю(Форма, ОписаниеМеню, ГруппаПодменю);
			
		ИначеЕсли ОписаниеМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
			
			ДобавитьПунктМеню(Форма, ОписаниеМеню, ГруппаПодменю);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодменю(Форма, ОписаниеМеню, ГруппаПодменю)
	
	Если НЕ ПустаяСтрока(ОписаниеМеню.Заголовок) Тогда
		ГруппаПодменю.Заголовок = ОписаниеМеню.Заголовок;
	КонецЕсли; 
	
	Счетчик = 1;
	ГруппаПодменюДляРазмещенияПунктов = ГруппаПодменю;
	Для каждого ПунктМеню Из ОписаниеМеню.Пункты Цикл
		
		Если ПунктМеню.Вид = ВидГруппыФормы.Подменю Тогда
			
			ГруппаПодменю = Форма.Элементы.Добавить(ГруппаПодменюДляРазмещенияПунктов.Имя +  "Группа" + Счетчик, Тип("ГруппаФормы"), ГруппаПодменюДляРазмещенияПунктов);
			ГруппаПодменю.Вид = ПунктМеню.Вид;
			
			ДобавитьПодменю(Форма, ПунктМеню, ГруппаПодменю);
			
		ИначеЕсли ПунктМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели Тогда
			
			ДобавитьПунктМеню(Форма, ПунктМеню, ГруппаПодменюДляРазмещенияПунктов);
			
		Иначе
			
			ГруппаПодменюДляРазмещенияПунктов = Форма.Элементы.Добавить(ГруппаПодменюДляРазмещенияПунктов.Имя + "Разделитель" + Счетчик, Тип("ГруппаФормы"), ГруппаПодменюДляРазмещенияПунктов);
			ГруппаПодменюДляРазмещенияПунктов.Вид = ВидГруппыФормы.ГруппаКнопок;
			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПунктМеню(Форма, ОписаниеМеню, ГруппаПодменю)
	
	Команда = Форма.Команды.Найти(ОписаниеМеню.ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда = Форма.Команды.Добавить(ОписаниеМеню.ИмяКоманды);
		Команда.Заголовок = ОписаниеМеню.Заголовок;
		Команда.Действие = ОписаниеМеню.Действие;
	КонецЕсли; 
	
	КнопкаФормы = Форма.Элементы.Добавить(ГруппаПодменю.Имя + ОписаниеМеню.ИмяКоманды, Тип("КнопкаФормы"), ГруппаПодменю);
	КнопкаФормы.Вид = ОписаниеМеню.Вид;
	КнопкаФормы.ИмяКоманды = ОписаниеМеню.ИмяКоманды;
	
КонецПроцедуры

// Проверяет доступность объектов метаданных по полным именам. Проверка производится по критериям:
//	- наличие объекта в конфигурации
//  - доступность в зависимости от значений функциональных опций в состав которых входит объект
//  - и наличие права на объект у текущего пользователя.
//
// Параметры:
//		ПолныеИменаОбъектовМетаданных - Массив строк (например: "Документы.ПриемНаРаботу").
//		ПравоДоступа - Строка, описание параметра соответствует описанию параметра "Право" метода
//				платформы "ПравоДоступа".
//		ПолныеИменаИсключаемыхИзПроверкиОбъектовМетаданных - Массив строк имен объектов метаданных,
//				право доступа к которым не предоставляется из логических соображений.
//
// Возвращаемое значение:
//  Соответствие:
//     * Ключ     - Полное имя объекта метаданных 
//     * Значение - Синоним объекта, заданный в конфигураторе
//
Функция ПредставленияДоступныхОбъектовМетаданных(ПолныеИменаОбъектовМетаданных, ПравоДоступа, ПолныеИменаИсключаемыхИзПроверкиОбъектовМетаданных = Неопределено, СобственныеПредставленияОбъектов = Неопределено) Экспорт
	
	ПредставленияДоступныхОбъектов = Новый Соответствие;
	
	Для каждого ПолноеИмяОбъектаМетаданных Из ПолныеИменаОбъектовМетаданных Цикл
		
		Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПолныеИменаИсключаемыхИзПроверкиОбъектовМетаданных <> Неопределено
			И ПолныеИменаИсключаемыхИзПроверкиОбъектовМетаданных.Найти(ПолноеИмяОбъектаМетаданных) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИменОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
		ОбъектМетаданных = Метаданные[ЧастиИменОбъекта[0]].Найти(ЧастиИменОбъекта[1]);
		
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПравоДоступа(ПравоДоступа, ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		СобственноеПредставлениеОбъекта = "";
		Если СобственныеПредставленияОбъектов <> Неопределено Тогда
			СобственноеПредставлениеОбъекта = СобственныеПредставленияОбъектов.Получить(ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СобственноеПредставлениеОбъекта) Тогда
			ПредставленияДоступныхОбъектов.Вставить(ПолноеИмяОбъектаМетаданных, СобственноеПредставлениеОбъекта);
		Иначе
			ПредставленияДоступныхОбъектов.Вставить(ПолноеИмяОбъектаМетаданных, ОбъектМетаданных.Синоним);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставленияДоступныхОбъектов;
	
КонецФункции

#КонецОбласти

// Проверяет принадлежность объекта метаданных к подсистемам. Проверка производится на вхождение
// в состав указанных подсистем и на вхождение в состав подсистем подчиненных указанным.
//
// Параметры:
//			ПолноеИмяОбъектаМетаданных 	- Строка, полное имя объекта метаданных (см. функцию НайтиПоПолномуИмени).
//			ИменаПодсистем				- Строка, имена подсистем, перечисленные через запятую.
//
// Возвращаемое значение:
//		Булево
//
Функция ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, ИменаПодсистем) Экспорт
	Возврат БюджетированиеПовтИсп.ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, ИменаПодсистем);
КонецФункции

// Возвращает значение по умолчанию для типа соответствующего типу переданного параметра.
//
// Параметры:
//		Значение			- Любое значение.
//
// Возвращаемое значение:
//		Пустое значение такого же типа как и значение переданное в качестве параметра.
//
Функция ПустоеЗначениеТипаПоЗначению(Значение)
	Тип = ТипЗнч(Значение);
	ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип));
	Возврат ОписаниеТипа.ПривестиЗначение();
КонецФункции

// Возвращает сериализованный объект в виде двоичных данных.
//
// Параметры:
//  Объект - Любой сериализуемый в XML объект.
//
// Возвращаемое значение:
//  ДвоичныеДанные - сериализованный объект.
//
Функция СериализоватьОбъектВДвоичныеДанные(Объект) Экспорт
	ЗаписьXML = Новый ЗаписьFastInfoset;
	ЗаписьXML.УстановитьДвоичныеДанные();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Десериализует объект из двоичных данных
// 
// Параметры:
//   ДанныеОбъекта - двоичные данные, представляющие собой объект, сериализованный, 
//   например, при помощи СериализоватьОбъектВДвоичныеДанные.
//
Функция ДесериализоватьОбъектИзДвоичныхДанных(ДанныеОбъекта) Экспорт
	ЧтениеXML = Новый ЧтениеFastInfoset;
	ЧтениеXML.УстановитьДвоичныеДанные(ДанныеОбъекта);
	Объект = ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	Возврат Объект;
	
КонецФункции

// Выгрузка результата запроса в таблицу значений
// Применяется в методах, которые должны возвращать таблицу значений заданной структуры
// Исключает влияние текста запроса на значение, возвращаемое такими методами
Процедура ВыгрузитьРезультатВТаблицуЗначений(РезультатЗапроса, ЦелеваяТаблица) Экспорт
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЦелеваяТаблица.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

Функция ПозицииШтатногоРасписанияПодразделения(ПозицииШтатногоРасписания) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПозицииШтатногоРасписания, "Подразделение");
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение", Истина);
	
КонецФункции

Функция ПринадлежностьПозицииШтатногоРасписанияПодразделению(Подразделение, СписокПозицийШтатногоРасписания) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокПозицийШтатногоРасписания, "Ссылка");
	
	МассивЗначенийКолонок = ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение", Истина);
	
	МассивПозицийШтатногоРасписания = Новый Массив;
	
	Для Каждого ЗначениеКолонки Из МассивЗначенийКолонок Цикл
		Если ЗначениеКолонки.Подразделение = Подразделение Тогда
			МассивПозицийШтатногоРасписания.Добавить(ЗначениеКолонки);		
		КонецЕсли;	
	КонецЦикла;	
	
	Если МассивПозицийШтатногоРасписания.Количество() = 0 Тогда
		МассивПозицийШтатногоРасписания.Добавить(Справочники.ПозицииШтатногоРасписания.ПустаяСсылка());	
	КонецЕсли;	
	
	Возврат МассивПозицийШтатногоРасписания;
	
КонецФункции

 // См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	БюджетированиеВнутренний.ПриЗаполненииВидовДоступа(ВидыДоступа);
	
КонецПроцедуры 

Функция МассивНачислений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВидыНачислений.Ссылка КАК Начисление,
	               |	""Начисление"" КАК ВидОперации
	               |ИЗ
	               |	Справочник.ВидыНачислений КАК ВидыНачислений";
	
КонецФункции

#Область УправлениеДоступом

Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	БюджетированиеВнутренний.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
КонецПроцедуры

Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	БюджетированиеВнутренний.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	БюджетированиеВнутренний.ПриЗаполненииОграниченияДоступа(Список, Ограничение);
	
КонецПроцедуры

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	БюджетированиеВнутренний.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);

КонецПроцедуры

Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт 
	
	БюджетированиеВнутренний.ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы,  ПутьКДанным = "") Экспорт
	
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ПутьКДанным);
	Иначе
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты();
	КонецЕсли;
	
	Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
		МассивИменРеквизитовФормы.Добавить(?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным + ".", "") + Реквизит.Имя);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, СуществующиеРеквизиты, УдаляемыеРеквизиты = Неопределено, ОтложенноеИзменение = Ложь) Экспорт
	
	Если УдаляемыеРеквизиты = Неопределено Тогда 
		УдаляемыеРеквизиты = Новый Массив;
	КонецЕсли;
	
	// Удаляем уже существующие реквизиты из ДобавляемыеРеквизиты.
	УжеСуществующиеРеквизиты = Новый Массив;
	ИменаУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		ПолноеИмяРеквизита = ?(ЗначениеЗаполнено(Реквизит.Путь), Реквизит.Путь + ".", "") + Реквизит.Имя;
		Если СуществующиеРеквизиты.Найти(ПолноеИмяРеквизита) <> Неопределено Тогда
			УжеСуществующиеРеквизиты.Добавить(Реквизит);
			ИменаУдаляемыхРеквизитов.Добавить(ПолноеИмяРеквизита);
		КонецЕсли;					
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИменаУдаляемыхРеквизитов, УдаляемыеРеквизиты);
	
	// Из дополняемых реквизитов также удаляем те, которые содержатся внутри удаляемых реквизитов и дублей-реквизитов.
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		Если УжеСуществующиеРеквизиты.Найти(Реквизит) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Реквизит.Путь) Тогда
		    Продолжить;
		КонецЕсли;
		Если ИменаУдаляемыхРеквизитов.Найти(Реквизит.Путь) <> Неопределено Тогда
			УжеСуществующиеРеквизиты.Добавить(Реквизит);
		КонецЕсли;					
	КонецЦикла;
	
	Для Каждого Реквизит Из УжеСуществующиеРеквизиты Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДобавляемыеРеквизиты, Реквизит);
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() = 0 И УдаляемыеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтложенноеИзменение Тогда
		Для Каждого Реквизит Из УдаляемыеРеквизиты Цикл
			Форма.РеквизитыКУдалению.Добавить(Реквизит);
		КонецЦикла;
		Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
			Форма.РеквизитыКДобавлению.Добавить(Реквизит);
		КонецЦикла;
	Иначе
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнятьРасчетБюджетированияБезОптимизации() Экспорт
	Возврат Ложь;
КонецФункции

#Область ПолучениеКадровыхДанных

Процедура СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизации") Экспорт
	
	Запрос = Новый Запрос;
	
    ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.Период КАК Период,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.Подразделение КАК Подразделение,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.МестоВозникновенияЗатрат КАК МестоВозникновенияЗатрат,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.КодГрейда КАК КодГрейда,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.НачалоПериода КАК НачалоПериода,
                   |	КадровыеСведенияСотрудниковОрганизацийСрезПоследних.ОкончаниеПериода КАК ОкончаниеПериода
				   |ПОМЕСТИТЬ ВТСотрудникиОрганизации
                   |ИЗ
                   |	РегистрСведений.КадровыеСведенияСотрудниковОрганизаций.СрезПоследних(&ДатаСреза, %Организация%) КАК КадровыеСведенияСотрудниковОрганизацийСрезПоследних";
	
	Организация = Неопределено;
	Если Параметры.Свойство("Организация", Организация) И Не Организация = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Организация%", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Организация%", "");
	КонецЕсли;	
	ОкончаниеПериода = Неопределено;     
	Если Параметры.Свойство("ОкончаниеПериода", ОкончаниеПериода) И Не ОкончаниеПериода = Неопределено 
			И Не "ОкончаниеПериода" = "00010101" Тогда
		Запрос.УстановитьПараметр("ДатаСреза", ОкончаниеПериода);
	Иначе
		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
	КонецЕсли;	
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПараметрыПолученияПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизаций();
	ПараметрыПолучения.Вставить("СписокФизическихЛиц");
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизаций()
	
	ПараметрыПолучения = Новый Структура("Организация,Подразделение,МестоВозникновенияЗатрат");
	
	ПараметрыПолучения.Вставить("КадровыеДанные", "");
	ПараметрыПолучения.Вставить("НачалоПериода", '00010101');
	ПараметрыПолучения.Вставить("ОкончаниеПериода", '00010101');
	ПараметрыПолучения.Вставить("Отборы");
	ПараметрыПолучения.Вставить("ИсключаемыйРегистратор");
	
	ПараметрыПолучения.Вставить("ВыбрасыватьИсключениеДоступа", Истина);
	
	ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(ПараметрыПолучения);
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Процедура ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(СтруктураПараметров)
	
	ИменаТаблицСКадровымиСведениямиСотрудниковОрганизаций = Новый Структура;
	ИменаТаблицСКадровымиСведениямиСотрудниковОрганизаций.Вставить("ИмяВТКадровыеСведенияСотрудниковОрганизацийТаблицаРегистра", "");
	ИменаТаблицСКадровымиСведениямиСотрудниковОрганизаций.Вставить("ИмяВТКадровыеСведенияСотрудниковОрганизацийСрезПоследних", "");
	
	СтруктураПараметров.Вставить("ИменаТаблицСКадровымиСведениямиСотрудниковОрганизаций", ИменаТаблицСКадровымиСведениямиСотрудниковОрганизаций);
	
КонецПроцедуры

Функция СотрудникиОрганизации(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыеДанные = Параметры.КадровыеДанные;
	Если ЗначениеЗаполнено(КадровыеДанные) Тогда
		
		Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
			КадровыеДанные = СтрРазделить(КадровыеДанные, ", ", Ложь);
		КонецЕсли;
		
		ТекстЗапросаКадровыхДанных = "СотрудникиОрганизации.ФизическоеЛицо";
		Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
			ТекстЗапросаКадровыхДанных = ТекстЗапросаКадровыхДанных + ",
				|	СотрудникиОрганизации." + ИмяКадровыхДанных;
		КонецЦикла;
		
	Иначе
		ТекстЗапросаКадровыхДанных = "";
	КонецЕсли; 
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизации.Период,
		|	СотрудникиОрганизации.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
	Если Не ПустаяСтрока(ТекстЗапросаКадровыхДанных) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ФизическоеЛицо", ТекстЗапросаКадровыхДанных);
	КонецЕсли; 
	
	СотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат СотрудникиОрганизации;
	
КонецФункции

Функция ПозицияШтатногоРасписанияЗанята(ПараметрыПозиции) Экспорт
	
	Позиция = Неопределено;
	Если Не ТипЗнч(ПараметрыПозиции) = Тип("Структура") И Не ПараметрыПозиции.Свойство("Позиция", Позиция) И Позиция = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫБОР
	                      |		КОГДА КадровыеСведенияСотрудниковОрганизацийСрезПоследних.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяССылка)
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК ПозицияЗанята
	                      |ИЗ
	                      |	РегистрСведений.КадровыеСведенияСотрудниковОрганизаций.СрезПоследних(&ДатаАнализа, ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания) КАК КадровыеСведенияСотрудниковОрганизацийСрезПоследних");

	ДатаАнализа = Неопределено;
	Если ПараметрыПозиции.Свойство("ДатаАнализа", ДатаАнализа) И Не ДатаАнализа = Неопределено Тогда
		Если Не ТипЗнч(ДатаАнализа) = Тип("Дата") Тогда
			ДатаАнализа = ТекущаяДатаСеанса();
		КонецЕсли;	
	Иначе
		ДатаАнализа = ТекущаяДатаСеанса();
	КонецЕсли;
	
    Запрос.УстановитьПараметр("ДатаАнализа", ДатаАнализа);
    Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Позиция);

	ТабСтатусов = Запрос.Выполнить().Выгрузить();
	
	Если ТабСтатусов.Количество() > 0 Тогда
		Возврат ТабСтатусов[0].ПозицияЗанята;	
	Иначе
		Возврат Ложь;	
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#КонецОбласти  

#Область ЗаполнениеЗначенийПоУмолчанию

Функция ПерваяДоступнаяОрганизация() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Ссылка;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Организация;
			
КонецФункции

// Выполняет заполнение первоначальных значений при создании новых 
// объектов или открытии иных форм.
// Параметры:
//		Форма - форма, реквизиты которой необходимо заполнить.
//		ЗапрашиваемыеЗначения - структура с запрашиваемыми значениями.
//			Имя элемента структуры идентифицирует значение, которое 
//				необходимо заполнить.
//			Значение элемента структуры - путь к реквизиту формы, значение
//				которого необходимо заполнить.
//			Список поддерживаемых значений см. в описании ПолучитьЗначенияПоУмолчанию.
//
Процедура ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗапрашиваемыеЗначения) Экспорт
	
	ФиксированныеЗначения = Новый Массив;
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		// Поддерживаемое значение по умолчанию "Ответственный" имеет особое поведение - заполняется безусловно.
		Если ЗапрашиваемоеЗначение.Ключ = "Ответственный" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение)) Тогда
			ФиксированныеЗначения.Добавить(ЗапрашиваемоеЗначение.Ключ)
		КонецЕсли	
	КонецЦикла;

	ЗаполнитьЗначенияВФорме(Форма, ЗапрашиваемыеЗначения, ФиксированныеЗначения);
	
КонецПроцедуры

// Выполняет заполнение значений в форме на основании значений по умолчанию.
// 
// Параметры:
//		Форма - форма, реквизиты которой необходимо заполнить.
//		ЗапрашиваемыеЗначения - структура с запрашиваемыми значениями.
//			Имя элемента структуры идентифицирует значение, которое 
//				необходимо заполнить.
//			Значение элемента структуры - путь к реквизиту формы, значение
//				которого необходимо заполнить.
//			Список поддерживаемых значений см. в описании ПолучитьЗначенияПоУмолчанию.
//
//		ФиксированныеЗначения - (необязательный) массив, 
//				Содержит идентификаторы значений, 
//				которое не должны быть изменены при заполнении.
//
Процедура ЗаполнитьЗначенияВФорме(Форма, ЗапрашиваемыеЗначения, ФиксированныеЗначения = Неопределено) Экспорт
	
	Если ФиксированныеЗначения = Неопределено Тогда
		ФиксированныеЗначения = Новый Массив
	КонецЕсли;
	
	ЗаполняемыеЗначения = Новый Структура;
	
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		
		ЗначениеРеквизита = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение);
		Если ФиксированныеЗначения.Найти(ЗапрашиваемоеЗначение.Ключ) = Неопределено Тогда
			ЗначениеРеквизита = ПустоеЗначениеТипаПоЗначению(ЗначениеРеквизита);
		КонецЕсли;
		ЗаполняемыеЗначения.Вставить(ЗапрашиваемоеЗначение.Ключ, ЗначениеРеквизита);
		
	КонецЦикла;
	
	ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	
	// Заполняем значения
	Для Каждого ЗапрашиваемоеЗначение Из ЗапрашиваемыеЗначения Цикл
		Если ФиксированныеЗначения.Найти(ЗапрашиваемоеЗначение.Ключ) = Неопределено Тогда
			ЗначениеРеквизита = НеОпределено;
			Если ЗаполняемыеЗначения.Свойство(ЗапрашиваемоеЗначение.Ключ, ЗначениеРеквизита) Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ЗапрашиваемоеЗначение.Значение, ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Получает значения по умолчанию.
// Параметры:
//		ЗаполняемыеЗначения - структура, 
//				Ключи структуры - идентификаторы запрашиваемых значений, 
//				Значения полей структуры заполняются процедурой приведены ниже.
//
//				Процедура поддерживает получение значений по умолчанию, которые 
//				зависят от других значений.
//				Например, для получения значения ДолжностьРуководителя для 
//				конкретной организации можно передать структуру с полями Организация и 
//				ДолжностьРуководителя, причем поле Организация заполнить конкретным значением.
//				В результате выполнения процедуры поле ДолжностьРуководителя
//				будет заполнено значением по умолчанию.
//
//		ЗаполненныеЗначения - (необязательный) массив, 
//				Содержит идентификаторы уже заполненных значений, 
//				Значения - уже заполненные значения.
//				На основании уже заполненных значений, могут быть 
//				заполнены, например, данные организации (НаименованиеПРФ и т.п.).
//		
//		Допустимые идентификаторы запрашиваемых значений - см. СписокДоступныхЗначенийПоУмолчанию:
//
Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений = НеОпределено) Экспорт
	
	ДатаЗначений = ДатаЗаполненияЗначений(ДатаЗначений);
	
	ЗначенияЗаполняемыеПоУмолчанию = ЗначенияЗаполняемыеПоУмолчанию(ЗаполняемыеЗначения);
	   
	// Значения по умолчанию получаем в цикле для того, чтобы заполнить как 
	// "первичные", так и зависимые значения.
	// Например, на первой итерации могли получить значение для поля Организация, 
	// а на следующей итерации - значение для поля НаименованиеПФР.
	Пока Истина Цикл
		
		НеОпределеноДо = КоличествоНеОпределенныхЗначений(ЗаполняемыеЗначения);
		
		ЗаполнитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ЗначенияЗаполняемыеПоУмолчанию, ДатаЗначений);
		
		ПолучитьЕдинственныеЗначенияТипов(ЗаполняемыеЗначения);
		
		НеОпределеноПосле = КоличествоНеОпределенныхЗначений(ЗаполняемыеЗначения);
		
		Если ЗаполнениеЗначенийЗакончено(НеОпределеноДо, НеОпределеноПосле) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ЗначенияЗаполняемыеПоУмолчанию, ДатаЗначений)
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполняемыеПоУмолчанию, ЗаполняемыеЗначения);
	
	БюджетированиеВнутренний.ПолучитьЗначенияПоУмолчанию(ЗначенияЗаполняемыеПоУмолчанию, ДатаЗначений);
	БюджетированиеПереопределяемый.ПолучитьЗначенияПоУмолчанию(ЗначенияЗаполняемыеПоУмолчанию, ДатаЗначений);
	ЗаполнитьЗначениеОрганизацииПоУмолчанию(ЗначенияЗаполняемыеПоУмолчанию);
	
	ЗаполнитьЗначенияСвойств(ЗаполняемыеЗначения, ЗначенияЗаполняемыеПоУмолчанию);
	
КонецПроцедуры

Функция ЗначенияЗаполняемыеПоУмолчанию(ЗаполняемыеЗначения)
	
	ПоддерживаемыеИдентификаторы = БюджетированиеВнутренний.СписокДоступныхЗначенийПоУмолчанию();
	
	ЗначенияЗаполняемыеПоУмолчанию = Новый Структура;
	
	Для Каждого КлючЗначение Из ЗаполняемыеЗначения Цикл
		
		Если ПоддерживаемыеИдентификаторы.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияЗаполняемыеПоУмолчанию.Вставить(КлючЗначение.Ключ);
		
	КонецЦикла;
	
	Возврат ЗначенияЗаполняемыеПоУмолчанию;
	
КонецФункции

Функция ЗаполнениеЗначенийЗакончено(НеОпределеноДо, НеОпределеноПосле)
	// Ничего не заполнили или уже все заполнили.
	Возврат НеОпределеноДо = НеОпределеноПосле Или НеОпределеноПосле = 0
КонецФункции

Функция ДатаЗаполненияЗначений(ДатаЗначений)
	
	Если ДатаЗначений = НеОпределено Тогда
		ДатаЗначений = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	Возврат ДатаЗначений;
	
КонецФункции

// Заполняет значение организации, если организация в коллекции запрашиваемых данных еще не заполнена.
// Значение организации получается из настроек пользователя по ключу объекта настроек "НастройкиПользователя"
// и ключу настроек "Организация". Если значения в настройках нет, заполняется первой доступной организацией.
//
Процедура ЗаполнитьЗначениеОрганизацииПоУмолчанию(ЗаполняемыеЗначения)
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения.Организация) Тогда
		
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", "Организация");
		Если ЗначениеЗаполнено(Организация) Тогда
			
			// Проверка доступности организации по РЛС.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.Ссылка = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если НЕ Выборка.Следующий() Тогда
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ЗаполняемыеЗначения.Организация = Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ссылочные значений, имеющиеся в базе в единственном экземпляре.
// Параметры:
//		ЗаполняемыеЗначения - структура, 
//				Ключи структуры - идентификаторы запрашиваемых значений, 
//				Значения полей должны быть заполнены, как минимум пустой ссылкой(для ссылочных полей).
//
// Допущения реализации:
//	1. Если в переданной структуре находятся 2 элемента одинакового типа
// 		и этот тип является типом владельца подбираемого значения, то в качестве владельца всегда будет использоваться
// 		первый заполненный элемент.
//  2. Не учитываются возможные связи параметров выбора.
//
Процедура ПолучитьЕдинственныеЗначенияТипов(ЗаполняемыеЗначения) Экспорт

	ТипыИзвестныхЗначений = Новый Соответствие;
	Для каждого ЗаполняемоеЗначение Из ЗаполняемыеЗначения Цикл
		
		ТипЗначения = ТипЗнч(ЗаполняемоеЗначение.Значение);
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗаполняемоеЗначение.Значение) Тогда
			ТипыИзвестныхЗначений.Вставить(ЗаполняемоеЗначение.Значение , Метаданные.НайтиПоТипу(ТипЗначения));
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстОсновногоЗапроса  = Новый Массив;;
	
	СтрокаЗаменыОбъединить  = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	ПервыйЗапрос = Истина;
	
	Для каждого ЗаполняемоеЗначение Из ЗаполняемыеЗначения Цикл
		Если ЗначениеЗаполнено(ЗаполняемоеЗначение.Значение) ИЛИ ЗаполняемоеЗначение.Значение = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		Тип = ТипЗнч(ЗаполняемоеЗначение.Значение);
		Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли; 
		
		УсловиеПоВладельцу = Новый Массив;
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа) И МетаданныеТипа.Владельцы.Количество() > 0 Тогда
			
			Для каждого ИзвестныеЗначения Из ТипыИзвестныхЗначений Цикл
				
				Если МетаданныеТипа.Владельцы.Содержит(ИзвестныеЗначения.Значение) Тогда
					УсловиеПоВладельцу.Добавить("ГДЕ ");
					УсловиеПоВладельцу.Добавить(МетаданныеТипа.Имя);
					УсловиеПоВладельцу.Добавить(".Владелец = &Владелец");
					УсловиеПоВладельцу.Добавить(МетаданныеТипа.Имя);
					Запрос.УстановитьПараметр("Владелец" + МетаданныеТипа.Имя, ИзвестныеЗначения.Ключ);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если УсловиеПоВладельцу.Количество() = 0 Тогда
				УсловиеПоВладельцу.Добавить("ГДЕ ");
				УсловиеПоВладельцу.Добавить(МетаданныеТипа.Имя);
				УсловиеПоВладельцу.Добавить(".Владелец = НЕОПРЕДЕЛЕНО");
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
			ТекстОсновногоЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2 """);
		Иначе
			ТекстОсновногоЗапроса.Добавить(СтрокаЗаменыОбъединить);
			ТекстОсновногоЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ 2 """);
		КонецЕсли;
		
		ТекстОсновногоЗапроса.Добавить(ЗаполняемоеЗначение.Ключ);
		ТекстОсновногоЗапроса.Добавить(""" КАК Поле,
			|	");
		ТекстОсновногоЗапроса.Добавить(МетаданныеТипа.Имя);
		ТекстОсновногоЗапроса.Добавить(".Ссылка КАК Ссылка
			| ИЗ ");
		ТекстОсновногоЗапроса.Добавить(МетаданныеТипа.ПолноеИмя());
		ТекстОсновногоЗапроса.Добавить(" КАК ");
		ТекстОсновногоЗапроса.Добавить(МетаданныеТипа.Имя);
		ТекстОсновногоЗапроса.Добавить(Символы.ПС);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТекстОсновногоЗапроса, УсловиеПоВладельцу);
		
	КонецЦикла;
	
	Если ТекстОсновногоЗапроса.Количество() > 0 Тогда
		ТекстОсновногоЗапроса.Добавить("
			|ИТОГИ ПО
			| Поле");
		Запрос.Текст = СтрСоединить(ТекстОсновногоЗапроса);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				ВыборкаПоПолю = Выборка.Выбрать();
				Если ВыборкаПоПолю.Количество() = 1 Тогда
					ВыборкаПоПолю.Следующий();
					ЗаполняемыеЗначения[ВыборкаПоПолю.Поле] = ВыборкаПоПолю.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти  

Функция КоличествоНеОпределенныхЗначений(ЗаполняемыеЗначения)
	
	Количество = 0;
	
	Для Каждого КлючЗначение Из ЗаполняемыеЗначения Цикл
		Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

Процедура ПриОпределенииРолейПодписантов(РолиПодписантов) Экспорт
	БюджетированиеВнутренний.ПриОпределенииРолейПодписантов(РолиПодписантов);
КонецПроцедуры

#Область РаботаСВременнымиТаблицами

// Уничтожает указанные временные таблицы
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИменаВТ                 - Массив, Строка - список уничтожаемых таблиц или имя одной таблицы
//	ПроверятьНаличие        - Булево - признак игнорирования отсутствия таблицы с указанным именем
//	                                   Истина - ничего не произойдет
//	                                   Ложь   - возникнет ошибка.
//
Процедура УничтожитьВТ(МенеджерВременныхТаблиц, Знач ИменаВТ, ПроверятьНаличие = Ложь) Экспорт
	
	// АПК:1297-выкл Не локализуется, все строки - части запросов или их параметры
	
	Если ТипЗнч(ИменаВТ) = Тип("Массив") Тогда
		УничтожаемыеВТ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаВТ)
	Иначе	
		УничтожаемыеВТ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИменаВТ);
	КонецЕсли;
	
	ЗапросыУничтожения = Новый Массив;
	Для Каждого ИмяВТ Из УничтожаемыеВТ Цикл
		Если ПроверятьНаличие И Не ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ) Тогда
			Продолжить;
		КонецЕсли;
		ЗапросыУничтожения.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВТ));
	КонецЦикла;
	
	Если ЗапросыУничтожения.Количество() = 0 Тогда
		Возврат
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЗапросыУничтожения, БюджетированиеОбщиеНаборыДанных.РазделительЗапросов());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// АПК:1297-вкл
	
КонецПроцедуры

Функция ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ) Экспорт
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТ) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Индекс(МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТ)) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

// Возвращает признак необходимости отключения бизнес логики при записи объекта.
//
// Параметры:
//  Объект - прикладной объект, например СправочникОбъект - объект для которого
//   требуется проверить необходимость отключения бизнес логики при записи.
//
// Возвращаемое значение:
//  Булево - признак необходимости отключения бизнес логики при записи объекта.
//
Функция ОтключитьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	Возврат Объект.ОбменДанными.Загрузка И (НЕ Объект.ДополнительныеСвойства.Свойство("ПроверятьБизнесЛогикуПриЗаписи")); 
		
КонецФункции

#Область УправлениеОтборамиВФормахСДинамическимСписком

// Добавляет и дополняет описание параметра отбора в структуру параметров отбора.
//
// Параметры:
//  СтруктураПараметровОтбора - Структура    - Описание параметров, указанных в тексте запроса
//                                             динамического списка, или добавляемых при модификации запроса.
//  ИмяПараметра              - Строка       - Имя параметра.
//  ОписаниеТипа              - ОписаниеТипа - Описание типа параметра.
//  Представление             - Строка       - Представление для вывода на форму.
//  ИмяМодификации            - Строка       - Имя модификации запроса после которой возможно использование
//                                             этого параметра отбора.
//
Процедура ДобавитьПараметрОтбора(СтруктураПараметровОтбора, ИмяПараметра, ОписаниеТипа,	Представление = Неопределено,
	ИмяМодификации = "") Экспорт
	
	ОписаниеПараметра = Новый Структура;
	ОписаниеПараметра.Вставить("ТипПараметра", ОписаниеТипа);
	ОписаниеПараметра.Вставить("ПредставлениеПараметра", ?(Представление = Неопределено, ИмяПараметра, Представление));
	
	БюджетированиеВнутренний.ДополнитьОписаниеМодифицирующегоПараметраОтбора(
		ИмяПараметра, ОписаниеПараметра, ИмяМодификации);
	
	СтруктураПараметровОтбора.Вставить(ИмяПараметра, ОписаниеПараметра);
	
КонецПроцедуры

// Создает элементы формы для группы настроек отбора.
//		СписокНастройкиОтбораНадпись
//		НаименованиеРеквизитаФормыДинамическийСписок
//		ПараметрыКритерияОтбора
//
// Параметры:
//		Форма - Форма, где располагается динамический список
//		НаименованиеРеквизитаСписок - Наименование реквизита формы "Динамический список"
//		ГруппаНастроек - Наименование группы, где будут отображаться недоступные пользователю настройки отбора в динамическом списке
//		ПараметрыКритерияОтбора - структура имен параметров, указанных в тексте запроса динамического списка,
//									элементы для заполнения параметров будут выведены на форму
//									Ключ - имя параметра, Значение - описание типов параметра
//		ГруппаПараметровКритерияОтбора - Наименование группы, где будут выведены параметры критериев отбора
//		ИсключаемыеИменаОтборов - Строка - Имена отборов, исключаемых из надписи, разделенные запятой
//		ЗаполнятьПользовательскийОтборПоОрганизации - Булево - Если Истина, то пользовательский отбор по организации будет заполнен организацией по умолчанию.
//
Процедура ПриСозданииНаСервереФормыСДинамическимСписком(Форма, НаименованиеРеквизитаСписок, ГруппаНастроек = "СписокНастройкиОтбора",
	ПараметрыКритерияОтбора = Неопределено, ГруппаПараметровКритерияОтбора = Неопределено, ИсключаемыеИменаОтборов = "", ЗаполнятьПользовательскийОтборПоОрганизации = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	ГруппаНастроек = Элементы[ГруппаНастроек];
	Список = Форма[НаименованиеРеквизитаСписок];
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СписокНастройкиОтбораНадпись", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НаименованиеРеквизитаФормыДинамическийСписок", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СинонимыЭлементовОтбора", Новый ОписаниеТипов("СписокЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьНесколькоОрганизацийБюджетированиеБазовая", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсключаемыеИменаОтборов", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаполнятьПользовательскийОтборПоОрганизации", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяПоляОрганизация", Новый ОписаниеТипов("Строка")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьКритерийОтбора", Новый ОписаниеТипов("Булево")));
	
	ТипОбъекта = ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы));
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта);
	
	Если ЭтоЖурналДокументов Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипыОбъектовОповещения", Новый ОписаниеТипов("СписокЗначений")));
	КонецЕсли;
	
	Если ПараметрыКритерияОтбора <> Неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыКритерияОтбора", Новый ОписаниеТипов("ТаблицаЗначений")));
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяПараметра", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПредставлениеПараметра", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипПараметра", Новый ОписаниеТипов("ОписаниеТипов"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизитаФормыПараметра", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизитаФормыПараметраИспользование", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлементаФормыПараметра", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлементаФормыПараметраИспользование", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяМодификации", Новый ОписаниеТипов("Строка"), "ПараметрыКритерияОтбора"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыМодификации", Новый ОписаниеТипов(), "ПараметрыКритерияОтбора"));
		
		ТаблицаПараметрыКритериевОтбора = Новый ТаблицаЗначений;
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ПредставлениеПараметра", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ТипПараметра", Новый ОписаниеТипов("ОписаниеТипов"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяРеквизитаФормыПараметра", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяРеквизитаФормыПараметраИспользование", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяЭлементаФормыПараметра", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяЭлементаФормыПараметраИспользование", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ИмяМодификации", Новый ОписаниеТипов("Строка"));
		ТаблицаПараметрыКритериевОтбора.Колонки.Добавить("ПараметрыМодификации", Новый ОписаниеТипов());
		
		Для каждого ПараметрКритерияОтбора Из ПараметрыКритерияОтбора Цикл
			
			ИдПараметра = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
			
			ОписаниеПараметра = ПараметрКритерияОтбора.Значение;
			ИмяРеквизитаФормы = ПараметрКритерияОтбора.Ключ + "_" + ИдПараметра;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаФормы, ОписаниеПараметра.ТипПараметра));
			
			НоваяСтрокаПараметра = ТаблицаПараметрыКритериевОтбора.Добавить();
			НоваяСтрокаПараметра.ПредставлениеПараметра = ОписаниеПараметра.ПредставлениеПараметра;
			НоваяСтрокаПараметра.ИмяПараметра = ПараметрКритерияОтбора.Ключ;
			НоваяСтрокаПараметра.ТипПараметра = ОписаниеПараметра.ТипПараметра;
			НоваяСтрокаПараметра.ИмяРеквизитаФормыПараметра = ИмяРеквизитаФормы;
			
			ОписаниеПараметра.Свойство("ИмяМодификации", НоваяСтрокаПараметра.ИмяМодификации);
			
			ИмяРеквизитаФормы = ПараметрКритерияОтбора.Ключ + "_Использование_" + ИдПараметра;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаФормы, Новый ОписаниеТипов("Булево")));
			
			НоваяСтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование = ИмяРеквизитаФормы;
		КонецЦикла;
	КонецЕсли;
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Надпись отборов, не доступных пользователю
	Если Элементы.Найти("СписокНастройкиОтбораНадпись") = Неопределено Тогда
		Элемент = Элементы.Добавить("СписокНастройкиОтбораНадпись", Тип("ПолеФормы"), ГруппаНастроек);
		Элемент.ПутьКДанным = "СписокНастройкиОтбораНадпись";
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		Элемент.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	
	Если ЭтоЖурналДокументов Тогда
		Для Каждого РегистрируемыйДокумент Из МетаданныеОбъекта.РегистрируемыеДокументы Цикл
			Форма.ТипыОбъектовОповещения.Добавить(
				ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РегистрируемыйДокумент.ПолноеИмя()).ПустаяСсылка()));
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыКритерияОтбора <> Неопределено И ГруппаПараметровКритерияОтбора <> Неопределено Тогда
		
		ГруппаПараметровКритерияОтбора = Элементы[ГруппаПараметровКритерияОтбора];
		ГруппаПараметровКритерияОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЛеваяГруппаПараметров = Неопределено;
		ПраваяГруппаПараметров = Неопределено;
		НомерПараметра = 0;
		Для каждого ПараметрКритерияОтбора Из ПараметрыКритерияОтбора Цикл
			НомерПараметра = НомерПараметра + 1;
			Если НомерПараметра/2 = Цел(НомерПараметра/2) Тогда
				Если ПраваяГруппаПараметров = Неопределено Тогда
					ИмяГруппы = "ПраваяГруппаПараметров" + "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
					ПраваяГруппаПараметров = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПараметровКритерияОтбора);
					ПраваяГруппаПараметров.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ПраваяГруппаПараметров.Отображение = ОтображениеОбычнойГруппы.Нет;
					ПраваяГруппаПараметров.Заголовок = НСтр("ru = 'Правая группа'");
					ПраваяГруппаПараметров.ОтображатьЗаголовок = Ложь;
					ПраваяГруппаПараметров.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				КонецЕсли;
				ГруппаТекущегоПараметра = ПраваяГруппаПараметров;
			Иначе
				Если ЛеваяГруппаПараметров = Неопределено Тогда
					ИмяГруппы = "ЛеваяГруппаПараметров" + "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
					ЛеваяГруппаПараметров = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПараметровКритерияОтбора);
					ЛеваяГруппаПараметров.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ЛеваяГруппаПараметров.Отображение = ОтображениеОбычнойГруппы.Нет;
					ЛеваяГруппаПараметров.Заголовок = НСтр("ru = 'Левая группа'");
					ЛеваяГруппаПараметров.ОтображатьЗаголовок = Ложь;
					ЛеваяГруппаПараметров.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				КонецЕсли;
				ГруппаТекущегоПараметра = ЛеваяГруппаПараметров;
			КонецЕсли;
			
			ИдПараметра = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "x");
			ОписаниеПараметра = ПараметрКритерияОтбора.Значение;
			
			ИмяГруппы = "ГруппаПараметра" + "_" + ИдПараметра;
			ГруппаТекущегоПараметра = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаТекущегоПараметра);
			ГруппаТекущегоПараметра.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТекущегоПараметра.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТекущегоПараметра.Заголовок = ОписаниеПараметра.ПредставлениеПараметра;
			ГруппаТекущегоПараметра.ОтображатьЗаголовок = Ложь;
			ГруппаТекущегоПараметра.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ИмяЭлементаФормы = ПараметрКритерияОтбора.Ключ + "_Использование_" + ИдПараметра;
			СтрокаПараметра = ТаблицаПараметрыКритериевОтбора.Найти(ПараметрКритерияОтбора.Ключ, "ИмяПараметра");
			СтрокаПараметра.ИмяЭлементаФормыПараметраИспользование = ИмяЭлементаФормы;
			Элемент = Элементы.Добавить(ИмяЭлементаФормы, Тип("ПолеФормы"), ГруппаТекущегоПараметра);
			Элемент.ПутьКДанным = СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Элемент.Заголовок = ОписаниеПараметра.ПредставлениеПараметра;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрОтбораПриИзменении");
			
			ИмяЭлементаФормы = ПараметрКритерияОтбора.Ключ + "_" + ИдПараметра;
			СтрокаПараметра.ИмяЭлементаФормыПараметра = ИмяЭлементаФормы;
			Элемент = Элементы.Добавить(ИмяЭлементаФормы, Тип("ПолеФормы"), ГруппаТекущегоПараметра);
			Элемент.ПутьКДанным = СтрокаПараметра.ИмяРеквизитаФормыПараметра;
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.РастягиватьПоГоризонтали = Истина;
			Элемент.Заголовок = НСтр("ru = 'Значение'");
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрОтбораПриИзменении");
			
			БюджетированиеВнутренний.НастроитьМодифицирующийПараметрОтбора(СтрокаПараметра, Список, МетаданныеОбъекта, Элементы);

		КонецЦикла;
	КонецЕсли;
	
	Форма.НаименованиеРеквизитаФормыДинамическийСписок = НаименованиеРеквизитаСписок;
	Если ПараметрыКритерияОтбора <> Неопределено Тогда
		Форма.ИспользоватьКритерийОтбора = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПараметрыКритериевОтбора, Форма.ПараметрыКритерияОтбора);
	КонецЕсли;
	
	// Заполним синонимы элементов отбора по пути к данным элементов формы
	Для каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		Форма.СинонимыЭлементовОтбора.Добавить(ЭлементФормы.ПутьКДанным, ЭлементФормы.Заголовок);
	КонецЦикла;
	
	// Заполним синонимы элементов отбора по реквизитам объекта
	Коллекция = ?(ЭтоЖурналДокументов, МетаданныеОбъекта.Графы, МетаданныеОбъекта.Реквизиты);
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл
		Форма.СинонимыЭлементовОтбора.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.Синоним);
	КонецЦикла;
	
	// Заполним синонимы элементов отбора по стандартным реквизитам объекта
	Для каждого ЭлементКоллекции Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Форма.СинонимыЭлементовОтбора.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.Синоним);
	КонецЦикла;
	
	Форма.ИспользоватьНесколькоОрганизацийБюджетированиеБазовая = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБюджетированиеБазовая");
	Форма.ИсключаемыеИменаОтборов = ИсключаемыеИменаОтборов;
	Форма.ЗаполнятьПользовательскийОтборПоОрганизации = ЗаполнятьПользовательскийОтборПоОрганизации;
	
	// По умолчанию добавим в пользовательские настройки отбор по организации
	КоллекцияОтборов = БюджетированиеКлиентСервер.ФиксированныйОтборДинамическогоСписка(Форма, Список);
	ДобавитьПользовательскийОтборПоОрганизацииВДинамическийСписок(Форма, Список.КомпоновщикНастроек.ПользовательскиеНастройки, КоллекцияОтборов);
	
	// Обновим надпись фиксированных настроек отбора
	БюджетированиеКлиентСервер.ОбновитьНадписьФиксированногоОтбора(Форма);
	
КонецПроцедуры

Процедура ДобавитьПользовательскийОтборПоОрганизацииВДинамическийСписок(Форма, ПользовательскиеНастройки, ФиксированныеОтборы)
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБюджетированиеБазовая");
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	Для каждого НастройкаКомпоновщика Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			Если НастройкаКомпоновщика.ДоступныеПоляОтбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДоступноеПолеВыбораОрганизация = НастройкаКомпоновщика.ДоступныеПоляОтбора.Элементы.Найти("Организация");
			Если ДоступноеПолеВыбораОрганизация = Неопределено Тогда
				ДоступноеПолеВыбораОрганизация = НастройкаКомпоновщика.ДоступныеПоляОтбора.Элементы.Найти("Владелец");
				Если ДоступноеПолеВыбораОрганизация = Неопределено
					Или ДоступноеПолеВыбораОрганизация.Тип <> Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если ИменаИсключаемыхОтборов.Найти(Строка(ДоступноеПолеВыбораОрганизация.Поле)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НайденОтборПоОрганизации = Ложь;
			Для каждого ЭлементОтбора Из НастройкаКомпоновщика.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ДоступноеПолеВыбораОрганизация.Поле Тогда
					НайденОтборПоОрганизации = Истина;
					Если ЭлементОтбора.ПравоеЗначение = Неопределено Тогда
						ЭлементОтбора.ПравоеЗначение = Справочники.Организации.ПустаяСсылка();
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не НайденОтборПоОрганизации Тогда
				Если ФиксированныеОтборы.Получить(ДоступноеПолеВыбораОрганизация.Поле) <> Неопределено Тогда
					НайденОтборПоОрганизации = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Не НайденОтборПоОрганизации Тогда
				ОрганизацияПоУмолчанию = Справочники.Организации.ПустаяСсылка();
				Если Форма.ЗаполнятьПользовательскийОтборПоОрганизации Тогда
					СтруктураЗначений = Новый Структура("Организация");
					ПолучитьЗначенияПоУмолчанию(СтруктураЗначений);
					СтруктураЗначений.Свойство("Организация", ОрганизацияПоУмолчанию);
				КонецЕсли;
				Форма.ИмяПоляОрганизация = Строка(ДоступноеПолеВыбораОрганизация.Поле);
				Если ИспользоватьНесколькоОрганизаций Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						НастройкаКомпоновщика,
						Форма.ИмяПоляОрганизация,
						ОрганизацияПоУмолчанию,
						ВидСравненияКомпоновкиДанных.Равно,
						,
						ЗначениеЗаполнено(ОрганизацияПоУмолчанию),
						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,
						Новый УникальныйИдентификатор);
				Иначе
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
						Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок],
						Форма.ИмяПоляОрганизация,
						ОрганизацияПоУмолчанию,
						ВидСравненияКомпоновкиДанных.Равно,
						,
						ЗначениеЗаполнено(ОрганизацияПоУмолчанию),
						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет настройку пользовательских отборов, если она не удовлетворяет фиксированному отбору динамического списка,
// то неправильные элементы пользовательского отбора удаляются.
//
// Параметры:
//		Форма - форма с динамическим списком
//		Настройки - Пользовательские настройки динамического списка
//		ПользовательскиеНастройкиПередЗагрузкой - Пользовательские настройки динамического списка, если вызов метода производится
//								из обработчика ПередЗагрузкойПользовательскихНастроекНаСервере элемента динамического списка.
//
Процедура ПроверитьПользовательскиеНастройкиДинамическогоСписка(Форма, ПользовательскиеНастройкиПередЗагрузкой = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	Настройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	КоллекцияОтборов = БюджетированиеКлиентСервер.ФиксированныйОтборДинамическогоСписка(Форма, Список);
	
	Для каждого НастройкаКомпоновщика Из Настройки.Элементы Цикл
		
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ДобавитьПользовательскийОтборПоОрганизацииВДинамическийСписок(Форма, Настройки, КоллекцияОтборов);
			
			УдаляемыеЭлементы = Новый Массив;
			Для каждого ЭлементОтбора Из НастройкаКомпоновщика.Элементы Цикл
				
				Если ПользовательскиеНастройкиПередЗагрузкой <> Неопределено
					И Форма.ЗаполнятьПользовательскийОтборПоОрганизации
					И ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
					СтруктураЗначений = Новый Структура("Организация");
					ПолучитьЗначенияПоУмолчанию(СтруктураЗначений);
					ОрганизацияПоУмолчанию = Неопределено;
					СтруктураЗначений.Свойство("Организация", ОрганизацияПоУмолчанию);
					Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
						// Подменим на организацию по умолчанию, т.к. это открытие формы
						ЭлементОтбора.ПравоеЗначение = ОрганизацияПоУмолчанию;
					КонецЕсли;
					Для каждого НастройкаКомпоновщикаПользовательскихНастроекПередЗагрузкой Из ПользовательскиеНастройкиПередЗагрузкой.Элементы Цикл
						Если ТипЗнч(НастройкаКомпоновщикаПользовательскихНастроекПередЗагрузкой) = Тип("ОтборКомпоновкиДанных") Тогда
							Для каждого ЭлементОтбораПользовательскихНастроекПередЗагрузкой Из НастройкаКомпоновщикаПользовательскихНастроекПередЗагрузкой.Элементы Цикл
								Если ТипЗнч(ЭлементОтбораПользовательскихНастроекПередЗагрузкой) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
									И ТипЗнч(ЭлементОтбораПользовательскихНастроекПередЗагрузкой.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
									Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
										// Подменим на организацию по умолчанию, т.к. это открытие формы
										ЭлементОтбораПользовательскихНастроекПередЗагрузкой.ПравоеЗначение = ОрганизацияПоУмолчанию;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					ОтборПоиска = ЭлементОтбора.Представление;
				Иначе
					ОтборПоиска = ЭлементОтбора.ЛевоеЗначение;
				КонецЕсли;
				ЭлементФиксированногоОтбора = КоллекцияОтборов.Получить(ОтборПоиска);
				Если ЭлементФиксированногоОтбора <> Неопределено Тогда
					Если ЭлементФиксированногоОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
						УдаляемыеЭлементы.Добавить(ЭлементОтбора);
					ИначеЕсли ТипЗнч(ЭлементОтбора) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
						И ЭлементОтбора.ПравоеЗначение <> ЭлементФиксированногоОтбора.ПравоеЗначение Тогда
						ЭлементОтбора.ПравоеЗначение = ЭлементФиксированногоОтбора.ПравоеЗначение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ЭлементОтбора Из УдаляемыеЭлементы Цикл
				НастройкаКомпоновщика.Элементы.Удалить(ЭлементОтбора);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(НастройкаКомпоновщика) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ОтборПоиска = Новый ПолеКомпоновкиДанных(НастройкаКомпоновщика.ИдентификаторПользовательскойНастройки);
			ЭлементФиксированногоОтбора = КоллекцияОтборов.Получить(ОтборПоиска);
			Если ЭлементФиксированногоОтбора <> Неопределено Тогда
				Если ЭлементФиксированногоОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					Настройки.Элементы.Удалить(НастройкаКомпоновщика)
				ИначеЕсли НастройкаКомпоновщика.ПравоеЗначение <> ЭлементФиксированногоОтбора.ПравоеЗначение Тогда
					НастройкаКомпоновщика.ПравоеЗначение = ЭлементФиксированногоОтбора.ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПользовательскиеНастройкиПередЗагрузкой = Неопределено Тогда
		// Если это не загрузка пользовательских настроек, то создадим элементы формы пользовательских настроек и доработаем их.
		СтандартнаяОбработка = Ложь;
		
		ГруппаПользовательскихНастроек = Форма.Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки;
		Форма.Элементы[Форма.НаименованиеРеквизитаФормыДинамическийСписок].СоздатьЭлементыФормыПользовательскихНастроек(ГруппаПользовательскихНастроек);
		УстановитьШиринуЭлементовОтбораДинамическогоСписка(ГруппаПользовательскихНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьШиринуЭлементовОтбораДинамическогоСписка(ГруппаНастроек)
	
	Для Каждого ЭлементФормы Из ГруппаНастроек.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			УстановитьШиринуЭлементовОтбораДинамическогоСписка(ЭлементФормы);
		ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементФормы.АвтоМаксимальнаяШирина = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения заполнения, передаваемые при создании нового документа из формы списка журнала
// В ЗначенияЗаполнения добавляется только единственный сотрудник, который соответствует отбору по физическому лицу и организации
// Перед вызовом метода для формы списка журнала должен быть вызван метод
// "ПриСозданииНаСервереФормыСДинамическимСписком", в который должны быть переданы параметры "ПараметрыКритерияОтбора" и
// "ГруппаПараметровКритерияОтбора".
//
// Параметры:
//		ПараметрыОткрытия - Структура - структура, в которую будут добавлены значения заполнения
//						ЗначенияЗаполнения - Структура
//							Организация - ссылка на организацию
//							Сотрудник - ссылка на сотрудника
//						ОписаниеФормы - Строка - полный путь к форме документа
//		ФизическоеЛицо - ссылка на физическое лицо для получения единственного сотрудника
//		ОрганизацияОтбора - ссылка на организацию для получения единственного сотрудника
//		ТипДокумента - тип создаваемого документа.
//
// Возвращаемое значение:
//		ЗначенияЗаполнения - Структура - содержит значения:
//			Сотрудник - Ссылка - Сотрудник, полученный по физическому лицу и организации, установленные в отборах на форме списка журнала.
//
Процедура ДинамическийСписокПередНачаломДобавления(ПараметрыОткрытия, ФизическоеЛицо, ОрганизацияОтбора, ТипДокумента, ИмяПоляСотрудник = "Сотрудник", ИмяПоляФизическоеЛицо = "ФизическоеЛицо") Экспорт
	
	Если ТипЗнч(ТипДокумента) = Тип("Строка") Тогда
		ПараметрыОткрытия.Вставить("ОписаниеФормы", ТипДокумента + ".ФормаОбъекта");
	Иначе
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		ПараметрыОткрытия.Вставить("ОписаниеФормы", МетаданныеДокумента.ПолноеИмя() + ".ФормаОбъекта");
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
		ЗначенияЗаполнения.Вставить("Организация", ОрганизацияОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Если Не ПустаяСтрока(ИмяПоляФизическоеЛицо) Тогда
			ЗначенияЗаполнения.Вставить(ИмяПоляФизическоеЛицо, ФизическоеЛицо);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяПоляСотрудник) Тогда
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			Возврат;
		КонецЕсли;
		ПараметрыПолученияСотрудников = Бюджетирование.ПараметрыПолученияПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение,МестоВозникновенияЗатрат,ПозицияШтатногоРасписания,Организация";
		Если ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
			ПараметрыПолученияСотрудников.Организация = ОрганизацияОтбора;
		КонецЕсли;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ТекущаяДатаСеанса();
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		СотрудникиФизическихЛиц = Бюджетирование.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Для Каждого СтрокаСотрудникиФизическихЛиц Из СотрудникиФизическихЛиц Цикл
			Если ЗначениеЗаполнено(СтрокаСотрудникиФизическихЛиц.ПозицияШтатногоРасписания) И Не ПустаяСтрока(ИмяПоляСотрудник)Тогда
				ЗначенияЗаполнения.Вставить(ИмяПоляСотрудник, СтрокаСотрудникиФизическихЛиц.ФизическоеЛицо);
				Если Не ЗначениеЗаполнено(ОрганизацияОтбора) Тогда
					ЗначенияЗаполнения.Вставить("Организация", СтрокаСотрудникиФизическихЛиц.Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаборыЗначенийДоступа(ДокументОбъект, Таблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументОбъект.Организация КАК ЗначениеДоступа
		|ИЗ
		|	Документ.ЗагрузочнаяТаблица КАК ДокументОбъект
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|";
		
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ИмяДокумента <> "ЗагрузочнаяТаблица" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗагрузочнаяТаблица", ИмяДокумента);
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Таблица);
	
КонецПроцедуры

#Область ФормаДокументов

#Область ОбработчикиСобытийЭлементовТабличнойЧастиФормы

// Серверная часть обработчика события изменения месяца начала в строке табличной части документа.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения.
//
Процедура ПриИзмененииМесяцаНачалаВСтрокеНаСервере(Форма) Экспорт
	
	// - Нужно доработать логику 
	//Если Форма.Объект.НачалоДействия <> Форма.ИсходныеДанныеМесяцНачало Тогда
	//	НовыйМесяцНачало = Форма.Объект.НачалоДействия;
	//	Форма.ЗначениеВРеквизитФормы(НовыйМесяцНачало, "ИсходныеДанныеМесяцНачало");
	//КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти