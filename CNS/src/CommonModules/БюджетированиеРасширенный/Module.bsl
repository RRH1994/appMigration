#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ЕстьИнтерфейс = ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.БюджетированиеКомандныйИнтерфейс");
	
	ОписаниеПрофиля = ОписаниеПрофиляПоставщикаДанных(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляАудитора(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляРуководителя(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляБюджетногоКонтролера(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.КонфигурацииБюджетированиеРасширенная") Тогда
		МодульКонфигурацииБюджетированиеРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииБюджетированиеРасширенный");
		МодульКонфигурацииБюджетированиеРасширенный.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПрофилиПользователей

Функция ОписаниеПрофиляПоставщикаДанных(ПраваНаИнтерфейс = Ложь) Экспорт
	
// Профиль "Поставщик данных по организациям".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "366b4e99-06bb-11ed-8116-b49691c52d8c";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Поставщик данных по организациям'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = ''");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетированиеПриложения");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваКонфигурацииБюджетированияРасширенная");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеБазовыхСправочныхДанных");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДанныхФизическихЛицБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДолжностей");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГрейдов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗагрузочнойТаблицы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКодовГрейдов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМестВозникновенияЗатрат");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодразделенийОрганизации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПозицийШтатногоРасписания");
	ОписаниеПрофиля.Роли.Добавить("ЗапускAutomation");
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускМобильногоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы"); 
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВерсийОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхФизическихЛицБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДолжностей");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗагрузочнойТаблицы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЖурналаВсеБюджетныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКодовГрейдов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМестВозникновенияЗатрат");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПодразделенийОрганизации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПозицийШтатногоРасписания");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаДвиженияДокумента");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации"); 
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");

	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОсновногоРабочегоСтола",    "БюджетированиеПриложения.БюджетированиеКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаПоставщикаДанных", "БюджетированиеПриложения.БюджетированиеКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаБюджетирование",               "БюджетированиеПриложения.БюджетированиеКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции	

Функция ОписаниеПрофиляАудитора(ПраваНаИнтерфейс = Ложь) Экспорт
	
	// Профиль "Аналитик".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "56f7ed14-06d6-11ed-8116-b49691c52d8c";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Аналитик'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание = НСтр("ru = ''");
	
	ОписаниеПрофиля.Роли.Добавить("Администрирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетированиеПриложения");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваКонфигурацииБюджетированияРасширенная");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");

	Возврат ОписаниеПрофиля;
	
КонецФункции	

Функция ОписаниеПрофиляРуководителя(ПраваНаИнтерфейс = Ложь) Экспорт
	
	// Профиль "Руководитель".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "f4b161a3-1fc6-11ed-8118-b49691c52d8e";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Руководитель'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = ''");
	ОписаниеПрофиля.Роли.Добавить("Администрирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетированиеПриложения");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваКонфигурацииБюджетированияРасширенная");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");

	Возврат ОписаниеПрофиля;
	
КонецФункции	

Функция ОписаниеПрофиляБюджетногоКонтролера(ПраваНаИнтерфейс = Ложь) Экспорт
	
	// Профиль "Бюджетный контролер".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "1f597ec7-1fc7-11ed-8118-b49691c52d8e";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Бюджетный контролер'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеПрофиля.Описание =
		НСтр("ru = ''");
	ОписаниеПрофиля.Роли.Добавить("Администрирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБюджетированиеПриложения");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваКонфигурацииБюджетированияРасширенная");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");

	Возврат ОписаниеПрофиля;
	
КонецФункции	

Процедура ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, ИмяРоли, ПолноеИмяПодсистемы = "") Экспорт
	
	Если Не ПустаяСтрока(ПолноеИмяПодсистемы) И Не ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПрофиля.Роли.Добавить(ИмяРоли);
	
КонецПроцедуры

Процедура ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля) Экспорт 
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБСП");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБИД" , 											"ИнтеграцияС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБРО" , 											"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБТС" , 											"ТехнологияСервиса");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваИПП" , 											"ИнтернетПоддержкаПользователей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭД" , 											"ЭлектронноеВзаимодействие");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРегистрацийВНалоговыхОрганах",							"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускВебКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТолстогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТонкогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВызовОнлайнПоддержки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеИнтеграцииС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиТекущиеДела",							"СтандартныеПодсистемы.ТекущиеДела");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеПечатныхФорм", 								"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхВариантовОтчетов", 					"СтандартныеПодсистемы.ВариантыОтчетов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДополнительныхОтчетовИОбработок", 						"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПапокИФайлов", 							"СтандартныеПодсистемы.РаботаСФайлами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНапоминаний",								"СтандартныеПодсистемы.НапоминанияПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты",			"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВыполнениеЗадач",									"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхШаблоновСообщений", 				"СтандартныеПодсистемы.ШаблоныСообщений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНовостей" , 											"ИнтернетПоддержкаПользователей.Новости");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокСотрудника");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокСотрудникаРасширенная");
	
КонецПроцедуры

Функция ИдентификаторПрофиляАудитор() Экспорт
	Возврат "cb6d7df5-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	БюджетированиеБазовый.ПриЗаполненииВидовДоступа(ВидыДоступа);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.КонфигурацииБюджетированиеРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииБюджетированиеРасширенный");
		Модуль.ПриЗаполненииВидовДоступа(ВидыДоступа);
	КонецЕсли;
	
КонецПроцедуры  

Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	БюджетированиеБазовый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	//// RLS - добавляем тут
	//Описание = Описание + "
	//|РегистрСведений.ХХХХХХ.Чтение.Организации
	//|РегистрСведений.ХХХХХХ.Чтение.Организации";
	//// Конец добавления
	
КонецПроцедуры

Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	БюджетированиеБазовый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	//// Новые подсистемы - добавить тут
	//Списки.Вставить(Метаданные.Справочники..., Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов...., Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений...., Истина);
	//Списки.Вставить(Метаданные.РегистрыНакоплений...., Истина);
	//// Конец Новые подсистемы
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	БюджетированиеБазовый.ПриЗаполненииОграниченияДоступа(Список, Ограничение);

	////  Добавлять новое тут
	//Если Список = Метаданные.РегистрыСведений.ХХХХХХ Тогда
	//	Ограничение.Текст =
	//	"РазрешитьЧтениеИзменение
	//	|ГДЕ
	//	|	ЗначениеРазрешено(ГоловнаяОрганизация)";
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	БюджетированиеБазовый.ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование);
	
КонецПроцедуры

#КонецОбласти

Процедура ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ДобавлятьЭлементыФормы = Истина,  ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	//Здесь или передать в другую процедуру - создание дополнительных реквизитов формы
	
КонецПроцедуры	

Процедура ИзменитьРеквизитыФормы(ЭтаФорма) Экспорт

	// Достаем их формы заботливо подготовленные списки.
	МассивРеквизитыКДобавлению = ЭтаФорма.РеквизитыКДобавлению.ВыгрузитьЗначения();
	МассивРеквизитыКУдалению = ЭтаФорма.РеквизитыКУдалению.ВыгрузитьЗначения();
	
	Если МассивРеквизитыКДобавлению.Количество() = 0 И МассивРеквизитыКУдалению.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Заполняем массив существующих реквизитов формы.
	// Определяем пути, содержащиеся в МассивРеквизитыКДобавлению.
	СписокПутей	= Новый Массив;
	Для каждого РеквизитКДобавлению Из МассивРеквизитыКДобавлению Цикл
		Если СписокПутей.Найти(РеквизитКДобавлению.Путь) = Неопределено Тогда
			СписокПутей.Добавить(РеквизитКДобавлению.Путь);
		КонецЕсли;
	КонецЦикла; 
	// Заполняем все реквизиты с учетом табличных частей.
	МассивИменРеквизитовФормы = Новый Массив;
	Бюджетирование.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы);
	Для каждого ПутьКДанным Из СписокПутей Цикл
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			Бюджетирование.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, ПутьКДанным);
		КонецЕсли;
	КонецЦикла; 
	
	Бюджетирование.ИзменитьРеквизитыФормы(ЭтаФорма, МассивРеквизитыКДобавлению, МассивИменРеквизитовФормы, МассивРеквизитыКУдалению);
	
КонецПроцедуры

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений) Экспорт
	
	БюджетированиеБазовый.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений);
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И Не ЗначениеЗаполнено(ЗаполняемыеЗначения.Организация) И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда 
			ЗаполняемыеЗначения.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("МесяцРасчета") Тогда
		ОрганизацияСсылка = Неопределено;
		Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ЗначениеЗаполнено(ОрганизацияСсылка)) Тогда
			ЗаполняемыеЗначения.МесяцРасчета = НачалоМесяца(ДатаЗначений);
			//НастройкиДатаВыплатыБюджетирования = РасчетБюджетированияРасширенныйВызовСервера.СведенияОНастройкахБюджетированиеРасширенная(ОрганизацияСсылка, Период, СценарийСсылка);
			//Если Не НастройкиДатаВыплатыБюджетирования.МесяцПервогоПлатежаЗаДМС = Перечисления.МесяцыГода.Январь Тогда
			//	Если необходимо, добавить свой год
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ПодписиДокументов.ЗаполнитьСведенияОПодписяхДокументовПоОрганизации(ЗаполняемыеЗначения);
	
КонецПроцедуры

Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	
	ПоддерживаемыеИдентификаторы = БюджетированиеБазовый.СписокДоступныхЗначенийПоУмолчанию();
	
	// В дальнейшем будем использовать для подписи документов
	
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПоШтатномуРасписанию");
	//ПоддерживаемыеИдентификаторы.Добавить("ГрафикРаботы");
	//
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяСтрокой");
	//
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассираСтрокой");
	//
	//ПоддерживаемыеИдентификаторы.Добавить("ОтветственныйЗаВУР");
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУР");
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУРСтрокой");
	//
	//ПоддерживаемыеИдентификаторы.Добавить("РуководительКадровойСлужбы");
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбы");
	//ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбыСтрокой");
	//
	//ПодписиДокументов.ДобавитьИдентификаторыОтветственныхРаботниковОрганизаций(ПоддерживаемыеИдентификаторы);
	
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

#Область ПодписиДокументов

Процедура ПриОпределенииРолейПодписантов(РолиПодписантов) Экспорт
	РольРуководитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Руководитель", "ДолжностьРуководителя", "ОснованиеПодписиРуководителя");
	РолиПодписантов.Добавить(РольРуководитель);
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Исполнитель", "ДолжностьИсполнителя", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
	РольСоставил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Составил", "ДолжностьСоставившего", "ОснованиеПодписиСоставившего");
	РолиПодписантов.Добавить(РольСоставил);
	
	РольПроверил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Проверил", "ДолжностьПроверившего", "ОснованиеПодписиПроверившего");
	РолиПодписантов.Добавить(РольПроверил); 
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ПоставщикДанных", "ДолжностьПоставщикаДанных", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Аналитик", "ДолжностьАналитика", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("БюджетныйКонтроллер", "ДолжностьБюджетногоКонтроллера", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.Взносы");
	Возврат Массив
КонецФункции 

// Возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru = 'организации'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение", НСтр("ru = 'подразделения'")));
	Возврат Массив
КонецФункции

#КонецОбласти 

#Область РаботаСМодифицирующимиПараметрамиДинамическихСписков

Процедура ДополнитьОписаниеМодифицирующегоПараметраОтбора(ИмяПараметра, ОписаниеПараметра, ИмяМодификации) Экспорт
	
	Если ПустаяСтрока(ИмяМодификации) Тогда
		Если ИмяПараметра = "Подразделение" Тогда
			ОписаниеПараметра.Вставить("ИмяМодификации", "ОтборПоПодразделению");
		КонецЕсли;
	Иначе
		ОписаниеПараметра.Вставить("ИмяМодификации", ИмяМодификации);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьМодифицирующийПараметрОтбора(СтрокаПараметра, Список, МетаданныеОбъекта, Элементы) Экспорт
	
	Если Не ПустаяСтрока(СтрокаПараметра.ИмяМодификации) Тогда
		ЗаполнитьПараметрыВариантаМодификации(СтрокаПараметра, Список, МетаданныеОбъекта);
		ДобавитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСМодифицирующимиПараметрамиДинамическихСписков

Процедура ЗаполнитьПараметрыВариантаМодификации(СтрокаПараметра, Список, МетаданныеОбъекта)
	
	Если СтрокаПараметра.ИмяМодификации = "ОтборПоПодразделению" Тогда
		
		ИменаТиповДокументов = Новый Массив;
		
		Если ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта) Тогда
			Для Каждого РегистрируемыйДокумент Из МетаданныеОбъекта.РегистрируемыеДокументы Цикл
				ИменаТиповДокументов.Добавить(РегистрируемыйДокумент.ПолноеИмя());
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			ИменаТиповДокументов.Добавить(МетаданныеОбъекта.ПолноеИмя());
		КонецЕсли;
		
		Параметры = Новый Структура;
		
		ДобавитьПараметрМодификации(Параметры, "ИменаТиповДокументов", ИменаТиповДокументов);
		ДобавитьПараметрМодификации(Параметры, "ДинамическоеСчитываниеДанных", Список.ДинамическоеСчитываниеДанных);
		ДобавитьПараметрМодификации(Параметры, "Иерархия", Ложь);
		
		СтрокаПараметра.ПараметрыМодификации = Параметры;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрМодификации(Параметры, Имя, Значение, Представление = Неопределено, БыстрыйДоступ = Ложь)
	
	Параметры.Вставить(Имя,
		Новый Структура("Значение,Представление,БыстрыйДоступ", Значение, Представление, БыстрыйДоступ));
		
КонецПроцедуры

Процедура ИзменитьЗапросПриОтбореПоПодразделению(СвойстваСписка, Модифицировать, ИменаТиповДокументов, Иерархия)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СвойстваСписка.ТекстЗапроса);
	
	ИндексВТДокументыПодразделения = Неопределено;
	ИндексОсновногоЗапроса = Неопределено;
	Для Сч = 0 По СхемаЗапроса.ПакетЗапросов.Количество() - 1 Цикл
		ТаблицаДляПомещения = СхемаЗапроса.ПакетЗапросов[Сч].ТаблицаДляПомещения;
		Если ТаблицаДляПомещения = "ВТДокументыПодразделения" Тогда
			ИндексВТДокументыПодразделения = Сч;
		ИначеЕсли ТаблицаДляПомещения = "" Тогда
			ИндексОсновногоЗапроса = Сч;
		КонецЕсли;
	КонецЦикла;
	
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[ИндексОсновногоЗапроса];
	
	Если Модифицировать Тогда
		
		
		Если Иерархия Тогда
			
			
		Иначе
			
			
		КонецЕсли;
		
		Если ИндексВТДокументыПодразделения = Неопределено Тогда
			
			
		КонецЕсли;
		
	Иначе // Отменить модификацию.
		
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ИсправитьИнструкцииКомпоновки(ТекстЗапроса);
	
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура ИсправитьИнструкцииКомпоновки(ТекстЗапроса)
	
	// В версии платформы 8.3.14 у объекта СхемаЗапроса есть свойство РежимКомпоновкиДанных,
	// которое позволяет решить эту проблему на уровне платформы.
	
	ДлинаОкончания = 14;
	ТекстОкончания = Прав(ТекстЗапроса, ДлинаОкончания);
	Поз1 = СтрНайти(ТекстОкончания, "КАК Поле");
	Поз2 = СтрНайти(ТекстОкончания, "}");
	Если Поз1 > 0 И Поз2 > Поз1 Тогда
		Длина = СтрДлина(ТекстЗапроса);
		ТекстЗапроса =
			Лев(ТекстЗапроса, Длина - ДлинаОкончания + Поз1 - 1) + Сред(ТекстЗапроса, Длина - ДлинаОкончания + Поз2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра)
	
	Если БюджетированиеРасширенныйКлиентСервер.ОбновитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра) Тогда
	
		Элемент = Элементы[СтрокаПараметра.ИмяЭлементаФормыПараметра];
		Элемент.РасширеннаяПодсказка.УстановитьДействие(
			"ОбработкаНавигационнойСсылки",
			"Подключаемый_ПараметрМодификацииВыбор");
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Элемент.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ФормаДокументов

#Область ОбработчикиСобытийЭлементовТабличнойЧастиФормы

Функция ПриИзмененииМесяцаНачалаВСтрокеНаСервере(Форма) Экспорт

	ПрежнийМесяцНачалаВСтроке = Форма.РеквизитФормыВЗначение("ИсходныеДанныеМесяцНачало");
	
	Сценарий = Форма.Объект.Сценарий;
	ДатаНачалаДействияСценария = Сценарий.НачалоДействия;
	ДатаОкончанияДействияСценария = Сценарий.ОкончаниеДействия;
	
	Бюджетирование.ПриИзмененииМесяцаНачалаВСтрокеНаСервере(Форма);
	
	Если ПрежнийМесяцНачалаВСтроке < ДатаНачалаДействияСценария Или ПрежнийМесяцНачалаВСтроке > ДатаОкончанияДействияСценария Тогда
	//	Обработчик формы документа - выполнить действие с текущей строкой ТЧ документа
	//	 
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.ИсходныеДанныеМесяцНачало, "НачалоДействия");
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#КонецОбласти