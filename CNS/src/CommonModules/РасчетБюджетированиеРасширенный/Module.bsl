Функция ПроверкаУникальностиРегистратора(ДокументСсылка, ИмяРеквизита, ИмяРегистра) Экспорт
	
	Если ДокументСсылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ЗначениеРеквизита = ДокументСсылка[ИмяРеквизита];	
	Иначе
		Возврат Ложь; //Не уникален - ошибка вызова функции, нет указанного реквизита у регистратора
	Конецесли;	
	
	СтрокаЗамены = "";
	ДобавлятьСтрокуУсловия = Ложь;
	СтрокаУсловия = "
					|	И РегистрДанных.%ИмяРеквизита% = &%ИмяРеквизита%";
	
	Если ТипЗнч(ИмяРегистра)=Тип("Строка") Тогда
		
		МетаданныеРегистровСведений = Метаданные.РегистрыСведений;
		НайденныйРегистрСведений = МетаданныеРегистровСведений.Найти(ИмяРегистра);
		
		МетаданныеРегистровНакоплений = Метаданные.РегистрыНакопления;
		НайденныйРегистрНакоплений = МетаданныеРегистровНакоплений.Найти(ИмяРегистра);
		
		Если Не НайденныйРегистрСведений = Неопределено Тогда 
			Если ТипЗнч(ИмяРеквизита)=Тип("Строка") И Не ПустаяСтрока(ИмяРеквизита) Тогда 
				НайденныйОбъект = Метаданные.НайтиПоПолномуИмени(НайденныйРегистрСведений.ПолноеИмя());
				Если Не НайденныйОбъект.Измерения.Найти(ИмяРеквизита) = Неопределено Тогда
					ДобавлятьСтрокуУсловия = Истина;
					СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "%ИмяРеквизита%", ИмяРеквизита);
				КонецЕсли;	
			КонецЕсли;	
			СтрокаЗамены = "РегистрСведений."+СокрЛП(ИмяРегистра);
		ИначеЕсли Не НайденныйРегистрНакоплений = Неопределено Тогда
			Если ТипЗнч(ИмяРеквизита)=Тип("Строка") И Не ПустаяСтрока(ИмяРеквизита) Тогда 
				НайденныйОбъект = Метаданные.НайтиПоПолномуИмени(НайденныйРегистрНакоплений.ПолноеИмя());
				Если Не НайденныйОбъект.Измерения.Найти(ИмяРеквизита) = Неопределено Тогда
					ДобавлятьСтрокуУсловия = Истина;
					СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "%ИмяРеквизита%", ИмяРеквизита);
				КонецЕсли;	
			КонецЕсли;	
			СтрокаЗамены = "РегистрНакопления."+СокрЛП(ИмяРегистра);
		Иначе
			Возврат Ложь; //Не уникален - ошибка вызова функции
		КонецЕсли;
	Иначе		
		Возврат Ложь; //Не уникален - ошибка вызова функции
	КонецЕсли;     

	Если СтрокаЗамены = "" Тогда
		Возврат Ложь; //Не уникален - ошибка вызова функции
	КонецЕсли;	
	
	Запрос = Новый Запрос();

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РегистрДанных.Регистратор КАК РегистраторСсылка
	               |ИЗ
	               |	%СтрокаЗамены% КАК РегистрДанных
	               |ГДЕ
	               |	НЕ РегистрДанных.Регистратор = &ДокументСсылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СтрокаЗамены%", СтрокаЗамены);
	Если ДобавлятьСтрокуУсловия Тогда
		ТекстЗапроса = ТекстЗапроса + СтрокаУсловия;
		Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина; //Уникален - Нет		
	Иначе
		Возврат Ложь; 	//Не уникален - Имеется запись с другим регистратором
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьНачисления(ДанныеДляПроведения, Документ, ТаблицаНачислений = "Начисления", ПолеДатыДействия = "Ссылка.ПериодРегистрации", ПолеДатыНачала = "Ссылка.ДатаНачала", ПолеДатыОкончания = "Ссылка.ДатаОкончания", ПолеВидаНачисления = "Начисление", СписокФизическихЛиц = Неопределено, ПолеПериодРегистрации = "Ссылка.МесяцНачисления", СторнируемыйДокументКакСторно = Ложь) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	
	// Поля, которые есть не во всех табличных частях, проверяем, и если нет, заменяем на NULL. 
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("ПериодРегистрации", "НАЧАЛОПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ФизическоеЛицо", "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Подразделение", "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("МестоВозникновенияЗатрат", "ЗНАЧЕНИЕ(Справочник.МестаВозникновенияЗатрат.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Организация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ДатаНачала", ПолеДатыНачала);
	НеобязательныеПоля.Вставить("ДатаОкончания", "КОНЕЦПЕРИОДА(" + ПолеДатыОкончания + ", МЕСЯЦ)"); 
	НеобязательныеПоля.Вставить("МесяцНачало", ПолеДатыНачала);
	НеобязательныеПоля.Вставить("МесяцКонец", "КОНЕЦПЕРИОДА(" + ПолеДатыОкончания + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("КодГрейда", "ЗНАЧЕНИЕ(Справочник.КодыГрейдов.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("ПозицияШтатногоРасписания", "ЗНАЧЕНИЕ(Справочник.ПозицииШтатногоРасписания.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("ВидНачисления", "ЗНАЧЕНИЕ(Справочник.ВидыНачислений.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("СтатьяЗатрат", "ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Ставка", "0");
	НеобязательныеПоля.Вставить("Оклад", "0");
	НеобязательныеПоля.Вставить("ДоплатаЗаФункционалОбразовательнойДеятельности", "0");
	НеобязательныеПоля.Вставить("ДоплатаЗаПреподаваниеНаИнЯзыке", "0");
	НеобязательныеПоля.Вставить("РезервНаСреднийЗаработок", "0");
	НеобязательныеПоля.Вставить("ДМС", "0"); 
	НеобязательныеПоля.Вставить("Количество", "0");
	НеобязательныеПоля.Вставить("НСиБолезни", "0"); 
	НеобязательныеПоля.Вставить("ВидВнебюджетногоФонда", "ЗНАЧЕНИЕ(Справочник.ВидыВнебюджетныхФондов.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("ТипНалога", "ЗНАЧЕНИЕ(Справочник.ВидыНачислений.ПустаяСсылка)"); 
	НеобязательныеПоля.Вставить("ПериодДействия", "ЗНАЧЕНИЕ(Перечисление.ПериодыХраненияЗначений.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("СпособОтраженияРезультата", "ЗНАЧЕНИЕ(Перечисление.СпособыОтраженияРезультатов.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Результат", "0");
	НеобязательныеПоля.Вставить("Сумма", "0");
	НеобязательныеПоля.Вставить("СуммаУпр", "0");
	НеобязательныеПоля.Вставить("СуммаСценария", "0");
	НеобязательныеПоля.Вставить("СуммаРегл", "0");
	НеобязательныеПоля.Вставить("СуммаВВалюте", "0");
	
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		// Составляем текст объединения - части запроса.
		ТекстОбъединения = 
			"ВЫБРАТЬ
			|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
			|	Начисления.Ссылка КАК ДокументСсылка,
			|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Подразделение КАК Подразделение,
			|	Начисления.МестоВозникновенияЗатрат КАК МестоВозникновенияЗатрат,
			|	Начисления.Организация КАК Организация,
			|	Начисления.МесяцНачало КАК ДатаНачала,
			|	Начисления.МесяцКонец КАК ДатаОкончания,
			|	Начисления.Сценарий КАК Сценарий,  
			|	Начисления.КодГрейда КАК КодГрейда,  
			|	Начисления.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,  
			|	Начисления.ВидНачисления КАК ВидНачисления,
			|	Начисления.СтатьяЗатрат КАК СтатьяЗатрат,
			|	Начисления.ВидВнебюджетногоФонда КАК ВидВнебюджетногоФонда, 
			|	Начисления.ТипНалога КАК ТипНалога, 
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.СпособОтраженияРезультата КАК СпособОтраженияРезультата, 
			|	Начисления.Результат КАК Результат,
			|	Начисления.Сумма КАК Сумма,
			|	Начисления.Ставка КАК Ставка,
			|	Начисления.Оклад КАК Оклад,
			|	Начисления.ДоплатаЗаФункционалОбразовательнойДеятельности КАК ДоплатаЗаФункционалОбразовательнойДеятельности,
			|	Начисления.ДоплатаЗаПреподаваниеНаИнЯзыке КАК ДоплатаЗаПреподаваниеНаИнЯзыке,
			|	Начисления.РезервНаСреднийЗаработок КАК РезервНаСреднийЗаработок,
			|	Начисления.ДМС КАК ДМС,
			|	Начисления.НСиБолезни КАК НСиБолезни,
			|	Начисления.Количество КАК Количество,
			|	Начисления.СуммаУпр КАК СуммаУпр,
			|	Начисления.СуммаСценария КАК СуммаСценария,
			|	Начисления.СуммаРегл КАК СуммаРегл,
			|	Начисления.СуммаВВалюте КАК СуммаВВалюте
			|ПОМЕСТИТЬ ВТЗаписиНачислений
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка";
		
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли;
		
		Если Не ПерваяТаблица Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ПОМЕСТИТЬ ВТЗаписиНачислений", "");
		КонецЕсли;
		
		Если СтрНайти(ИмяТаблицыНачислений, "Перерасчет") <> 0 Тогда 
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ЛОЖЬ КАК Перерасчет", "ИСТИНА КАК Перерасчет");
		КонецЕсли;
		
		// Проверяем необязательные поля.
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений];
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поле присутствует в метаданных табличной части - не делаем замен.
				Продолжить;
			КонецЕсли;
			
			Если ИмяПоля <> "ДокументОснование" И МетаданныеДокумента.Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поля нет в табличной части, но оно  присутствует в метаданных документа - заменяем на обращение "через .".
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", "Начисления.Ссылка." + ИмяПоля + " КАК");		
			Иначе
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
			КонецЕсли;
		КонецЦикла;
		
		// Выполняем замену параметризуемых имен полей.
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ДатаДействия КАК ДатаДействия", ПолеДатыДействия + " КАК ДатаДействия");
		
		// Подменяем поле начисления и всего, что с ним связано, лишь в случае, если в анализируемой таблице нет поля "по
		// умолчанию".
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Начисление") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление КАК Начисление", ПолеВидаНачисления + " КАК Начисление");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления.Начисление В (&РазовыеНачисления)", ПолеВидаНачисления + " В (&РазовыеНачисления)");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ВидОтпуска", ПолеВидаНачисления + ".ВидОтпуска");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ИспользованиеПериода", ПолеВидаНачисления + ".ИспользованиеПериода");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда", ПолеВидаНачисления + ".ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// 1. Начисления
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений";
	ДанныеДляПроведения.Начисления = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция СоздатьДанныеДляПроведенияНачисленияБюджетирования() Экспорт
	
	ПоляСтруктуры = 
		"МенеджерВременныхТаблиц, 
		|Начисления,
		|Взносы";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Здесь можно будет добавить описание таблиц для других ситуация начислений - расчетов
	
	Возврат ДанныеДляПроведения;
	
КонецФункции 

Процедура СформироватьДвиженияКадровыеСведения(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт	

	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	//СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	//МассивСотрудников = Новый Массив;
	//МассивНачислений = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
			//СотрудникиЗаполнениеФизическихЛиц.Добавить(Строка.Сотрудник);
		КонецЕсли;
		//МассивСотрудников.Добавить(Строка.Сотрудник);
		//МассивНачислений.Добавить(Строка.Начисление);
	КонецЦикла;
	
	//РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНачислений, ИменаРеквизитов);
	Регистратор = Движения.КадровыеСведенияСотрудниковОрганизаций.Отбор.Регистратор;
	//Версия = Регистратор.Значение.Версия;
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.КадровыеСведенияСотрудниковОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период 			 = Строка.ПериодРегистрации;
		НоваяСтрока.НачалоПериода 	 = Строка.ДатаНачала;
		НоваяСтрока.Сценарий 		 = Строка.ДокументСсылка.Сценарий;	
		НоваяСтрока.ОкончаниеПериода = Строка.ДатаОкончания;
		Если Не ЗначениеЗаполнено(Строка.Подразделение) И ЗначениеЗаполнено(Строка.ДокументСсылка.Подразделение) Тогда
		   НоваяСтрока.Подразделение = Строка.ДокументСсылка.Подразделение;	
		КонецЕсли;	
		//НоваяСтрока.ВидНачисления = ПолучитьВидНачисления(); // Вначале нужно организовать цикл по колонкам с суммами и сопоставление с наименованиями видов начислений
		НоваяСтрока.Организация = Организация;
		//НоваяСтрока.Версия = Версия;
		//НоваяСтрока.ПозицияШтатногоРасписания = Строка.ПозицияШтатногоРасписания;
	КонецЦикла;	
	
	Движения.КадровыеСведенияСотрудниковОрганизаций.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.КадровыеСведенияСотрудниковОрганизаций.Записать();
		Движения.КадровыеСведенияСотрудниковОрганизаций.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияФункциональныхБюджетов(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт	

	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Регистратор = Движения.РасчетыПоказателейБюджетовПрогнозов.Отбор.Регистратор;
	//Версия = Регистратор.Значение.Версия;
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.РасчетыПоказателейБюджетовПрогнозов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодПланирования = Строка.ПериодРегистрации;
		НоваяСтрока.Период = Строка.ПериодРегистрации;
		НоваяСтрока.Сумма = Строка.Результат;
		НоваяСтрока.ВидРасчета = Строка.ДокументСсылка.ВидРасчета;
	КонецЦикла;	
	
	Движения.РасчетыПоказателейБюджетовПрогнозов.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.РасчетыПоказателейБюджетовПрогнозов.Записать();
		Движения.РасчетыПоказателейБюджетовПрогнозов.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРезервов(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт	

	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Регистратор = Движения.РасчетыПоказателейРезервов.Отбор.Регистратор;
	//Версия = Регистратор.Значение.Версия;
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.РасчетыПоказателейРезервов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодПланирования = Строка.ПериодРегистрации;
		НоваяСтрока.Период = Строка.ПериодРегистрации;
		НоваяСтрока.Сумма = Строка.Результат;
		НоваяСтрока.ВидРасчета = Строка.ДокументСсылка.ВидРасчета;
	КонецЦикла;	
	
	Движения.РасчетыПоказателейРезервов.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.РасчетыПоказателейРезервов.Записать();
		Движения.РасчетыПоказателейРезервов.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыДляПроверкиРезультатовРаспределенияНачислений() Экспорт

	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("МесяцНачисления", Истина);
	ПроверяемыеПоля.Вставить("ФизическоеЛицо",  Истина);
	
	МассивНачислений = Бюджетирование.МассивНачислений();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Начисление", 	  МассивНачислений);
	Параметры.Вставить("ПроверяемыеПоля", ПроверяемыеПоля);
	
	Возврат Параметры;

КонецФункции

Функция ОписаниеТиповЧисло()

	ОписаниеТиповЧисло = Новый Структура;
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_3", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло10_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло12_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	
	Возврат ОписаниеТиповЧисло;

КонецФункции

Функция НовыйСодержимоеДокументаРасчетаБюджетирования() Экспорт
	
	СодержимоеДокумента = Новый Структура;
	СодержимоеДокумента.Вставить("Начисления", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("Взносы", ПустаяТаблицаВзносыДокумента());
	
	Возврат СодержимоеДокумента;
	
КонецФункции

Функция ПустаяТаблицаНачисления(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("МестоВозникновенияЗатрат", Новый ОписаниеТипов("СправочникСсылка.МестаВозникновенияЗатрат"));	
	Начисления.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("СправочникСсылка.ВидыНачислений"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);

	Возврат Начисления;
	
КонецФункции

Функция ПустаяТаблицаВзносыДокумента(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
		
	Взносы = Новый ТаблицаЗначений;
	Взносы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Взносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Взносы.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Взносы.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("СправочникСсылка.ВидыНачислений"));
	Взносы.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Взносы.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Взносы.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
	Взносы.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);

	Возврат Взносы;
	
КонецФункции

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение,
		|МестоВозникновенияЗатрат,
		|ДокументСсылка, 
		|ФизическиеЛица, 
		|НачалоПериода,
		|ОкончаниеПериода,
		|ВидРасчета,
		|ИсточникРасчета,
		|Сценарий,
		|МногопотоковоеЗаполнение,
		|АдресХранилища,
		|");
		                           
	ДополнительныеПараметры.МногопотоковоеЗаполнение = Ложь;
	ДополнительныеПараметры.ВидРасчета = Перечисления.ВидыРасчетаБюджетныхПоказателей.ПоНачислению;
	ДополнительныеПараметры.Сценарий = Справочники.Сценарии.ПустаяСсылка();
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	ДанныеЗаполнения = Новый Структура(
		"Начисления, 
		|Взносы,
		|");
	
	// По умолчанию это перечислимые коллекции.
	ДанныеЗаполнения.Начисления = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Взносы = Новый ТаблицаЗначений;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция СоздатьМенеджерРасчета(МесяцНачисления, НачалоПериода, ОкончаниеПериода, ПараметрыИнициализации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Бюджетирование.ВыполнятьРасчетБюджетированияБезОптимизации() Тогда
		МенеджерРасчета = Обработки.МенеджерРасчетаБюджетированияАрхивный.Создать();
	Иначе
		МенеджерРасчета = Обработки.МенеджерРасчетаБюджетирования.Создать();
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Ложь);
	
	ПериодРасчета = Новый СтандартныйПериод;
	//Если Не НачалоПериода = Неопределено 
	//		ИЛИ Не НачалоПериода = Дата(1,1,1) Тогда
		ПериодРасчета.ДатаНачала = НачалоМесяца(НачалоПериода);	
	//Иначе	
	//	ПериодРасчета.ДатаНачала = НачалоМесяца(МесяцНачисления);
	//КонецЕсли;
	//Если Не ОкончаниеПериода = Неопределено 
	//		ИЛИ Не ОкончаниеПериода = Дата(1,1,1) Тогда
		ПериодРасчета.ДатаОкончания = КонецМесяца(ОкончаниеПериода);	
	//Иначе	
	//	ПериодРасчета.ДатаОкончания = КонецМесяца(МесяцНачисления);
	//КонецЕсли;	
	МенеджерРасчета.Инициализировать(ПериодРасчета, ПараметрыИнициализации);
	
	Возврат МенеджерРасчета;
	
КонецФункции

Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт	
	
	ЗамерПодготовкаДанныхЗаполненияДокумента = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	ФизическиеЛица = ДополнительныеПараметры.ФизическиеЛица;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	Подразделение = ДополнительныеПараметры.Подразделение;
	МестоВозникновенияЗатрат = ДополнительныеПараметры.МестоВозникновенияЗатрат;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	МногопотоковоеЗаполнение = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	ФизическиеЛицаДополнительныйДоход = Неопределено;
	АдресХранилища = ДополнительныеПараметры.АдресХранилища;
	НастройкиРасчетаБюджетирования = НастройкиРасчетаБюджетировая();
	ЗаполнятьПерерасчеты = ОписаниеДокумента.ЗаполнятьПерерасчеты;
	ВидРасчета = ДополнительныеПараметры.ВидРасчета;
	
	ИсточникРасчета = Неопределено;
	Если ДополнительныеПараметры.Свойство("ИсточникРасчета", ИсточникРасчета) 
			И Не ИсточникРасчета = Неопределено Тогда
		ИсточникРасчета = ДополнительныеПараметры.ИсточникРасчета;		
	КонецЕсли;	
		
	Сценарий = ДополнительныеПараметры.Сценарий;
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
	КонецЕсли;
	
	// Флаги выполняемых действия при заполнении
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьВзносы = ОписаниеДокумента.ВзносыИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления;
	РассчитыватьВзносы = ЕстьВзносы;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("БюджетированиеПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыФизическихЛиц(ИменаВТ, МенеджерВременныхТаблиц, ФизическиеЛица);
		КонецЕсли;
	КонецЕсли;
	ЗамерВыявленияФизическихЛиц = ОценкаПроизводительности.НачатьЗамерВремени();
	//   Блок работы со списками сотрудников - но их у нас нет!
	//
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("РасчетПоказателейБюджетовПрогнозов.ВыявлениеФизическихЛиц", ЗамерВыявленияФизическихЛиц);

	ПараметрыИнициализации = Новый Структура("ДокументСсылка, Организация,ВидРасчета,Сценарий");
	ПараметрыИнициализации.Вставить("ДокументСсылка", ДокументСсылка);
	ПараметрыИнициализации.Вставить("Организация", Организация);
	ПараметрыИнициализации.Вставить("Подразделение", Подразделение);
	ПараметрыИнициализации.Вставить("МестоВозникновенияЗатрат", МестоВозникновенияЗатрат);
	ПараметрыИнициализации.Вставить("ВидРасчета", ВидРасчета);
	
	Если Не ИсточникРасчета = Неопределено Тогда
		ПараметрыИнициализации.Вставить("ИсточникРасчета", ИсточникРасчета);	
	КонецЕсли;	
	
	ПараметрыИнициализации.Вставить("Сценарий", Сценарий);
	ПараметрыИнициализации.Вставить("ЭтоРасчетРезерва", ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.РасчетРезерва"));
	
	МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, НачалоПериода, ОкончаниеПериода, ПараметрыИнициализации);
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	
	МенеджерРасчета.НастройкиРасчета.ФизическиеЛица = ФизическиеЛица;
	
	МенеджерРасчета.НастройкиНачислений.РассчитыватьНачисления = ЕстьНачисления;
	
	ФизическиеЛицаДляНачислений = МенеджерРасчета.ТаблицаФизическихЛиц();
	
	// Сотрудники перерасчета.
	Если ЗаполнятьПерерасчеты Тогда
		// Если будут перерасчеты в будущем (функционал)
		//
	КонецЕсли;
	
	// Сотрудники начислений
	//Если ЕстьНачисления Или ЕстьВзносы Тогда
	//	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
	//		Если ЕстьНачисления Или ЕстьВзносы Тогда 
	//			НоваяСтрока = ФизическиеЛицаДляНачислений.Добавить();
	//			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	//			НоваяСтрока.ДатаНачала = МесяцНачисления;
	//			НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
	ОтборМенеджераРасчета.Подразделение = Подразделение; 
	ОтборМенеджераРасчета.МестоВозникновенияЗатрат = МестоВозникновенияЗатрат;
	МенеджерРасчета.ЗаполнитьПоказателиОтбора(ФизическиеЛицаДляНачислений, ОтборМенеджераРасчета);
	
	//В Этой процедуре выполняем рассчет всех показателей согласно формулам в Excel
	МенеджерРасчета.РассчитатьПоказатели();
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.РасчитанныеПоказатели.Начисления;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.РасчитанныеПоказатели.Взносы;
	
	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("РасчетПоказателейБюджетовПрогнозов.ПодготовкаДанныхЗаполненияДокумента", ЗамерПодготовкаДанныхЗаполненияДокумента);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДополнительныеПараметрыФизическихЛицДляНачисленийБюджетирования() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ОкончаниеПериода, 
		|МенеджерВременныхТаблиц, 
		|");
		
	Возврат ДополнительныеПараметры;
		
КонецФункции  

Функция НастройкиРасчетаБюджетированияПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	
	ЗначенияПоУмолчанию.Вставить("ВыполнятьРасчетПоПодразделениям", Истина);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

Функция НастройкиРасчетаБюджетировая() Экспорт
	
	НастройкиРасчетаБюджетироваяРасширенный = РегистрыСведений.НастройкиРасчетаБюджетированияРасширенный.СоздатьМенеджерЗаписи();
	НастройкиРасчетаБюджетироваяРасширенный.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиРасчетаБюджетироваяРасширенный, Метаданные.РегистрыСведений.НастройкиРасчетаБюджетированияРасширенный);
	
	Если НастройкиРасчетаБюджетироваяРасширенный.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	ЗначенияПоУмолчанию = НастройкиРасчетаБюджетированияПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ПроверитьСоответствиеПодчиненностиРеквизитовСтрокаПоВладельцу(ПроверяемаяСтрока, ВладелецСсылка, Отказ) Экспорт

	ПроверитьСоответствиеПодчиненностиРеквизитовВладельцу(ПроверяемаяСтрока.Подразделение, ВладелецСсылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
		
	ПроверитьСоответствиеПодчиненностиРеквизитовВладельцу(ПроверяемаяСтрока.ПозицияШтатногоРасписания, ВладелецСсылка, Отказ); 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
		
	ПроверитьСоответствиеПодчиненностиРеквизитовВладельцу(ПроверяемаяСтрока.МестоВозникновенияЗатрат, ВладелецСсылка, Отказ);
	
КонецПроцедуры	
	
Процедура ПроверитьСоответствиеПодчиненностиРеквизитовВладельцу(ПроверяемыйРеквизит, ВладелецСсылка, Отказ) Экспорт 
	
	ТекстСообщения = "";
		
	Если ВладелецСсылка = Неопределено Или Не ЗначениеЗаполнено(ВладелецСсылка) Тогда
		ТекстСообщения = НСтр("ru = 'Недопустимый ссылка на владельца реквизита'");
	ИначеЕсли Не ЗначениеЗаполнено(ПроверяемыйРеквизит.Владелец) Тогда
		ТекстСообщения = НСтр("ru = 'Для проверяемого реквизита не задан владелец'");
	ИначеЕсли Не ПроверяемыйРеквизит.Владелец = ВладелецСсылка Тогда	
		ТекстСообщения = НСтр("ru = 'Владелец проверяемого реквизита не соотвествует условию проверки'");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивНетиповыхВидовНачислений() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыНачислений.Ссылка КАК ВидНачисленияСсылка
	                      |ИЗ
	                      |	Справочник.ВидыНачислений КАК ВидыНачислений
	                      |ГДЕ
	                      |	ВидыНачислений.Предопределенный = ЛОЖЬ");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	