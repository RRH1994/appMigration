
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции 


#Область УправлениеОтборамиВФормахСДинамическимСписком

// Обновляется надпись не доступных отборов пользователю
//
// Параметры:
//		Форма - Форма с динамическим списком
//		ИсключаемыеИменаОтборов - Строка - Имена отборов, исключаемых из надписи, разделенные запятой.
//
Процедура ОбновитьНадписьФиксированногоОтбора(Форма) Экспорт
	
	СписокНастройкиОтбораНадпись = "";
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	
	ПользовательскийОтборДоступен = Ложь;
	Для каждого НастройкаКомпоновщика Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтборДоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	КоллекцияОтборов = ФиксированныйОтборДинамическогоСписка(Форма, Список);
	Для каждого СоответствиеЭлементаОтбора Из КоллекцияОтборов Цикл
		ЭлементОтбора = СоответствиеЭлементаОтбора.Значение;
		Если Не Форма.ИспользоватьНесколькоОрганизацийБюджетированиеБазовая И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			// Не выводим отбор по организации при однофирменном учете
			Продолжить;
		КонецЕсли;
		Если ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПользовательскийОтборДоступен Или ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			ДополнитьНадписьНастроекОтбораДинамическогоСписка(
				ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора),
				СписокНастройкиОтбораНадпись, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Форма.СписокНастройкиОтбораНадпись = СписокНастройкиОтбораНадпись;
	
	// Если нет скрытых отборов, то и элементы не нужно выводить на форму
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СписокНастройкиОтбораНадпись", "Видимость", Не ПустаяСтрока(СписокНастройкиОтбораНадпись));
	
КонецПроцедуры

// Возвращает не доступные пользователю отборы
//
// Параметры:
//		Форма - Форма с динамическим списком
//		Список - Реквизит формы "Динамический список".
//
// Возвращаемое значение:
//		КоллекцияОтборов - Соответствие
//				Ключ - Поле компоновки данных
//				Значение - Элемент отбора компоновки данных или структура, соответствующая свойствам элементу отбора компоновки данных.
//
Функция ФиксированныйОтборДинамическогоСписка(Форма, Список) Экспорт
	
	КоллекцияОтборов = Новый Соответствие;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	
	// Все, что находится в Параметры.Отбор потом перенесется в ФиксированныеНастройки, поэтому все отборы недоступны пользователю.
	Если Форма.Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементОтбора Из Форма.Параметры.Отбор Цикл
			СтруктураЗначенияОтбора = Новый Структура;
			СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ));
			СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			СтруктураЗначенияОтбора.Вставить("Использование", Истина);
			СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.Значение);
			СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			СтруктураЗначенияОтбора.Вставить("Представление", ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора.Ключ));
			КоллекцияОтборов.Вставить(Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ), СтруктураЗначенияОтбора);
		КонецЦикла;
	КонецЕсли;
	
	// Фиксированные настройки все недоступны пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.ЛевоеЗначение);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ЭлементОтбора.ВидСравнения);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.ПравоеЗначение);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", ЭлементОтбора.Представление);
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЗначенияОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки отбора, указанные для списка, могут быть доступные пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или Не ПустаяСтрока(ЭлементОтбора.ИдентификаторПользовательскойНастройки)
			Или ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", ЭлементОтбора.РежимОтображения);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоллекцияОтборов;
	
КонецФункции

// Возвращает пользовательское представление идентификатора
//
// Параметры:
//		ИмяБезПробелов - Идентификатор, по которому требуется получить представление.
//
// Возвращаемое значение:
//		ПредставлениеЭлементаОтбора - Строка - Пользовательское представление идентификатора.
//
Функция ПредставлениеИмениБезПробелов(ИмяБезПробелов) Экспорт
	
	ПредставлениеЭлементаОтбора = "";
	БылВРег = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИмяБезПробелов) Цикл
		Символ = Сред(ИмяБезПробелов, НомерСимвола, 1);
		СледующийСимволВРег = Ложь;
		Если НомерСимвола + 1 <= СтрДлина(ИмяБезПробелов) Тогда
			СледующийСимвол = Сред(ИмяБезПробелов, НомерСимвола + 1, 1);
			СледующийСимволВРег = СледующийСимвол = ВРег(СледующийСимвол);
		КонецЕсли;
		ЭтоВРег = Символ = ВРег(Символ);
		Если Не БылВРег И ЭтоВРег И Не НомерСимвола = 1 Тогда
			Если СледующийСимволВРег Тогда
				Символ = " " + ВРег(Символ);
			Иначе
				Символ = " " + НРег(Символ);
			КонецЕсли;
		КонецЕсли;
		БылВРег = ЭтоВРег;
		ПредставлениеЭлементаОтбора = ПредставлениеЭлементаОтбора + Символ;
	КонецЦикла;
	
	Возврат ПредставлениеЭлементаОтбора;
	
КонецФункции

Процедура ДополнитьНадписьНастроекОтбораДинамическогоСписка(НаименованиеЭлементаОтбора, СписокНастройкиОтбораНадпись, ЭлементОтбора)
	
	Если Не ЭлементОтбора.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЭлементаОтбора = НаименованиеЭлементаОтбора;
	
	ПравоеЗначениеОтбора = ЭлементОтбора.ПравоеЗначение;
	Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("Дата") Тогда
		ПравоеЗначениеОтбора = Формат(ПравоеЗначениеОтбора, "ДЛФ=DD");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Структура") И ЭлементОтбора.Свойство("ЭтоГруппа") И ЭлементОтбора.ЭтоГруппа = Истина Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("ФиксированныйМассив") Или ТипЗнч(ПравоеЗначениеОтбора) = Тип("Массив") Тогда
			Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
				ТекстЭлементаОтбора = СтрШаблон(
					НСтр("ru = '%1 в списке:%2'"),
					ТекстЭлементаОтбора,
					?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям'"), ПравоеЗначениеОтбора[0]));
			КонецЕсли;
		Иначе
			ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1: %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 > %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 >= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 в иерархии %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 в списке:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 в списке по иерархии:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 заполнено'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 < %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 <= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 начинается с %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не в иерархии %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 не в списке:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтрШаблон(
				НСтр("ru = '%1 не в списке по иерархии:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru = 'отобрано по нескольким значениям'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не заполнено'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не начинается с %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не содержит %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 <> %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 не содержит %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 содержит %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ТекстЭлементаОтбора = СтрШаблон(НСтр("ru = '%1 содержит %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстРазделителя = ?(ПустаяСтрока(СписокНастройкиОтбораНадпись), "", "; ");
	СписокНастройкиОтбораНадпись = СтрШаблон(НСтр("ru = '%1%2%3'"), СписокНастройкиОтбораНадпись, ТекстРазделителя, ТекстЭлементаОтбора);
	
КонецПроцедуры

Функция ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда
		НаименованиеОтбора = ЭлементОтбора;
	Иначе
		ПредставлениеЭлементаОтбора = ЭлементОтбора.Представление;
		Если Не ПустаяСтрока(ПредставлениеЭлементаОтбора) Тогда
			Возврат ПредставлениеЭлементаОтбора;
		КонецЕсли;
		
		ЛевоеЗначениеОтбора = ЭлементОтбора.ЛевоеЗначение;
		
		НаименованиеОтбора = Строка(ЛевоеЗначениеОтбора);
	КонецЕсли;
		
	Если НаименованиеОтбора = "Тип" Тогда
		Возврат НСтр("ru = 'Тип документа'");
	КонецЕсли;
	
	ПутьКДаннымЭлементаФормы = Форма.НаименованиеРеквизитаФормыДинамическийСписок + "." + НаименованиеОтбора;
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(ПутьКДаннымЭлементаФормы);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(НаименованиеОтбора);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат ПредставлениеИмениБезПробелов(НаименованиеОтбора);
	
КонецФункции

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  КомпоновщикНастроек - Компоновщик настроек динамического списка.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач КомпоновщикНастроек,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	НайтиРекурсивно(КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	Для каждого НастройкаКомпоновщика Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			НайтиРекурсивно(НастройкаКомпоновщика.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти